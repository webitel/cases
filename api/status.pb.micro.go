// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: status.proto

package api

import (
	fmt "fmt"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Statuses service

func NewStatusesEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "Statuses.ListStatuses",
			Path:    []string{"/statuses"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "Statuses.CreateStatus",
			Path:    []string{"/statuses"},
			Method:  []string{"POST"},
			Handler: "rpc",
		},
		{
			Name:    "Statuses.UpdateStatus",
			Path:    []string{"/statuses/{id}"},
			Method:  []string{"PUT"},
			Handler: "rpc",
		},
		{
			Name:    "Statuses.DeleteStatus",
			Path:    []string{"/statuses/{id}"},
			Method:  []string{"DELETE"},
			Handler: "rpc",
		},
		{
			Name:    "Statuses.LocateStatus",
			Path:    []string{"/statuses/{id}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
	}
}

// Client API for Statuses service

type StatusesService interface {
	// RPC method to list or search statuses
	ListStatuses(ctx context.Context, in *ListStatusRequest, opts ...client.CallOption) (*StatusList, error)
	// RPC method to create a new status
	CreateStatus(ctx context.Context, in *CreateStatusRequest, opts ...client.CallOption) (*Status, error)
	// RPC method to update an existing status
	UpdateStatus(ctx context.Context, in *UpdateStatusRequest, opts ...client.CallOption) (*Status, error)
	// RPC method to delete an existing status
	DeleteStatus(ctx context.Context, in *DeleteStatusRequest, opts ...client.CallOption) (*Status, error)
	// RPC method to locate a specific status by ID
	LocateStatus(ctx context.Context, in *LocateStatusRequest, opts ...client.CallOption) (*LocateStatusResponse, error)
}

type statusesService struct {
	c    client.Client
	name string
}

func NewStatusesService(name string, c client.Client) StatusesService {
	return &statusesService{
		c:    c,
		name: name,
	}
}

func (c *statusesService) ListStatuses(ctx context.Context, in *ListStatusRequest, opts ...client.CallOption) (*StatusList, error) {
	req := c.c.NewRequest(c.name, "Statuses.ListStatuses", in)
	out := new(StatusList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusesService) CreateStatus(ctx context.Context, in *CreateStatusRequest, opts ...client.CallOption) (*Status, error) {
	req := c.c.NewRequest(c.name, "Statuses.CreateStatus", in)
	out := new(Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusesService) UpdateStatus(ctx context.Context, in *UpdateStatusRequest, opts ...client.CallOption) (*Status, error) {
	req := c.c.NewRequest(c.name, "Statuses.UpdateStatus", in)
	out := new(Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusesService) DeleteStatus(ctx context.Context, in *DeleteStatusRequest, opts ...client.CallOption) (*Status, error) {
	req := c.c.NewRequest(c.name, "Statuses.DeleteStatus", in)
	out := new(Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusesService) LocateStatus(ctx context.Context, in *LocateStatusRequest, opts ...client.CallOption) (*LocateStatusResponse, error) {
	req := c.c.NewRequest(c.name, "Statuses.LocateStatus", in)
	out := new(LocateStatusResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Statuses service

type StatusesHandler interface {
	// RPC method to list or search statuses
	ListStatuses(context.Context, *ListStatusRequest, *StatusList) error
	// RPC method to create a new status
	CreateStatus(context.Context, *CreateStatusRequest, *Status) error
	// RPC method to update an existing status
	UpdateStatus(context.Context, *UpdateStatusRequest, *Status) error
	// RPC method to delete an existing status
	DeleteStatus(context.Context, *DeleteStatusRequest, *Status) error
	// RPC method to locate a specific status by ID
	LocateStatus(context.Context, *LocateStatusRequest, *LocateStatusResponse) error
}

func RegisterStatusesHandler(s server.Server, hdlr StatusesHandler, opts ...server.HandlerOption) error {
	type statuses interface {
		ListStatuses(ctx context.Context, in *ListStatusRequest, out *StatusList) error
		CreateStatus(ctx context.Context, in *CreateStatusRequest, out *Status) error
		UpdateStatus(ctx context.Context, in *UpdateStatusRequest, out *Status) error
		DeleteStatus(ctx context.Context, in *DeleteStatusRequest, out *Status) error
		LocateStatus(ctx context.Context, in *LocateStatusRequest, out *LocateStatusResponse) error
	}
	type Statuses struct {
		statuses
	}
	h := &statusesHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Statuses.ListStatuses",
		Path:    []string{"/statuses"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Statuses.CreateStatus",
		Path:    []string{"/statuses"},
		Method:  []string{"POST"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Statuses.UpdateStatus",
		Path:    []string{"/statuses/{id}"},
		Method:  []string{"PUT"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Statuses.DeleteStatus",
		Path:    []string{"/statuses/{id}"},
		Method:  []string{"DELETE"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Statuses.LocateStatus",
		Path:    []string{"/statuses/{id}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&Statuses{h}, opts...))
}

type statusesHandler struct {
	StatusesHandler
}

func (h *statusesHandler) ListStatuses(ctx context.Context, in *ListStatusRequest, out *StatusList) error {
	return h.StatusesHandler.ListStatuses(ctx, in, out)
}

func (h *statusesHandler) CreateStatus(ctx context.Context, in *CreateStatusRequest, out *Status) error {
	return h.StatusesHandler.CreateStatus(ctx, in, out)
}

func (h *statusesHandler) UpdateStatus(ctx context.Context, in *UpdateStatusRequest, out *Status) error {
	return h.StatusesHandler.UpdateStatus(ctx, in, out)
}

func (h *statusesHandler) DeleteStatus(ctx context.Context, in *DeleteStatusRequest, out *Status) error {
	return h.StatusesHandler.DeleteStatus(ctx, in, out)
}

func (h *statusesHandler) LocateStatus(ctx context.Context, in *LocateStatusRequest, out *LocateStatusResponse) error {
	return h.StatusesHandler.LocateStatus(ctx, in, out)
}
