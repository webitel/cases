// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: close_reason.proto

package api

import (
	fmt "fmt"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CloseReasons service

func NewCloseReasonsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "CloseReasons.ListCloseReasons",
			Path:    []string{"/closeReasons"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "CloseReasons.CreateCloseReason",
			Path:    []string{"/closeReasons"},
			Method:  []string{"POST"},
			Handler: "rpc",
		},
		{
			Name:    "CloseReasons.UpdateCloseReason",
			Path:    []string{"/closeReasons/{id}"},
			Method:  []string{"PUT"},
			Handler: "rpc",
		},
		{
			Name:    "CloseReasons.DeleteCloseReason",
			Path:    []string{"/closeReasons/{id}"},
			Method:  []string{"DELETE"},
			Handler: "rpc",
		},
		{
			Name:    "CloseReasons.LocateCloseReason",
			Path:    []string{"/closeReasons/{id}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
	}
}

// Client API for CloseReasons service

type CloseReasonsService interface {
	// RPC method to list or search close reasons
	ListCloseReasons(ctx context.Context, in *ListCloseReasonRequest, opts ...client.CallOption) (*CloseReasonList, error)
	// RPC method to create a new close reason
	CreateCloseReason(ctx context.Context, in *CreateCloseReasonRequest, opts ...client.CallOption) (*CloseReason, error)
	// RPC method to update an existing close reason
	UpdateCloseReason(ctx context.Context, in *UpdateCloseReasonRequest, opts ...client.CallOption) (*CloseReason, error)
	// RPC method to delete an existing close reason
	DeleteCloseReason(ctx context.Context, in *DeleteCloseReasonRequest, opts ...client.CallOption) (*CloseReason, error)
	// RPC method to locate a specific close reason by ID
	LocateCloseReason(ctx context.Context, in *LocateCloseReasonRequest, opts ...client.CallOption) (*LocateCloseReasonResponse, error)
}

type closeReasonsService struct {
	c    client.Client
	name string
}

func NewCloseReasonsService(name string, c client.Client) CloseReasonsService {
	return &closeReasonsService{
		c:    c,
		name: name,
	}
}

func (c *closeReasonsService) ListCloseReasons(ctx context.Context, in *ListCloseReasonRequest, opts ...client.CallOption) (*CloseReasonList, error) {
	req := c.c.NewRequest(c.name, "CloseReasons.ListCloseReasons", in)
	out := new(CloseReasonList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *closeReasonsService) CreateCloseReason(ctx context.Context, in *CreateCloseReasonRequest, opts ...client.CallOption) (*CloseReason, error) {
	req := c.c.NewRequest(c.name, "CloseReasons.CreateCloseReason", in)
	out := new(CloseReason)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *closeReasonsService) UpdateCloseReason(ctx context.Context, in *UpdateCloseReasonRequest, opts ...client.CallOption) (*CloseReason, error) {
	req := c.c.NewRequest(c.name, "CloseReasons.UpdateCloseReason", in)
	out := new(CloseReason)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *closeReasonsService) DeleteCloseReason(ctx context.Context, in *DeleteCloseReasonRequest, opts ...client.CallOption) (*CloseReason, error) {
	req := c.c.NewRequest(c.name, "CloseReasons.DeleteCloseReason", in)
	out := new(CloseReason)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *closeReasonsService) LocateCloseReason(ctx context.Context, in *LocateCloseReasonRequest, opts ...client.CallOption) (*LocateCloseReasonResponse, error) {
	req := c.c.NewRequest(c.name, "CloseReasons.LocateCloseReason", in)
	out := new(LocateCloseReasonResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CloseReasons service

type CloseReasonsHandler interface {
	// RPC method to list or search close reasons
	ListCloseReasons(context.Context, *ListCloseReasonRequest, *CloseReasonList) error
	// RPC method to create a new close reason
	CreateCloseReason(context.Context, *CreateCloseReasonRequest, *CloseReason) error
	// RPC method to update an existing close reason
	UpdateCloseReason(context.Context, *UpdateCloseReasonRequest, *CloseReason) error
	// RPC method to delete an existing close reason
	DeleteCloseReason(context.Context, *DeleteCloseReasonRequest, *CloseReason) error
	// RPC method to locate a specific close reason by ID
	LocateCloseReason(context.Context, *LocateCloseReasonRequest, *LocateCloseReasonResponse) error
}

func RegisterCloseReasonsHandler(s server.Server, hdlr CloseReasonsHandler, opts ...server.HandlerOption) error {
	type closeReasons interface {
		ListCloseReasons(ctx context.Context, in *ListCloseReasonRequest, out *CloseReasonList) error
		CreateCloseReason(ctx context.Context, in *CreateCloseReasonRequest, out *CloseReason) error
		UpdateCloseReason(ctx context.Context, in *UpdateCloseReasonRequest, out *CloseReason) error
		DeleteCloseReason(ctx context.Context, in *DeleteCloseReasonRequest, out *CloseReason) error
		LocateCloseReason(ctx context.Context, in *LocateCloseReasonRequest, out *LocateCloseReasonResponse) error
	}
	type CloseReasons struct {
		closeReasons
	}
	h := &closeReasonsHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "CloseReasons.ListCloseReasons",
		Path:    []string{"/closeReasons"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "CloseReasons.CreateCloseReason",
		Path:    []string{"/closeReasons"},
		Method:  []string{"POST"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "CloseReasons.UpdateCloseReason",
		Path:    []string{"/closeReasons/{id}"},
		Method:  []string{"PUT"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "CloseReasons.DeleteCloseReason",
		Path:    []string{"/closeReasons/{id}"},
		Method:  []string{"DELETE"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "CloseReasons.LocateCloseReason",
		Path:    []string{"/closeReasons/{id}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&CloseReasons{h}, opts...))
}

type closeReasonsHandler struct {
	CloseReasonsHandler
}

func (h *closeReasonsHandler) ListCloseReasons(ctx context.Context, in *ListCloseReasonRequest, out *CloseReasonList) error {
	return h.CloseReasonsHandler.ListCloseReasons(ctx, in, out)
}

func (h *closeReasonsHandler) CreateCloseReason(ctx context.Context, in *CreateCloseReasonRequest, out *CloseReason) error {
	return h.CloseReasonsHandler.CreateCloseReason(ctx, in, out)
}

func (h *closeReasonsHandler) UpdateCloseReason(ctx context.Context, in *UpdateCloseReasonRequest, out *CloseReason) error {
	return h.CloseReasonsHandler.UpdateCloseReason(ctx, in, out)
}

func (h *closeReasonsHandler) DeleteCloseReason(ctx context.Context, in *DeleteCloseReasonRequest, out *CloseReason) error {
	return h.CloseReasonsHandler.DeleteCloseReason(ctx, in, out)
}

func (h *closeReasonsHandler) LocateCloseReason(ctx context.Context, in *LocateCloseReasonRequest, out *LocateCloseReasonResponse) error {
	return h.CloseReasonsHandler.LocateCloseReason(ctx, in, out)
}
