// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: appeal.proto

package api

import (
	fmt "fmt"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Appeals service

func NewAppealsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "Appeals.ListAppeals",
			Path:    []string{"/appeals"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "Appeals.CreateAppeal",
			Path:    []string{"/appeals"},
			Method:  []string{"POST"},
			Handler: "rpc",
		},
		{
			Name:    "Appeals.UpdateAppeal",
			Path:    []string{"/appeals/{id}"},
			Method:  []string{"PUT"},
			Handler: "rpc",
		},
		{
			Name:    "Appeals.DeleteAppeal",
			Path:    []string{"/appeals/{id}"},
			Method:  []string{"DELETE"},
			Handler: "rpc",
		},
		{
			Name:    "Appeals.LocateAppeal",
			Path:    []string{"/appeals/{id}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
	}
}

// Client API for Appeals service

type AppealsService interface {
	ListAppeals(ctx context.Context, in *ListAppealRequest, opts ...client.CallOption) (*AppealList, error)
	CreateAppeal(ctx context.Context, in *CreateAppealRequest, opts ...client.CallOption) (*Appeal, error)
	UpdateAppeal(ctx context.Context, in *UpdateAppealRequest, opts ...client.CallOption) (*Appeal, error)
	DeleteAppeal(ctx context.Context, in *DeleteAppealRequest, opts ...client.CallOption) (*Appeal, error)
	LocateAppeal(ctx context.Context, in *LocateAppealRequest, opts ...client.CallOption) (*LocateAppealResponse, error)
}

type appealsService struct {
	c    client.Client
	name string
}

func NewAppealsService(name string, c client.Client) AppealsService {
	return &appealsService{
		c:    c,
		name: name,
	}
}

func (c *appealsService) ListAppeals(ctx context.Context, in *ListAppealRequest, opts ...client.CallOption) (*AppealList, error) {
	req := c.c.NewRequest(c.name, "Appeals.ListAppeals", in)
	out := new(AppealList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appealsService) CreateAppeal(ctx context.Context, in *CreateAppealRequest, opts ...client.CallOption) (*Appeal, error) {
	req := c.c.NewRequest(c.name, "Appeals.CreateAppeal", in)
	out := new(Appeal)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appealsService) UpdateAppeal(ctx context.Context, in *UpdateAppealRequest, opts ...client.CallOption) (*Appeal, error) {
	req := c.c.NewRequest(c.name, "Appeals.UpdateAppeal", in)
	out := new(Appeal)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appealsService) DeleteAppeal(ctx context.Context, in *DeleteAppealRequest, opts ...client.CallOption) (*Appeal, error) {
	req := c.c.NewRequest(c.name, "Appeals.DeleteAppeal", in)
	out := new(Appeal)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appealsService) LocateAppeal(ctx context.Context, in *LocateAppealRequest, opts ...client.CallOption) (*LocateAppealResponse, error) {
	req := c.c.NewRequest(c.name, "Appeals.LocateAppeal", in)
	out := new(LocateAppealResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Appeals service

type AppealsHandler interface {
	ListAppeals(context.Context, *ListAppealRequest, *AppealList) error
	CreateAppeal(context.Context, *CreateAppealRequest, *Appeal) error
	UpdateAppeal(context.Context, *UpdateAppealRequest, *Appeal) error
	DeleteAppeal(context.Context, *DeleteAppealRequest, *Appeal) error
	LocateAppeal(context.Context, *LocateAppealRequest, *LocateAppealResponse) error
}

func RegisterAppealsHandler(s server.Server, hdlr AppealsHandler, opts ...server.HandlerOption) error {
	type appeals interface {
		ListAppeals(ctx context.Context, in *ListAppealRequest, out *AppealList) error
		CreateAppeal(ctx context.Context, in *CreateAppealRequest, out *Appeal) error
		UpdateAppeal(ctx context.Context, in *UpdateAppealRequest, out *Appeal) error
		DeleteAppeal(ctx context.Context, in *DeleteAppealRequest, out *Appeal) error
		LocateAppeal(ctx context.Context, in *LocateAppealRequest, out *LocateAppealResponse) error
	}
	type Appeals struct {
		appeals
	}
	h := &appealsHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Appeals.ListAppeals",
		Path:    []string{"/appeals"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Appeals.CreateAppeal",
		Path:    []string{"/appeals"},
		Method:  []string{"POST"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Appeals.UpdateAppeal",
		Path:    []string{"/appeals/{id}"},
		Method:  []string{"PUT"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Appeals.DeleteAppeal",
		Path:    []string{"/appeals/{id}"},
		Method:  []string{"DELETE"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Appeals.LocateAppeal",
		Path:    []string{"/appeals/{id}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&Appeals{h}, opts...))
}

type appealsHandler struct {
	AppealsHandler
}

func (h *appealsHandler) ListAppeals(ctx context.Context, in *ListAppealRequest, out *AppealList) error {
	return h.AppealsHandler.ListAppeals(ctx, in, out)
}

func (h *appealsHandler) CreateAppeal(ctx context.Context, in *CreateAppealRequest, out *Appeal) error {
	return h.AppealsHandler.CreateAppeal(ctx, in, out)
}

func (h *appealsHandler) UpdateAppeal(ctx context.Context, in *UpdateAppealRequest, out *Appeal) error {
	return h.AppealsHandler.UpdateAppeal(ctx, in, out)
}

func (h *appealsHandler) DeleteAppeal(ctx context.Context, in *DeleteAppealRequest, out *Appeal) error {
	return h.AppealsHandler.DeleteAppeal(ctx, in, out)
}

func (h *appealsHandler) LocateAppeal(ctx context.Context, in *LocateAppealRequest, out *LocateAppealResponse) error {
	return h.AppealsHandler.LocateAppeal(ctx, in, out)
}
