// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: status_condition.proto

package api

import (
	fmt "fmt"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	proto "google.golang.org/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for StatusConditions service

func NewStatusConditionsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "StatusConditions.ListStatusConditions",
			Path:    []string{"/statuses/{status_id}/statusConditions"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "StatusConditions.CreateStatusCondition",
			Path:    []string{"/statuses/{status_id}/statusConditions"},
			Method:  []string{"POST"},
			Handler: "rpc",
		},
		{
			Name:    "StatusConditions.UpdateStatusCondition",
			Path:    []string{"/statuses/{status_id}/statusConditions/{id}"},
			Method:  []string{"PUT"},
			Handler: "rpc",
		},
		{
			Name:    "StatusConditions.DeleteStatusCondition",
			Path:    []string{"/statuses/{status_id}/statusConditions/{id}"},
			Method:  []string{"DELETE"},
			Handler: "rpc",
		},
		{
			Name:    "StatusConditions.LocateStatusCondition",
			Path:    []string{"/statuses/{status_id}/statusConditions/{id}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
	}
}

// Client API for StatusConditions service

type StatusConditionsService interface {
	// RPC method to list or search statuses
	ListStatusConditions(ctx context.Context, in *ListStatusConditionRequest, opts ...client.CallOption) (*StatusConditionList, error)
	// RPC method to create a new status
	CreateStatusCondition(ctx context.Context, in *CreateStatusConditionRequest, opts ...client.CallOption) (*StatusCondition, error)
	// RPC method to update an existing status
	UpdateStatusCondition(ctx context.Context, in *UpdateStatusConditionRequest, opts ...client.CallOption) (*StatusCondition, error)
	// RPC method to delete an existing status
	DeleteStatusCondition(ctx context.Context, in *DeleteStatusConditionRequest, opts ...client.CallOption) (*StatusCondition, error)
	// RPC method to locate a specific status by ID
	LocateStatusCondition(ctx context.Context, in *LocateStatusConditionRequest, opts ...client.CallOption) (*LocateStatusConditionResponse, error)
}

type statusConditionsService struct {
	c    client.Client
	name string
}

func NewStatusConditionsService(name string, c client.Client) StatusConditionsService {
	return &statusConditionsService{
		c:    c,
		name: name,
	}
}

func (c *statusConditionsService) ListStatusConditions(ctx context.Context, in *ListStatusConditionRequest, opts ...client.CallOption) (*StatusConditionList, error) {
	req := c.c.NewRequest(c.name, "StatusConditions.ListStatusConditions", in)
	out := new(StatusConditionList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusConditionsService) CreateStatusCondition(ctx context.Context, in *CreateStatusConditionRequest, opts ...client.CallOption) (*StatusCondition, error) {
	req := c.c.NewRequest(c.name, "StatusConditions.CreateStatusCondition", in)
	out := new(StatusCondition)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusConditionsService) UpdateStatusCondition(ctx context.Context, in *UpdateStatusConditionRequest, opts ...client.CallOption) (*StatusCondition, error) {
	req := c.c.NewRequest(c.name, "StatusConditions.UpdateStatusCondition", in)
	out := new(StatusCondition)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusConditionsService) DeleteStatusCondition(ctx context.Context, in *DeleteStatusConditionRequest, opts ...client.CallOption) (*StatusCondition, error) {
	req := c.c.NewRequest(c.name, "StatusConditions.DeleteStatusCondition", in)
	out := new(StatusCondition)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusConditionsService) LocateStatusCondition(ctx context.Context, in *LocateStatusConditionRequest, opts ...client.CallOption) (*LocateStatusConditionResponse, error) {
	req := c.c.NewRequest(c.name, "StatusConditions.LocateStatusCondition", in)
	out := new(LocateStatusConditionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StatusConditions service

type StatusConditionsHandler interface {
	// RPC method to list or search statuses
	ListStatusConditions(context.Context, *ListStatusConditionRequest, *StatusConditionList) error
	// RPC method to create a new status
	CreateStatusCondition(context.Context, *CreateStatusConditionRequest, *StatusCondition) error
	// RPC method to update an existing status
	UpdateStatusCondition(context.Context, *UpdateStatusConditionRequest, *StatusCondition) error
	// RPC method to delete an existing status
	DeleteStatusCondition(context.Context, *DeleteStatusConditionRequest, *StatusCondition) error
	// RPC method to locate a specific status by ID
	LocateStatusCondition(context.Context, *LocateStatusConditionRequest, *LocateStatusConditionResponse) error
}

func RegisterStatusConditionsHandler(s server.Server, hdlr StatusConditionsHandler, opts ...server.HandlerOption) error {
	type statusConditions interface {
		ListStatusConditions(ctx context.Context, in *ListStatusConditionRequest, out *StatusConditionList) error
		CreateStatusCondition(ctx context.Context, in *CreateStatusConditionRequest, out *StatusCondition) error
		UpdateStatusCondition(ctx context.Context, in *UpdateStatusConditionRequest, out *StatusCondition) error
		DeleteStatusCondition(ctx context.Context, in *DeleteStatusConditionRequest, out *StatusCondition) error
		LocateStatusCondition(ctx context.Context, in *LocateStatusConditionRequest, out *LocateStatusConditionResponse) error
	}
	type StatusConditions struct {
		statusConditions
	}
	h := &statusConditionsHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "StatusConditions.ListStatusConditions",
		Path:    []string{"/statuses/{status_id}/statusConditions"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "StatusConditions.CreateStatusCondition",
		Path:    []string{"/statuses/{status_id}/statusConditions"},
		Method:  []string{"POST"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "StatusConditions.UpdateStatusCondition",
		Path:    []string{"/statuses/{status_id}/statusConditions/{id}"},
		Method:  []string{"PUT"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "StatusConditions.DeleteStatusCondition",
		Path:    []string{"/statuses/{status_id}/statusConditions/{id}"},
		Method:  []string{"DELETE"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "StatusConditions.LocateStatusCondition",
		Path:    []string{"/statuses/{status_id}/statusConditions/{id}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&StatusConditions{h}, opts...))
}

type statusConditionsHandler struct {
	StatusConditionsHandler
}

func (h *statusConditionsHandler) ListStatusConditions(ctx context.Context, in *ListStatusConditionRequest, out *StatusConditionList) error {
	return h.StatusConditionsHandler.ListStatusConditions(ctx, in, out)
}

func (h *statusConditionsHandler) CreateStatusCondition(ctx context.Context, in *CreateStatusConditionRequest, out *StatusCondition) error {
	return h.StatusConditionsHandler.CreateStatusCondition(ctx, in, out)
}

func (h *statusConditionsHandler) UpdateStatusCondition(ctx context.Context, in *UpdateStatusConditionRequest, out *StatusCondition) error {
	return h.StatusConditionsHandler.UpdateStatusCondition(ctx, in, out)
}

func (h *statusConditionsHandler) DeleteStatusCondition(ctx context.Context, in *DeleteStatusConditionRequest, out *StatusCondition) error {
	return h.StatusConditionsHandler.DeleteStatusCondition(ctx, in, out)
}

func (h *statusConditionsHandler) LocateStatusCondition(ctx context.Context, in *LocateStatusConditionRequest, out *LocateStatusConditionResponse) error {
	return h.StatusConditionsHandler.LocateStatusCondition(ctx, in, out)
}
