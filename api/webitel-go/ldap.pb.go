// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: ldap.proto

package api

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// LDAPCatalog profile
type LDAPCatalog struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// identity
	// int64 dc = 1;
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Meaningfull title name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// ----- Connection Options -----
	Url string                 `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"` // URL e.g.: [(ldap|ldapi|ldaps)://]host[:port]
	Tls *LDAPCatalog_TLSConfig `protobuf:"bytes,6,opt,name=tls,proto3" json:"tls,omitempty"`
	// ----- BIND: Authorization -----
	Bind     string `protobuf:"bytes,7,opt,name=bind,proto3" json:"bind,omitempty"`                   // authorization method e.g.: SIMPLE, SAML, NTLM, etc.
	BaseDn   string `protobuf:"bytes,8,opt,name=base_dn,json=baseDn,proto3" json:"base_dn,omitempty"` // base_dn, aka domain e.g.: 'dc=example,dc=org'
	Username string `protobuf:"bytes,9,opt,name=username,proto3" json:"username,omitempty"`           // bind_dn
	Password string `protobuf:"bytes,10,opt,name=password,proto3" json:"password,omitempty"`          // password
	// ----- RSYNC Processing -----
	// int32  priority = 4;
	Cron string             `protobuf:"bytes,21,opt,name=cron,proto3" json:"cron,omitempty"` // [CRON]OS SPEC ! github.com/robfig/cron/v3
	Sync *LDAProcessOptions `protobuf:"bytes,22,opt,name=sync,proto3" json:"sync,omitempty"`
	// ----- DOMAIN: Entry model -----
	EntryUuid   string `protobuf:"bytes,23,opt,name=entry_uuid,json=entryUuid,proto3" json:"entry_uuid,omitempty"`       // entry unique id (except DN which may be updated)
	EntryModify string `protobuf:"bytes,24,opt,name=entry_modify,json=entryModify,proto3" json:"entry_modify,omitempty"` // last modification timestamp attribute type
	// // // ----- MAP: user(s) settings -----
	// LDAPUsersMap users = 26; // DEPRECATED: Use Template(s) instead
	// SYNC Object's search and mappings
	Templates []*LDAPTemplate `protobuf:"bytes,25,rep,name=templates,proto3" json:"templates,omitempty"`
	// Last OR Current SYNC process details
	Process *LDAProcess `protobuf:"bytes,26,opt,name=process,proto3" json:"process,omitempty"`
	// basic: last operation details
	CreatedAt     int64   `protobuf:"varint,31,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // unix
	CreatedBy     *UserId `protobuf:"bytes,32,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`  // user
	UpdatedAt     int64   `protobuf:"varint,33,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` // unix
	UpdatedBy     *UserId `protobuf:"bytes,34,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`  // user
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LDAPCatalog) Reset() {
	*x = LDAPCatalog{}
	mi := &file_ldap_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LDAPCatalog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LDAPCatalog) ProtoMessage() {}

func (x *LDAPCatalog) ProtoReflect() protoreflect.Message {
	mi := &file_ldap_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LDAPCatalog.ProtoReflect.Descriptor instead.
func (*LDAPCatalog) Descriptor() ([]byte, []int) {
	return file_ldap_proto_rawDescGZIP(), []int{0}
}

func (x *LDAPCatalog) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LDAPCatalog) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LDAPCatalog) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *LDAPCatalog) GetTls() *LDAPCatalog_TLSConfig {
	if x != nil {
		return x.Tls
	}
	return nil
}

func (x *LDAPCatalog) GetBind() string {
	if x != nil {
		return x.Bind
	}
	return ""
}

func (x *LDAPCatalog) GetBaseDn() string {
	if x != nil {
		return x.BaseDn
	}
	return ""
}

func (x *LDAPCatalog) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LDAPCatalog) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *LDAPCatalog) GetCron() string {
	if x != nil {
		return x.Cron
	}
	return ""
}

func (x *LDAPCatalog) GetSync() *LDAProcessOptions {
	if x != nil {
		return x.Sync
	}
	return nil
}

func (x *LDAPCatalog) GetEntryUuid() string {
	if x != nil {
		return x.EntryUuid
	}
	return ""
}

func (x *LDAPCatalog) GetEntryModify() string {
	if x != nil {
		return x.EntryModify
	}
	return ""
}

func (x *LDAPCatalog) GetTemplates() []*LDAPTemplate {
	if x != nil {
		return x.Templates
	}
	return nil
}

func (x *LDAPCatalog) GetProcess() *LDAProcess {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *LDAPCatalog) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *LDAPCatalog) GetCreatedBy() *UserId {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *LDAPCatalog) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *LDAPCatalog) GetUpdatedBy() *UserId {
	if x != nil {
		return x.UpdatedBy
	}
	return nil
}

// https://datatracker.ietf.org/doc/html/rfc4511#section-4.1.11
type LDAPControl struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ControlType   string                 `protobuf:"bytes,1,opt,name=controlType,proto3" json:"controlType,omitempty"`   // LDAPOID,
	Criticality   bool                   `protobuf:"varint,2,opt,name=criticality,proto3" json:"criticality,omitempty"`  // BOOLEAN DEFAULT FALSE,
	ControlValue  string                 `protobuf:"bytes,3,opt,name=controlValue,proto3" json:"controlValue,omitempty"` // OCTET STRING OPTIONAL
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LDAPControl) Reset() {
	*x = LDAPControl{}
	mi := &file_ldap_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LDAPControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LDAPControl) ProtoMessage() {}

func (x *LDAPControl) ProtoReflect() protoreflect.Message {
	mi := &file_ldap_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LDAPControl.ProtoReflect.Descriptor instead.
func (*LDAPControl) Descriptor() ([]byte, []int) {
	return file_ldap_proto_rawDescGZIP(), []int{1}
}

func (x *LDAPControl) GetControlType() string {
	if x != nil {
		return x.ControlType
	}
	return ""
}

func (x *LDAPControl) GetCriticality() bool {
	if x != nil {
		return x.Criticality
	}
	return false
}

func (x *LDAPControl) GetControlValue() string {
	if x != nil {
		return x.ControlValue
	}
	return ""
}

// https://datatracker.ietf.org/doc/html/rfc4511#section-4.5.1
type LDAPSearchRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ----- connection -----
	// Optional. ID of the preconfigured LDAP catalog
	CatalogId int64 `protobuf:"varint,1,opt,name=catalog_id,json=catalogId,proto3" json:"catalog_id,omitempty"`
	// Optional. URL to establish connection to LDAP catalog
	Url string                       `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"` // URL e.g.: [(ldap|ldapi|ldaps)://]host[:port]
	Tls *LDAPSearchRequest_TLSConfig `protobuf:"bytes,6,opt,name=tls,proto3" json:"tls,omitempty"`
	// ----- BIND: Authorization -----
	Bind     string `protobuf:"bytes,7,opt,name=bind,proto3" json:"bind,omitempty"`         // authorization method e.g.: SIMPLE, SAML, NTLM, etc.
	Username string `protobuf:"bytes,8,opt,name=username,proto3" json:"username,omitempty"` // bind_dn
	Password string `protobuf:"bytes,9,opt,name=password,proto3" json:"password,omitempty"` // password
	// ----- SearchRequest -----
	// baseObject [D]istinguished[N]ame
	BaseObject string `protobuf:"bytes,10,opt,name=baseObject,proto3" json:"baseObject,omitempty"`
	// baseObject              (0),
	// singleLevel             (1),
	// wholeSubtree            (2)
	Scope int32 `protobuf:"varint,11,opt,name=scope,proto3" json:"scope,omitempty"`
	// neverDerefAliases       (0),
	// derefInSearching        (1),
	// derefFindingBaseObj     (2),
	// derefAlways             (3)
	DerefAliases int32    `protobuf:"varint,12,opt,name=derefAliases,proto3" json:"derefAliases,omitempty"`
	SizeLimit    int64    `protobuf:"varint,13,opt,name=sizeLimit,proto3" json:"sizeLimit,omitempty"`  // INTEGER (0 ..  maxInt),
	TimeLimit    int64    `protobuf:"varint,14,opt,name=timeLimit,proto3" json:"timeLimit,omitempty"`  // INTEGER (0 ..  maxInt),
	TypesOnly    bool     `protobuf:"varint,15,opt,name=typesOnly,proto3" json:"typesOnly,omitempty"`  // BOOLEAN,
	Filter       string   `protobuf:"bytes,16,opt,name=filter,proto3" json:"filter,omitempty"`         // Filter,
	Attributes   []string `protobuf:"bytes,17,rep,name=attributes,proto3" json:"attributes,omitempty"` // AttributeSelection
	// ----- LDAPMessage -----
	// Controls NOT implemented yet !
	Controls      []*LDAPControl `protobuf:"bytes,18,rep,name=controls,proto3" json:"controls,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LDAPSearchRequest) Reset() {
	*x = LDAPSearchRequest{}
	mi := &file_ldap_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LDAPSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LDAPSearchRequest) ProtoMessage() {}

func (x *LDAPSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ldap_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LDAPSearchRequest.ProtoReflect.Descriptor instead.
func (*LDAPSearchRequest) Descriptor() ([]byte, []int) {
	return file_ldap_proto_rawDescGZIP(), []int{2}
}

func (x *LDAPSearchRequest) GetCatalogId() int64 {
	if x != nil {
		return x.CatalogId
	}
	return 0
}

func (x *LDAPSearchRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *LDAPSearchRequest) GetTls() *LDAPSearchRequest_TLSConfig {
	if x != nil {
		return x.Tls
	}
	return nil
}

func (x *LDAPSearchRequest) GetBind() string {
	if x != nil {
		return x.Bind
	}
	return ""
}

func (x *LDAPSearchRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LDAPSearchRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *LDAPSearchRequest) GetBaseObject() string {
	if x != nil {
		return x.BaseObject
	}
	return ""
}

func (x *LDAPSearchRequest) GetScope() int32 {
	if x != nil {
		return x.Scope
	}
	return 0
}

func (x *LDAPSearchRequest) GetDerefAliases() int32 {
	if x != nil {
		return x.DerefAliases
	}
	return 0
}

func (x *LDAPSearchRequest) GetSizeLimit() int64 {
	if x != nil {
		return x.SizeLimit
	}
	return 0
}

func (x *LDAPSearchRequest) GetTimeLimit() int64 {
	if x != nil {
		return x.TimeLimit
	}
	return 0
}

func (x *LDAPSearchRequest) GetTypesOnly() bool {
	if x != nil {
		return x.TypesOnly
	}
	return false
}

func (x *LDAPSearchRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *LDAPSearchRequest) GetAttributes() []string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *LDAPSearchRequest) GetControls() []*LDAPControl {
	if x != nil {
		return x.Controls
	}
	return nil
}

// https://datatracker.ietf.org/doc/html/rfc4511#section-4.5.2
type LDAPSearchResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ----- SearchResult (Entry|Reference) -----
	Entries []*structpb.Struct `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
	// ----- LDAPResult -----
	ResultCode        int32    `protobuf:"varint,2,opt,name=resultCode,proto3" json:"resultCode,omitempty"`
	MatchedDN         string   `protobuf:"bytes,3,opt,name=matchedDN,proto3" json:"matchedDN,omitempty"`                 // LDAPDN,
	DiagnosticMessage string   `protobuf:"bytes,4,opt,name=diagnosticMessage,proto3" json:"diagnosticMessage,omitempty"` // LDAPString,
	Referral          []string `protobuf:"bytes,5,rep,name=referral,proto3" json:"referral,omitempty"`                   // [3] Referral OPTIONAL
	// ----- LDAPMessage -----
	Controls      []*LDAPControl `protobuf:"bytes,6,rep,name=controls,proto3" json:"controls,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LDAPSearchResponse) Reset() {
	*x = LDAPSearchResponse{}
	mi := &file_ldap_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LDAPSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LDAPSearchResponse) ProtoMessage() {}

func (x *LDAPSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ldap_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LDAPSearchResponse.ProtoReflect.Descriptor instead.
func (*LDAPSearchResponse) Descriptor() ([]byte, []int) {
	return file_ldap_proto_rawDescGZIP(), []int{3}
}

func (x *LDAPSearchResponse) GetEntries() []*structpb.Struct {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *LDAPSearchResponse) GetResultCode() int32 {
	if x != nil {
		return x.ResultCode
	}
	return 0
}

func (x *LDAPSearchResponse) GetMatchedDN() string {
	if x != nil {
		return x.MatchedDN
	}
	return ""
}

func (x *LDAPSearchResponse) GetDiagnosticMessage() string {
	if x != nil {
		return x.DiagnosticMessage
	}
	return ""
}

func (x *LDAPSearchResponse) GetReferral() []string {
	if x != nil {
		return x.Referral
	}
	return nil
}

func (x *LDAPSearchResponse) GetControls() []*LDAPControl {
	if x != nil {
		return x.Controls
	}
	return nil
}

// Search LDAP catalog(s) options
type SearchLDAPRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ----- Select Options -------------------------
	Page   int32    `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`    // default: 1
	Size   int32    `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`    // default: 16
	Fields []string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"` // attributes list
	Sort   []string `protobuf:"bytes,4,rep,name=sort,proto3" json:"sort,omitempty"`     // e.g.: "updated_at" - ASC; "!updated_at" - DESC;
	// ----- Search Basic Filters ---------------------------
	Id            []int64 `protobuf:"varint,5,rep,packed,name=id,proto3" json:"id,omitempty"` // selection: by unique identifier
	Q             string  `protobuf:"bytes,6,opt,name=q,proto3" json:"q,omitempty"`           // term-of-search: lookup[name]
	Name          string  `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`     // case-ignore substring match: ILIKE '*' - any; '?' - one
	Access        string  `protobuf:"bytes,8,opt,name=access,proto3" json:"access,omitempty"` // [M]andatory[A]ccess[C]ontrol: with access mode (action) granted!
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchLDAPRequest) Reset() {
	*x = SearchLDAPRequest{}
	mi := &file_ldap_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchLDAPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchLDAPRequest) ProtoMessage() {}

func (x *SearchLDAPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ldap_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchLDAPRequest.ProtoReflect.Descriptor instead.
func (*SearchLDAPRequest) Descriptor() ([]byte, []int) {
	return file_ldap_proto_rawDescGZIP(), []int{4}
}

func (x *SearchLDAPRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchLDAPRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SearchLDAPRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *SearchLDAPRequest) GetSort() []string {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *SearchLDAPRequest) GetId() []int64 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SearchLDAPRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *SearchLDAPRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SearchLDAPRequest) GetAccess() string {
	if x != nil {
		return x.Access
	}
	return ""
}

type SearchLDAPResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"` // result: {page} number
	Next          bool                   `protobuf:"varint,2,opt,name=next,proto3" json:"next,omitempty"` // result: has {next} page ?
	Items         []*LDAPCatalog         `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchLDAPResponse) Reset() {
	*x = SearchLDAPResponse{}
	mi := &file_ldap_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchLDAPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchLDAPResponse) ProtoMessage() {}

func (x *SearchLDAPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ldap_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchLDAPResponse.ProtoReflect.Descriptor instead.
func (*SearchLDAPResponse) Descriptor() ([]byte, []int) {
	return file_ldap_proto_rawDescGZIP(), []int{5}
}

func (x *SearchLDAPResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchLDAPResponse) GetNext() bool {
	if x != nil {
		return x.Next
	}
	return false
}

func (x *SearchLDAPResponse) GetItems() []*LDAPCatalog {
	if x != nil {
		return x.Items
	}
	return nil
}

type UpdateLDAPRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Fields for partial update. PATCH
	Fields []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	// LDAP Catalog changes.
	Catalog       *LDAPCatalog `protobuf:"bytes,2,opt,name=catalog,proto3" json:"catalog,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateLDAPRequest) Reset() {
	*x = UpdateLDAPRequest{}
	mi := &file_ldap_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateLDAPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLDAPRequest) ProtoMessage() {}

func (x *UpdateLDAPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ldap_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLDAPRequest.ProtoReflect.Descriptor instead.
func (*UpdateLDAPRequest) Descriptor() ([]byte, []int) {
	return file_ldap_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateLDAPRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *UpdateLDAPRequest) GetCatalog() *LDAPCatalog {
	if x != nil {
		return x.Catalog
	}
	return nil
}

type DeleteLDAPRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// catalog id
	Id             int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RelatedObjects bool  `protobuf:"varint,2,opt,name=related_objects,json=relatedObjects,proto3" json:"related_objects,omitempty"` // WITH objects bound to ?
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DeleteLDAPRequest) Reset() {
	*x = DeleteLDAPRequest{}
	mi := &file_ldap_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteLDAPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLDAPRequest) ProtoMessage() {}

func (x *DeleteLDAPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ldap_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLDAPRequest.ProtoReflect.Descriptor instead.
func (*DeleteLDAPRequest) Descriptor() ([]byte, []int) {
	return file_ldap_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteLDAPRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeleteLDAPRequest) GetRelatedObjects() bool {
	if x != nil {
		return x.RelatedObjects
	}
	return false
}

type LDAProcessExecute struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// LDAP Catalog unique IDentifier to sync with
	CatalogId int64 `protobuf:"varint,1,opt,name=catalog_id,json=catalogId,proto3" json:"catalog_id,omitempty"` // catalog_id
	// Options
	Options       *LDAProcessOptions `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LDAProcessExecute) Reset() {
	*x = LDAProcessExecute{}
	mi := &file_ldap_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LDAProcessExecute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LDAProcessExecute) ProtoMessage() {}

func (x *LDAProcessExecute) ProtoReflect() protoreflect.Message {
	mi := &file_ldap_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LDAProcessExecute.ProtoReflect.Descriptor instead.
func (*LDAProcessExecute) Descriptor() ([]byte, []int) {
	return file_ldap_proto_rawDescGZIP(), []int{8}
}

func (x *LDAProcessExecute) GetCatalogId() int64 {
	if x != nil {
		return x.CatalogId
	}
	return 0
}

func (x *LDAProcessExecute) GetOptions() *LDAProcessOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type LDAProcessOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Allows to create links
	// with fetched LDAP entries
	// for manually created objects
	LinkExistingObjects bool `protobuf:"varint,1,opt,name=link_existing_objects,json=linkExistingObjects,proto3" json:"link_existing_objects,omitempty"`
	// Allows to reassign device's owner user
	// due to preconfigured mapping LDAP template
	ReassignDeviceUsers bool `protobuf:"varint,2,opt,name=reassign_device_users,json=reassignDeviceUsers,proto3" json:"reassign_device_users,omitempty"`
	// Operation timeout. Not implemented yet
	Timeout int64 `protobuf:"varint,10,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// Will NOT perform any operations on storage.
	// To review potential processing only
	Test          bool `protobuf:"varint,11,opt,name=test,proto3" json:"test,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LDAProcessOptions) Reset() {
	*x = LDAProcessOptions{}
	mi := &file_ldap_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LDAProcessOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LDAProcessOptions) ProtoMessage() {}

func (x *LDAProcessOptions) ProtoReflect() protoreflect.Message {
	mi := &file_ldap_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LDAProcessOptions.ProtoReflect.Descriptor instead.
func (*LDAProcessOptions) Descriptor() ([]byte, []int) {
	return file_ldap_proto_rawDescGZIP(), []int{9}
}

func (x *LDAProcessOptions) GetLinkExistingObjects() bool {
	if x != nil {
		return x.LinkExistingObjects
	}
	return false
}

func (x *LDAProcessOptions) GetReassignDeviceUsers() bool {
	if x != nil {
		return x.ReassignDeviceUsers
	}
	return false
}

func (x *LDAProcessOptions) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *LDAProcessOptions) GetTest() bool {
	if x != nil {
		return x.Test
	}
	return false
}

// LDAPTemplate is an LDAP search entries to webitel objects transformation template
type LDAPTemplate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID unique
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name this template
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. LDAP Search base entry DN
	BaseDn string `protobuf:"bytes,3,opt,name=base_dn,json=baseDn,proto3" json:"base_dn,omitempty"`
	// Required. LDAP Search filter string
	Search string `protobuf:"bytes,4,opt,name=search,proto3" json:"search,omitempty"`
	// LDAPCatalog belongs to
	Catalog *ObjectId `protobuf:"bytes,5,opt,name=catalog,proto3" json:"catalog,omitempty"`
	// Optional. This Template is activated ?
	Enabled bool `protobuf:"varint,6,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// OPTIONAL. Role objclass fields mapping (Not implemented yet)
	Role *structpb.Struct `protobuf:"bytes,7,opt,name=role,proto3" json:"role,omitempty"`
	// OPTIONAL. Device objclass fields mapping
	Device *structpb.Struct `protobuf:"bytes,8,opt,name=device,proto3" json:"device,omitempty"`
	// OPTIONAL. User objclass fields mapping
	User *structpb.Struct `protobuf:"bytes,9,opt,name=user,proto3" json:"user,omitempty"`
	// OPTIONAL. Agent objclass fields mapping
	Agent *structpb.Struct `protobuf:"bytes,10,opt,name=agent,proto3" json:"agent,omitempty"`
	// READONLY. Operational attributes
	CreatedAt     int64   `protobuf:"varint,31,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // unix
	CreatedBy     *UserId `protobuf:"bytes,32,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`  // user
	UpdatedAt     int64   `protobuf:"varint,33,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` // unix
	UpdatedBy     *UserId `protobuf:"bytes,34,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`  // user
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LDAPTemplate) Reset() {
	*x = LDAPTemplate{}
	mi := &file_ldap_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LDAPTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LDAPTemplate) ProtoMessage() {}

func (x *LDAPTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_ldap_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LDAPTemplate.ProtoReflect.Descriptor instead.
func (*LDAPTemplate) Descriptor() ([]byte, []int) {
	return file_ldap_proto_rawDescGZIP(), []int{10}
}

func (x *LDAPTemplate) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LDAPTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LDAPTemplate) GetBaseDn() string {
	if x != nil {
		return x.BaseDn
	}
	return ""
}

func (x *LDAPTemplate) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *LDAPTemplate) GetCatalog() *ObjectId {
	if x != nil {
		return x.Catalog
	}
	return nil
}

func (x *LDAPTemplate) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *LDAPTemplate) GetRole() *structpb.Struct {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *LDAPTemplate) GetDevice() *structpb.Struct {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *LDAPTemplate) GetUser() *structpb.Struct {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *LDAPTemplate) GetAgent() *structpb.Struct {
	if x != nil {
		return x.Agent
	}
	return nil
}

func (x *LDAPTemplate) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *LDAPTemplate) GetCreatedBy() *UserId {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *LDAPTemplate) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *LDAPTemplate) GetUpdatedBy() *UserId {
	if x != nil {
		return x.UpdatedBy
	}
	return nil
}

type LDAPTemplateRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ----- Select Options -------------------------
	Page   int32    `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`    // default: 1
	Size   int32    `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`    // default: 16
	Fields []string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"` // attributes list
	Sort   []string `protobuf:"bytes,4,rep,name=sort,proto3" json:"sort,omitempty"`     // e.g.: "updated_at" - ASC; "!updated_at" - DESC;
	// ----- Search Basic Filters ---------------------------
	// OPTIONAL. Search templates by .id
	Id []int64 `protobuf:"varint,5,rep,packed,name=id,proto3" json:"id,omitempty"`
	// REQUIRED. Parent LDAP catalog IDentifier
	CatalogId int64 `protobuf:"varint,6,opt,name=catalog_id,json=catalogId,proto3" json:"catalog_id,omitempty"`
	// OPTIONAL. Filter(s) SET
	Q             string `protobuf:"bytes,7,opt,name=q,proto3" json:"q,omitempty"`
	Name          string `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	BaseDn        string `protobuf:"bytes,9,opt,name=base_dn,json=baseDn,proto3" json:"base_dn,omitempty"`
	Objclass      string `protobuf:"bytes,10,opt,name=objclass,proto3" json:"objclass,omitempty"`
	Enabled       bool   `protobuf:"varint,11,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Disabled      bool   `protobuf:"varint,12,opt,name=disabled,proto3" json:"disabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LDAPTemplateRequest) Reset() {
	*x = LDAPTemplateRequest{}
	mi := &file_ldap_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LDAPTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LDAPTemplateRequest) ProtoMessage() {}

func (x *LDAPTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ldap_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LDAPTemplateRequest.ProtoReflect.Descriptor instead.
func (*LDAPTemplateRequest) Descriptor() ([]byte, []int) {
	return file_ldap_proto_rawDescGZIP(), []int{11}
}

func (x *LDAPTemplateRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *LDAPTemplateRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *LDAPTemplateRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *LDAPTemplateRequest) GetSort() []string {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *LDAPTemplateRequest) GetId() []int64 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *LDAPTemplateRequest) GetCatalogId() int64 {
	if x != nil {
		return x.CatalogId
	}
	return 0
}

func (x *LDAPTemplateRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *LDAPTemplateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LDAPTemplateRequest) GetBaseDn() string {
	if x != nil {
		return x.BaseDn
	}
	return ""
}

func (x *LDAPTemplateRequest) GetObjclass() string {
	if x != nil {
		return x.Objclass
	}
	return ""
}

func (x *LDAPTemplateRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *LDAPTemplateRequest) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

type LDAPTemplateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"` // result: {page} number
	Next          bool                   `protobuf:"varint,2,opt,name=next,proto3" json:"next,omitempty"` // result: has {next} page ?
	Items         []*LDAPTemplate        `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LDAPTemplateResponse) Reset() {
	*x = LDAPTemplateResponse{}
	mi := &file_ldap_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LDAPTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LDAPTemplateResponse) ProtoMessage() {}

func (x *LDAPTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ldap_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LDAPTemplateResponse.ProtoReflect.Descriptor instead.
func (*LDAPTemplateResponse) Descriptor() ([]byte, []int) {
	return file_ldap_proto_rawDescGZIP(), []int{12}
}

func (x *LDAPTemplateResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *LDAPTemplateResponse) GetNext() bool {
	if x != nil {
		return x.Next
	}
	return false
}

func (x *LDAPTemplateResponse) GetItems() []*LDAPTemplate {
	if x != nil {
		return x.Items
	}
	return nil
}

type UpdateLDAPTemplateRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// OPTIONAL. Fields for partial update. PATCH
	Fields []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	// Template changes.
	Template      *LDAPTemplate `protobuf:"bytes,2,opt,name=template,proto3" json:"template,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateLDAPTemplateRequest) Reset() {
	*x = UpdateLDAPTemplateRequest{}
	mi := &file_ldap_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateLDAPTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLDAPTemplateRequest) ProtoMessage() {}

func (x *UpdateLDAPTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ldap_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLDAPTemplateRequest.ProtoReflect.Descriptor instead.
func (*UpdateLDAPTemplateRequest) Descriptor() ([]byte, []int) {
	return file_ldap_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateLDAPTemplateRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *UpdateLDAPTemplateRequest) GetTemplate() *LDAPTemplate {
	if x != nil {
		return x.Template
	}
	return nil
}

// LDAP synchronization process details
type LDAProcess struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Readonly. Process unique identifier
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Readonly. Executed with options
	Options *LDAProcessOptions `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
	// Readonly. Process start timestamp
	ExecuteAt int64 `protobuf:"varint,3,opt,name=execute_at,json=executeAt,proto3" json:"execute_at,omitempty"`
	// Optional. Start manually by the user or role
	ExecuteBy *RoleId `protobuf:"bytes,4,opt,name=execute_by,json=executeBy,proto3" json:"execute_by,omitempty"`
	// Optional. If not <zero> indicates that this process is completed.
	CompleteAt int64 `protobuf:"varint,5,opt,name=complete_at,json=completeAt,proto3" json:"complete_at,omitempty"`
	// Optional. Status description or an error if any occured
	Status string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	// Optional. List of entries been already processed
	Progress      []*LDAPObjentry `protobuf:"bytes,7,rep,name=progress,proto3" json:"progress,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LDAProcess) Reset() {
	*x = LDAProcess{}
	mi := &file_ldap_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LDAProcess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LDAProcess) ProtoMessage() {}

func (x *LDAProcess) ProtoReflect() protoreflect.Message {
	mi := &file_ldap_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LDAProcess.ProtoReflect.Descriptor instead.
func (*LDAProcess) Descriptor() ([]byte, []int) {
	return file_ldap_proto_rawDescGZIP(), []int{14}
}

func (x *LDAProcess) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LDAProcess) GetOptions() *LDAProcessOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *LDAProcess) GetExecuteAt() int64 {
	if x != nil {
		return x.ExecuteAt
	}
	return 0
}

func (x *LDAProcess) GetExecuteBy() *RoleId {
	if x != nil {
		return x.ExecuteBy
	}
	return nil
}

func (x *LDAProcess) GetCompleteAt() int64 {
	if x != nil {
		return x.CompleteAt
	}
	return 0
}

func (x *LDAProcess) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *LDAProcess) GetProgress() []*LDAPObjentry {
	if x != nil {
		return x.Progress
	}
	return nil
}

// LDAP entry object associatetions performed
type LDAPObjentry struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// LDAP Entry Attributes fetched
	Entry *structpb.Struct `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"` // map<string, string> entry = 1;
	// Internal object class been associated with this LDAP .entry
	Class string `protobuf:"bytes,2,opt,name=class,proto3" json:"class,omitempty"`
	// Internal object state; DUMP
	Object *structpb.Struct `protobuf:"bytes,3,opt,name=object,proto3" json:"object,omitempty"`
	// Operation been performed: create|update|delete
	Proc string `protobuf:"bytes,4,opt,name=proc,proto3" json:"proc,omitempty"`
	// An error(s) if any occured
	// NON-FATAL Warnings
	Warn []string `protobuf:"bytes,6,rep,name=warn,proto3" json:"warn,omitempty"`
	// FATAL Error(s). NON empty indicates that this process failed
	Errs          []string `protobuf:"bytes,5,rep,name=errs,proto3" json:"errs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LDAPObjentry) Reset() {
	*x = LDAPObjentry{}
	mi := &file_ldap_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LDAPObjentry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LDAPObjentry) ProtoMessage() {}

func (x *LDAPObjentry) ProtoReflect() protoreflect.Message {
	mi := &file_ldap_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LDAPObjentry.ProtoReflect.Descriptor instead.
func (*LDAPObjentry) Descriptor() ([]byte, []int) {
	return file_ldap_proto_rawDescGZIP(), []int{15}
}

func (x *LDAPObjentry) GetEntry() *structpb.Struct {
	if x != nil {
		return x.Entry
	}
	return nil
}

func (x *LDAPObjentry) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *LDAPObjentry) GetObject() *structpb.Struct {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *LDAPObjentry) GetProc() string {
	if x != nil {
		return x.Proc
	}
	return ""
}

func (x *LDAPObjentry) GetWarn() []string {
	if x != nil {
		return x.Warn
	}
	return nil
}

func (x *LDAPObjentry) GetErrs() []string {
	if x != nil {
		return x.Errs
	}
	return nil
}

type LDAProcessRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ----- Select Options -------------------------
	Page   int32    `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`    // default: 1
	Size   int32    `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`    // default: 16
	Fields []string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"` // attributes list
	Sort   []string `protobuf:"bytes,4,rep,name=sort,proto3" json:"sort,omitempty"`     // e.g.: "updated_at" - ASC; "!updated_at" - DESC;
	// ----- Search Basic Filters ---------------------------
	// OPTIONAL. Search process by unique .id
	Id []int64 `protobuf:"varint,5,rep,packed,name=id,proto3" json:"id,omitempty"`
	// REQUIRED. Parent LDAP catalog IDentifier
	CatalogId int64 `protobuf:"varint,6,opt,name=catalog_id,json=catalogId,proto3" json:"catalog_id,omitempty"`
	// OPTIONAL. Filter(s) SET
	Q             string   `protobuf:"bytes,7,opt,name=q,proto3" json:"q,omitempty"`
	Template      string   `protobuf:"bytes,8,opt,name=template,proto3" json:"template,omitempty"`
	Objclass      []string `protobuf:"bytes,9,rep,name=objclass,proto3" json:"objclass,omitempty"`
	Failed        bool     `protobuf:"varint,10,opt,name=failed,proto3" json:"failed,omitempty"`     // WITH .errs
	Enabled       bool     `protobuf:"varint,11,opt,name=enabled,proto3" json:"enabled,omitempty"`   // created|updated
	Disabled      bool     `protobuf:"varint,12,opt,name=disabled,proto3" json:"disabled,omitempty"` // deleted
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LDAProcessRequest) Reset() {
	*x = LDAProcessRequest{}
	mi := &file_ldap_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LDAProcessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LDAProcessRequest) ProtoMessage() {}

func (x *LDAProcessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ldap_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LDAProcessRequest.ProtoReflect.Descriptor instead.
func (*LDAProcessRequest) Descriptor() ([]byte, []int) {
	return file_ldap_proto_rawDescGZIP(), []int{16}
}

func (x *LDAProcessRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *LDAProcessRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *LDAProcessRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *LDAProcessRequest) GetSort() []string {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *LDAProcessRequest) GetId() []int64 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *LDAProcessRequest) GetCatalogId() int64 {
	if x != nil {
		return x.CatalogId
	}
	return 0
}

func (x *LDAProcessRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *LDAProcessRequest) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

func (x *LDAProcessRequest) GetObjclass() []string {
	if x != nil {
		return x.Objclass
	}
	return nil
}

func (x *LDAProcessRequest) GetFailed() bool {
	if x != nil {
		return x.Failed
	}
	return false
}

func (x *LDAProcessRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *LDAProcessRequest) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

type LDAProcessResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"` // result: {page} number
	Next          bool                   `protobuf:"varint,2,opt,name=next,proto3" json:"next,omitempty"` // result: has {next} page ?
	Items         []*LDAProcess          `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LDAProcessResponse) Reset() {
	*x = LDAProcessResponse{}
	mi := &file_ldap_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LDAProcessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LDAProcessResponse) ProtoMessage() {}

func (x *LDAProcessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ldap_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LDAProcessResponse.ProtoReflect.Descriptor instead.
func (*LDAProcessResponse) Descriptor() ([]byte, []int) {
	return file_ldap_proto_rawDescGZIP(), []int{17}
}

func (x *LDAProcessResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *LDAProcessResponse) GetNext() bool {
	if x != nil {
		return x.Next
	}
	return false
}

func (x *LDAProcessResponse) GetItems() []*LDAProcess {
	if x != nil {
		return x.Items
	}
	return nil
}

// TLS configuration options
type LDAPCatalog_TLSConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// TODO: (!)
	Cert          []byte `protobuf:"bytes,1,opt,name=cert,proto3" json:"cert,omitempty"` // PEM: base64
	Key           []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`   // PEM: base64
	Ca            []byte `protobuf:"bytes,3,opt,name=ca,proto3" json:"ca,omitempty"`     // PEM: base64
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LDAPCatalog_TLSConfig) Reset() {
	*x = LDAPCatalog_TLSConfig{}
	mi := &file_ldap_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LDAPCatalog_TLSConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LDAPCatalog_TLSConfig) ProtoMessage() {}

func (x *LDAPCatalog_TLSConfig) ProtoReflect() protoreflect.Message {
	mi := &file_ldap_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LDAPCatalog_TLSConfig.ProtoReflect.Descriptor instead.
func (*LDAPCatalog_TLSConfig) Descriptor() ([]byte, []int) {
	return file_ldap_proto_rawDescGZIP(), []int{0, 0}
}

func (x *LDAPCatalog_TLSConfig) GetCert() []byte {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *LDAPCatalog_TLSConfig) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *LDAPCatalog_TLSConfig) GetCa() []byte {
	if x != nil {
		return x.Ca
	}
	return nil
}

// TLS configuration options
type LDAPSearchRequest_TLSConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// TODO: (!)
	PEM           []byte `protobuf:"bytes,1,opt,name=PEM,proto3" json:"PEM,omitempty"` // base64
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LDAPSearchRequest_TLSConfig) Reset() {
	*x = LDAPSearchRequest_TLSConfig{}
	mi := &file_ldap_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LDAPSearchRequest_TLSConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LDAPSearchRequest_TLSConfig) ProtoMessage() {}

func (x *LDAPSearchRequest_TLSConfig) ProtoReflect() protoreflect.Message {
	mi := &file_ldap_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LDAPSearchRequest_TLSConfig.ProtoReflect.Descriptor instead.
func (*LDAPSearchRequest_TLSConfig) Descriptor() ([]byte, []int) {
	return file_ldap_proto_rawDescGZIP(), []int{2, 0}
}

func (x *LDAPSearchRequest_TLSConfig) GetPEM() []byte {
	if x != nil {
		return x.PEM
	}
	return nil
}

var File_ldap_proto protoreflect.FileDescriptor

var file_ldap_proto_rawDesc = string([]byte{
	0x0a, 0x0a, 0x6c, 0x64, 0x61, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x61, 0x70,
	0x69, 0x1a, 0x09, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x72, 0x6f,
	0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x8d, 0x05, 0x0a, 0x0b, 0x4c, 0x44, 0x41, 0x50, 0x43, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x2c, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x44, 0x41, 0x50,
	0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x69, 0x6e, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x69, 0x6e, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x64, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x61, 0x73,
	0x65, 0x44, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x72, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x12,
	0x2a, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4c, 0x44, 0x41, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x12, 0x2f, 0x0a,
	0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x44, 0x41, 0x50, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x29,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x44, 0x41, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2a, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x2a, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x1a,
	0x41, 0x0a, 0x09, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02,
	0x63, 0x61, 0x22, 0x75, 0x0a, 0x0b, 0x4c, 0x44, 0x41, 0x50, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xfd, 0x03, 0x0a, 0x11, 0x4c, 0x44,
	0x41, 0x50, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x32, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4c, 0x44, 0x41, 0x50, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x03, 0x74, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x69, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x62, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x72, 0x65, 0x66, 0x41,
	0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x65,
	0x72, 0x65, 0x66, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69,
	0x7a, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x69, 0x7a, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x73, 0x4f,
	0x6e, 0x6c, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x08,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x44, 0x41, 0x50, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x1a, 0x1d, 0x0a, 0x09, 0x54, 0x4c,
	0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x45, 0x4d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x50, 0x45, 0x4d, 0x22, 0xfd, 0x01, 0x0a, 0x12, 0x4c, 0x44,
	0x41, 0x50, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x31, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x44, 0x4e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x44,
	0x4e, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4c, 0x44, 0x41, 0x50, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x11, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x4c, 0x44, 0x41, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01,
	0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x64, 0x0a,
	0x12, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x44, 0x41, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x26, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4c, 0x44, 0x41, 0x50, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0x57, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x44, 0x41,
	0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x2a, 0x0a, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x44, 0x41, 0x50, 0x43, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x52, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x22, 0x4c, 0x0a, 0x11,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x44, 0x41, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0x64, 0x0a, 0x11, 0x4c, 0x44,
	0x41, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x30,
	0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x44, 0x41, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0xa9, 0x01, 0x0a, 0x11, 0x4c, 0x44, 0x41, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x6c, 0x69, 0x6e, 0x6b, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x72, 0x65, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x73, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x74, 0x65, 0x73, 0x74, 0x22, 0xf6, 0x03, 0x0a,
	0x0c, 0x4c, 0x44, 0x41, 0x50, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x62, 0x61, 0x73, 0x65, 0x44, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x12, 0x27, 0x0a, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x52, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x2d, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2a,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2a, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0xa5, 0x02, 0x0a, 0x13, 0x4c, 0x44, 0x41, 0x50, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x64,
	0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x61, 0x73, 0x65, 0x44, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6f,
	0x62, 0x6a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f,
	0x62, 0x6a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x67, 0x0a,
	0x14, 0x4c, 0x44, 0x41, 0x50, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x27, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4c, 0x44, 0x41, 0x50, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x62, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4c, 0x44, 0x41, 0x50, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4c, 0x44, 0x41, 0x50, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x81, 0x02, 0x0a, 0x0a, 0x4c,
	0x44, 0x41, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4c, 0x44, 0x41, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x74, 0x12, 0x2a, 0x0a, 0x0a, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x09, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2d, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x44, 0x41, 0x50, 0x4f, 0x62, 0x6a, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0xc0,
	0x01, 0x0a, 0x0c, 0x4c, 0x44, 0x41, 0x50, 0x4f, 0x62, 0x6a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x2d, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x72, 0x6f, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x61, 0x72,
	0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x77, 0x61, 0x72, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x65, 0x72, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x65, 0x72, 0x72,
	0x73, 0x22, 0xaa, 0x02, 0x0a, 0x11, 0x4c, 0x44, 0x41, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x62, 0x6a, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x63,
	0x0a, 0x12, 0x4c, 0x44, 0x41, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x25, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4c, 0x44, 0x41, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x32, 0xc8, 0x0c, 0x0a, 0x04, 0x4c, 0x44, 0x41, 0x50, 0x12, 0x49, 0x0a, 0x11,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x44, 0x41, 0x50, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x12, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x44, 0x41, 0x50, 0x43, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x1a, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x44, 0x41, 0x50, 0x43, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x22, 0x10, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x3a, 0x01, 0x2a,
	0x22, 0x05, 0x2f, 0x6c, 0x64, 0x61, 0x70, 0x12, 0x75, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4c, 0x44, 0x41, 0x50, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x16, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x44, 0x41, 0x50, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x44, 0x41, 0x50, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01,
	0x2a, 0x5a, 0x17, 0x3a, 0x01, 0x2a, 0x32, 0x12, 0x2f, 0x6c, 0x64, 0x61, 0x70, 0x2f, 0x7b, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x69, 0x64, 0x7d, 0x1a, 0x12, 0x2f, 0x6c, 0x64, 0x61,
	0x70, 0x2f, 0x7b, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x69, 0x64, 0x7d, 0x12, 0x5d,
	0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x44, 0x41, 0x50, 0x43, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x12, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4c, 0x44, 0x41, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4c, 0x44, 0x41, 0x50, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x22, 0x1e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x18, 0x5a, 0x0a, 0x3a, 0x01, 0x2a, 0x2a, 0x05, 0x2f, 0x6c, 0x64, 0x61,
	0x70, 0x2a, 0x0a, 0x2f, 0x6c, 0x64, 0x61, 0x70, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x53, 0x0a,
	0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x44, 0x41, 0x50, 0x43, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x12, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c,
	0x44, 0x41, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x44, 0x41, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x0d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x07, 0x12, 0x05, 0x2f, 0x6c, 0x64,
	0x61, 0x70, 0x12, 0x51, 0x0a, 0x11, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x4c, 0x44, 0x41, 0x50,
	0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x4c, 0x44, 0x41, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x44, 0x41, 0x50, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x22, 0x12, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a, 0x2f, 0x6c, 0x64, 0x61, 0x70,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xa3, 0x01, 0x0a, 0x0a, 0x4c, 0x44, 0x41, 0x50, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x12, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x44, 0x41, 0x50, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4c, 0x44, 0x41, 0x50, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5e, 0x3a, 0x01, 0x2a,
	0x5a, 0x1b, 0x12, 0x19, 0x2f, 0x6c, 0x64, 0x61, 0x70, 0x2f, 0x7b, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5a, 0x11, 0x3a,
	0x01, 0x2a, 0x22, 0x0c, 0x2f, 0x6c, 0x64, 0x61, 0x70, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5a, 0x0e, 0x12, 0x0c, 0x2f, 0x6c, 0x64, 0x61, 0x70, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x22, 0x19, 0x2f, 0x6c, 0x64, 0x61, 0x70, 0x2f, 0x7b, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x6f, 0x0a, 0x12, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x44, 0x41, 0x50, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x12, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x44, 0x41, 0x50, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4c, 0x44, 0x41, 0x50, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c,
	0x2f, 0x6c, 0x64, 0x61, 0x70, 0x2f, 0x7b, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x6c, 0x0a, 0x12,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x4c, 0x44, 0x41, 0x50, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x12, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x44, 0x41, 0x50, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4c, 0x44, 0x41, 0x50, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22,
	0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x6c, 0x64, 0x61, 0x70, 0x2f, 0x7b,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x63, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4c, 0x44, 0x41, 0x50, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x12, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x44, 0x41, 0x50, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x1a, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x44, 0x41, 0x50, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01,
	0x2a, 0x22, 0x1c, 0x2f, 0x6c, 0x64, 0x61, 0x70, 0x2f, 0x7b, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x2e, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12,
	0xc1, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x44, 0x41, 0x50, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4c, 0x44, 0x41, 0x50, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x44, 0x41,
	0x50, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x78, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x72, 0x3a, 0x01, 0x2a, 0x5a, 0x38, 0x3a, 0x01, 0x2a, 0x1a, 0x33, 0x2f, 0x6c, 0x64, 0x61, 0x70,
	0x2f, 0x7b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x2e, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x2f, 0x7b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x7d, 0x32, 0x33,
	0x2f, 0x6c, 0x64, 0x61, 0x70, 0x2f, 0x7b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e,
	0x69, 0x64, 0x7d, 0x12, 0x9a, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x44,
	0x41, 0x50, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4c, 0x44, 0x41, 0x50, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x44, 0x41, 0x50, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x4f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x49, 0x3a, 0x01, 0x2a, 0x5a, 0x21, 0x3a, 0x01, 0x2a, 0x2a,
	0x1c, 0x2f, 0x6c, 0x64, 0x61, 0x70, 0x2f, 0x7b, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2a, 0x21, 0x2f,
	0x6c, 0x64, 0x61, 0x70, 0x2f, 0x7b, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x12, 0x61, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x4c, 0x44, 0x41, 0x50, 0x43, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x44, 0x41, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x1a, 0x0f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4c, 0x44, 0x41, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x22, 0x23,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f, 0x6c, 0x64, 0x61, 0x70,
	0x2f, 0x7b, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x73,
	0x79, 0x6e, 0x63, 0x12, 0x65, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x44, 0x41,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x44,
	0x41, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x44, 0x41, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a,
	0x12, 0x18, 0x2f, 0x6c, 0x64, 0x61, 0x70, 0x2f, 0x7b, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x62, 0x0a, 0x10, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x65, 0x4c, 0x44, 0x41, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x44, 0x41, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x44, 0x41,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12,
	0x1d, 0x2f, 0x6c, 0x64, 0x61, 0x70, 0x2f, 0x7b, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x72, 0x73, 0x79, 0x6e, 0x63, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x42, 0x54,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x42, 0x09, 0x4c, 0x64, 0x61, 0x70, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x12, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e,
	0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x3b, 0x61, 0x70, 0x69, 0xa2, 0x02, 0x03, 0x41, 0x58, 0x58,
	0xaa, 0x02, 0x03, 0x41, 0x70, 0x69, 0xca, 0x02, 0x03, 0x41, 0x70, 0x69, 0xe2, 0x02, 0x0f, 0x41,
	0x70, 0x69, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x03, 0x41, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_ldap_proto_rawDescOnce sync.Once
	file_ldap_proto_rawDescData []byte
)

func file_ldap_proto_rawDescGZIP() []byte {
	file_ldap_proto_rawDescOnce.Do(func() {
		file_ldap_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ldap_proto_rawDesc), len(file_ldap_proto_rawDesc)))
	})
	return file_ldap_proto_rawDescData
}

var file_ldap_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_ldap_proto_goTypes = []any{
	(*LDAPCatalog)(nil),                 // 0: api.LDAPCatalog
	(*LDAPControl)(nil),                 // 1: api.LDAPControl
	(*LDAPSearchRequest)(nil),           // 2: api.LDAPSearchRequest
	(*LDAPSearchResponse)(nil),          // 3: api.LDAPSearchResponse
	(*SearchLDAPRequest)(nil),           // 4: api.SearchLDAPRequest
	(*SearchLDAPResponse)(nil),          // 5: api.SearchLDAPResponse
	(*UpdateLDAPRequest)(nil),           // 6: api.UpdateLDAPRequest
	(*DeleteLDAPRequest)(nil),           // 7: api.DeleteLDAPRequest
	(*LDAProcessExecute)(nil),           // 8: api.LDAProcessExecute
	(*LDAProcessOptions)(nil),           // 9: api.LDAProcessOptions
	(*LDAPTemplate)(nil),                // 10: api.LDAPTemplate
	(*LDAPTemplateRequest)(nil),         // 11: api.LDAPTemplateRequest
	(*LDAPTemplateResponse)(nil),        // 12: api.LDAPTemplateResponse
	(*UpdateLDAPTemplateRequest)(nil),   // 13: api.UpdateLDAPTemplateRequest
	(*LDAProcess)(nil),                  // 14: api.LDAProcess
	(*LDAPObjentry)(nil),                // 15: api.LDAPObjentry
	(*LDAProcessRequest)(nil),           // 16: api.LDAProcessRequest
	(*LDAProcessResponse)(nil),          // 17: api.LDAProcessResponse
	(*LDAPCatalog_TLSConfig)(nil),       // 18: api.LDAPCatalog.TLSConfig
	(*LDAPSearchRequest_TLSConfig)(nil), // 19: api.LDAPSearchRequest.TLSConfig
	(*UserId)(nil),                      // 20: api.UserId
	(*structpb.Struct)(nil),             // 21: google.protobuf.Struct
	(*ObjectId)(nil),                    // 22: api.ObjectId
	(*RoleId)(nil),                      // 23: api.RoleId
}
var file_ldap_proto_depIdxs = []int32{
	18, // 0: api.LDAPCatalog.tls:type_name -> api.LDAPCatalog.TLSConfig
	9,  // 1: api.LDAPCatalog.sync:type_name -> api.LDAProcessOptions
	10, // 2: api.LDAPCatalog.templates:type_name -> api.LDAPTemplate
	14, // 3: api.LDAPCatalog.process:type_name -> api.LDAProcess
	20, // 4: api.LDAPCatalog.created_by:type_name -> api.UserId
	20, // 5: api.LDAPCatalog.updated_by:type_name -> api.UserId
	19, // 6: api.LDAPSearchRequest.tls:type_name -> api.LDAPSearchRequest.TLSConfig
	1,  // 7: api.LDAPSearchRequest.controls:type_name -> api.LDAPControl
	21, // 8: api.LDAPSearchResponse.entries:type_name -> google.protobuf.Struct
	1,  // 9: api.LDAPSearchResponse.controls:type_name -> api.LDAPControl
	0,  // 10: api.SearchLDAPResponse.items:type_name -> api.LDAPCatalog
	0,  // 11: api.UpdateLDAPRequest.catalog:type_name -> api.LDAPCatalog
	9,  // 12: api.LDAProcessExecute.options:type_name -> api.LDAProcessOptions
	22, // 13: api.LDAPTemplate.catalog:type_name -> api.ObjectId
	21, // 14: api.LDAPTemplate.role:type_name -> google.protobuf.Struct
	21, // 15: api.LDAPTemplate.device:type_name -> google.protobuf.Struct
	21, // 16: api.LDAPTemplate.user:type_name -> google.protobuf.Struct
	21, // 17: api.LDAPTemplate.agent:type_name -> google.protobuf.Struct
	20, // 18: api.LDAPTemplate.created_by:type_name -> api.UserId
	20, // 19: api.LDAPTemplate.updated_by:type_name -> api.UserId
	10, // 20: api.LDAPTemplateResponse.items:type_name -> api.LDAPTemplate
	10, // 21: api.UpdateLDAPTemplateRequest.template:type_name -> api.LDAPTemplate
	9,  // 22: api.LDAProcess.options:type_name -> api.LDAProcessOptions
	23, // 23: api.LDAProcess.execute_by:type_name -> api.RoleId
	15, // 24: api.LDAProcess.progress:type_name -> api.LDAPObjentry
	21, // 25: api.LDAPObjentry.entry:type_name -> google.protobuf.Struct
	21, // 26: api.LDAPObjentry.object:type_name -> google.protobuf.Struct
	14, // 27: api.LDAProcessResponse.items:type_name -> api.LDAProcess
	0,  // 28: api.LDAP.CreateLDAPCatalog:input_type -> api.LDAPCatalog
	6,  // 29: api.LDAP.UpdateLDAPCatalog:input_type -> api.UpdateLDAPRequest
	7,  // 30: api.LDAP.DeleteLDAPCatalog:input_type -> api.DeleteLDAPRequest
	4,  // 31: api.LDAP.SearchLDAPCatalog:input_type -> api.SearchLDAPRequest
	4,  // 32: api.LDAP.LocateLDAPCatalog:input_type -> api.SearchLDAPRequest
	2,  // 33: api.LDAP.LDAPSearch:input_type -> api.LDAPSearchRequest
	11, // 34: api.LDAP.SearchLDAPTemplate:input_type -> api.LDAPTemplateRequest
	11, // 35: api.LDAP.LocateLDAPTemplate:input_type -> api.LDAPTemplateRequest
	10, // 36: api.LDAP.CreateLDAPTemplate:input_type -> api.LDAPTemplate
	13, // 37: api.LDAP.UpdateLDAPTemplate:input_type -> api.UpdateLDAPTemplateRequest
	11, // 38: api.LDAP.DeleteLDAPTemplate:input_type -> api.LDAPTemplateRequest
	8,  // 39: api.LDAP.ResyncLDAPCatalog:input_type -> api.LDAProcessExecute
	16, // 40: api.LDAP.SearchLDAProcess:input_type -> api.LDAProcessRequest
	16, // 41: api.LDAP.LocateLDAProcess:input_type -> api.LDAProcessRequest
	0,  // 42: api.LDAP.CreateLDAPCatalog:output_type -> api.LDAPCatalog
	0,  // 43: api.LDAP.UpdateLDAPCatalog:output_type -> api.LDAPCatalog
	0,  // 44: api.LDAP.DeleteLDAPCatalog:output_type -> api.LDAPCatalog
	5,  // 45: api.LDAP.SearchLDAPCatalog:output_type -> api.SearchLDAPResponse
	0,  // 46: api.LDAP.LocateLDAPCatalog:output_type -> api.LDAPCatalog
	3,  // 47: api.LDAP.LDAPSearch:output_type -> api.LDAPSearchResponse
	12, // 48: api.LDAP.SearchLDAPTemplate:output_type -> api.LDAPTemplateResponse
	10, // 49: api.LDAP.LocateLDAPTemplate:output_type -> api.LDAPTemplate
	10, // 50: api.LDAP.CreateLDAPTemplate:output_type -> api.LDAPTemplate
	10, // 51: api.LDAP.UpdateLDAPTemplate:output_type -> api.LDAPTemplate
	12, // 52: api.LDAP.DeleteLDAPTemplate:output_type -> api.LDAPTemplateResponse
	14, // 53: api.LDAP.ResyncLDAPCatalog:output_type -> api.LDAProcess
	17, // 54: api.LDAP.SearchLDAProcess:output_type -> api.LDAProcessResponse
	14, // 55: api.LDAP.LocateLDAProcess:output_type -> api.LDAProcess
	42, // [42:56] is the sub-list for method output_type
	28, // [28:42] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_ldap_proto_init() }
func file_ldap_proto_init() {
	if File_ldap_proto != nil {
		return
	}
	file_oid_proto_init()
	file_roles_proto_init()
	file_users_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ldap_proto_rawDesc), len(file_ldap_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ldap_proto_goTypes,
		DependencyIndexes: file_ldap_proto_depIdxs,
		MessageInfos:      file_ldap_proto_msgTypes,
	}.Build()
	File_ldap_proto = out.File
	file_ldap_proto_goTypes = nil
	file_ldap_proto_depIdxs = nil
}
