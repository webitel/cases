// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: devices.proto

package api

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DeviceId lookup value
type DeviceId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`    // Object ID
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"` // Display Name
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeviceId) Reset() {
	*x = DeviceId{}
	mi := &file_devices_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceId) ProtoMessage() {}

func (x *DeviceId) ProtoReflect() protoreflect.Message {
	mi := &file_devices_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceId.ProtoReflect.Descriptor instead.
func (*DeviceId) Descriptor() ([]byte, []int) {
	return file_devices_proto_rawDescGZIP(), []int{0}
}

func (x *DeviceId) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeviceId) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Device profile
type Device struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id    int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // object id
	// kind of
	// DeviceType type = 19;
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"` // display name
	// credentials
	Account  string  `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`   // username
	Password string  `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"` // password
	User     *UserId `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`         // [optional] The user that 'owns' the device;
	LoggedIn int64   `protobuf:"varint,6,opt,name=logged_in,json=loggedIn,proto3" json:"logged_in,omitempty"`
	// Hotdesk: this workstation aliases
	Hotdesk   bool              `protobuf:"varint,7,opt,name=hotdesk,proto3" json:"hotdesk,omitempty"`                                                                              // act as a hotdesk
	Hotdesks  []string          `protobuf:"bytes,8,rep,name=hotdesks,proto3" json:"hotdesks,omitempty"`                                                                             // associated aliases
	Provision map[string]string `protobuf:"bytes,9,rep,name=provision,proto3" json:"provision,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // provision extra data
	// provision
	Brand string `protobuf:"bytes,10,opt,name=brand,proto3" json:"brand,omitempty"` // vendor brand name
	Model string `protobuf:"bytes,11,opt,name=model,proto3" json:"model,omitempty"`
	// static
	Mac           string  `protobuf:"bytes,12,opt,name=mac,proto3" json:"mac,omitempty"`
	Ip            string  `protobuf:"bytes,13,opt,name=ip,proto3" json:"ip,omitempty"`
	Reged         bool    `protobuf:"varint,15,opt,name=reged,proto3" json:"reged,omitempty"`
	CreatedAt     int64   `protobuf:"varint,20,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // unix
	CreatedBy     *UserId `protobuf:"bytes,21,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`  // user
	UpdatedAt     int64   `protobuf:"varint,22,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` // unix
	UpdatedBy     *UserId `protobuf:"bytes,23,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`  // user
	DeletedAt     int64   `protobuf:"varint,24,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"` // unix
	DeletedBy     *UserId `protobuf:"bytes,25,opt,name=deleted_by,json=deletedBy,proto3" json:"deleted_by,omitempty"`  // user
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Device) Reset() {
	*x = Device{}
	mi := &file_devices_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_devices_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_devices_proto_rawDescGZIP(), []int{1}
}

func (x *Device) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Device) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Device) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *Device) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Device) GetUser() *UserId {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Device) GetLoggedIn() int64 {
	if x != nil {
		return x.LoggedIn
	}
	return 0
}

func (x *Device) GetHotdesk() bool {
	if x != nil {
		return x.Hotdesk
	}
	return false
}

func (x *Device) GetHotdesks() []string {
	if x != nil {
		return x.Hotdesks
	}
	return nil
}

func (x *Device) GetProvision() map[string]string {
	if x != nil {
		return x.Provision
	}
	return nil
}

func (x *Device) GetBrand() string {
	if x != nil {
		return x.Brand
	}
	return ""
}

func (x *Device) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *Device) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *Device) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Device) GetReged() bool {
	if x != nil {
		return x.Reged
	}
	return false
}

func (x *Device) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Device) GetCreatedBy() *UserId {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *Device) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Device) GetUpdatedBy() *UserId {
	if x != nil {
		return x.UpdatedBy
	}
	return nil
}

func (x *Device) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

func (x *Device) GetDeletedBy() *UserId {
	if x != nil {
		return x.DeletedBy
	}
	return nil
}

// REGISTER SIP status
type Registration struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	User          *UserId                `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Device        *DeviceId              `protobuf:"bytes,3,opt,name=device,proto3" json:"device,omitempty"`
	Callid        string                 `protobuf:"bytes,4,opt,name=callid,proto3" json:"callid,omitempty"`
	Socket        string                 `protobuf:"bytes,5,opt,name=socket,proto3" json:"socket,omitempty"`     // registrar: local side (host) e.g.:
	Contact       string                 `protobuf:"bytes,6,opt,name=contact,proto3" json:"contact,omitempty"`   // binding_uri
	Received      string                 `protobuf:"bytes,7,opt,name=received,proto3" json:"received,omitempty"` // registrant: remote side (proxy)
	Instance      string                 `protobuf:"bytes,8,opt,name=instance,proto3" json:"instance,omitempty"` // ?sip.instance= register contact option
	UserAgent     string                 `protobuf:"bytes,9,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	ExpiresAt     int64                  `protobuf:"varint,10,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	RegisterAt    int64                  `protobuf:"varint,11,opt,name=register_at,json=registerAt,proto3" json:"register_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Registration) Reset() {
	*x = Registration{}
	mi := &file_devices_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Registration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Registration) ProtoMessage() {}

func (x *Registration) ProtoReflect() protoreflect.Message {
	mi := &file_devices_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Registration.ProtoReflect.Descriptor instead.
func (*Registration) Descriptor() ([]byte, []int) {
	return file_devices_proto_rawDescGZIP(), []int{2}
}

func (x *Registration) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Registration) GetUser() *UserId {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Registration) GetDevice() *DeviceId {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *Registration) GetCallid() string {
	if x != nil {
		return x.Callid
	}
	return ""
}

func (x *Registration) GetSocket() string {
	if x != nil {
		return x.Socket
	}
	return ""
}

func (x *Registration) GetContact() string {
	if x != nil {
		return x.Contact
	}
	return ""
}

func (x *Registration) GetReceived() string {
	if x != nil {
		return x.Received
	}
	return ""
}

func (x *Registration) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *Registration) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *Registration) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

func (x *Registration) GetRegisterAt() int64 {
	if x != nil {
		return x.RegisterAt
	}
	return 0
}

// GET /devices/{id}
type ReadDeviceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Fields        []string               `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"` // output selection
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadDeviceRequest) Reset() {
	*x = ReadDeviceRequest{}
	mi := &file_devices_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadDeviceRequest) ProtoMessage() {}

func (x *ReadDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_devices_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadDeviceRequest.ProtoReflect.Descriptor instead.
func (*ReadDeviceRequest) Descriptor() ([]byte, []int) {
	return file_devices_proto_rawDescGZIP(), []int{3}
}

func (x *ReadDeviceRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReadDeviceRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

type ReadDeviceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Device        *Device                `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadDeviceResponse) Reset() {
	*x = ReadDeviceResponse{}
	mi := &file_devices_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadDeviceResponse) ProtoMessage() {}

func (x *ReadDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_devices_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadDeviceResponse.ProtoReflect.Descriptor instead.
func (*ReadDeviceResponse) Descriptor() ([]byte, []int) {
	return file_devices_proto_rawDescGZIP(), []int{4}
}

func (x *ReadDeviceResponse) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

// PUT /devices/{id}
type UpdateDeviceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Device        *Device                `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Fields        []string               `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"` // PATCH: partial update
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateDeviceRequest) Reset() {
	*x = UpdateDeviceRequest{}
	mi := &file_devices_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceRequest) ProtoMessage() {}

func (x *UpdateDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_devices_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceRequest.ProtoReflect.Descriptor instead.
func (*UpdateDeviceRequest) Descriptor() ([]byte, []int) {
	return file_devices_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateDeviceRequest) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *UpdateDeviceRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

type UpdateDeviceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Device        *Device                `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateDeviceResponse) Reset() {
	*x = UpdateDeviceResponse{}
	mi := &file_devices_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceResponse) ProtoMessage() {}

func (x *UpdateDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_devices_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceResponse.ProtoReflect.Descriptor instead.
func (*UpdateDeviceResponse) Descriptor() ([]byte, []int) {
	return file_devices_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateDeviceResponse) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

// DELETE /devices/{id}
type DeleteDeviceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Permanent     bool                   `protobuf:"varint,2,opt,name=permanent,proto3" json:"permanent,omitempty"`
	Ids           []int64                `protobuf:"varint,3,rep,packed,name=ids,proto3" json:"ids,omitempty"` // bulk
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteDeviceRequest) Reset() {
	*x = DeleteDeviceRequest{}
	mi := &file_devices_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDeviceRequest) ProtoMessage() {}

func (x *DeleteDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_devices_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDeviceRequest.ProtoReflect.Descriptor instead.
func (*DeleteDeviceRequest) Descriptor() ([]byte, []int) {
	return file_devices_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteDeviceRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeleteDeviceRequest) GetPermanent() bool {
	if x != nil {
		return x.Permanent
	}
	return false
}

func (x *DeleteDeviceRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteDeviceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Deleted       []*Device              `protobuf:"bytes,1,rep,name=deleted,proto3" json:"deleted,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteDeviceResponse) Reset() {
	*x = DeleteDeviceResponse{}
	mi := &file_devices_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDeviceResponse) ProtoMessage() {}

func (x *DeleteDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_devices_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDeviceResponse.ProtoReflect.Descriptor instead.
func (*DeleteDeviceResponse) Descriptor() ([]byte, []int) {
	return file_devices_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteDeviceResponse) GetDeleted() []*Device {
	if x != nil {
		return x.Deleted
	}
	return nil
}

// POST /devices
type CreateDeviceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Device        *Device                `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"` // string password = 2;
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDeviceRequest) Reset() {
	*x = CreateDeviceRequest{}
	mi := &file_devices_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceRequest) ProtoMessage() {}

func (x *CreateDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_devices_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceRequest.ProtoReflect.Descriptor instead.
func (*CreateDeviceRequest) Descriptor() ([]byte, []int) {
	return file_devices_proto_rawDescGZIP(), []int{9}
}

func (x *CreateDeviceRequest) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

type CreateDeviceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Device        *Device                `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDeviceResponse) Reset() {
	*x = CreateDeviceResponse{}
	mi := &file_devices_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceResponse) ProtoMessage() {}

func (x *CreateDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_devices_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceResponse.ProtoReflect.Descriptor instead.
func (*CreateDeviceResponse) Descriptor() ([]byte, []int) {
	return file_devices_proto_rawDescGZIP(), []int{10}
}

func (x *CreateDeviceResponse) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

// POST /devices
type SearchDeviceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ----- Select Options -------------------------
	Size   int32    `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`    // default: 16
	Page   int32    `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`    // default: 1
	Fields []string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"` // attributes list
	Sort   []string `protobuf:"bytes,4,rep,name=sort,proto3" json:"sort,omitempty"`     // e.g.: "updated_at" - ASC; "!updated_at" - DESC;
	// ----- Search Basic Filters ---------------------------
	Ids    []int64 `protobuf:"varint,5,rep,packed,name=ids,proto3" json:"ids,omitempty"` // selection: by unique identifier
	Q      string  `protobuf:"bytes,6,opt,name=q,proto3" json:"q,omitempty"`             // term-of-search: lookup[name,account,hotdesk,brand,model,mac,ip]
	Name   string  `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`       // case-ignore substring match: ILIKE '*' - any; '?' - one
	Access string  `protobuf:"bytes,8,opt,name=access,proto3" json:"access,omitempty"`   // [M]andatory[A]ccess[C]ontrol: with access mode (action) granted!
	// ----- Device-Specific Filters ----------------
	Account string `protobuf:"bytes,9,opt,name=account,proto3" json:"account,omitempty"`  // substring like '%name%'
	Hotdesk string `protobuf:"bytes,10,opt,name=hotdesk,proto3" json:"hotdesk,omitempty"` // filter: has hotdesk (=pattern); is hotdesk (=*)
	// Device.State state = 11; // current state eq
	User          *UserId `protobuf:"bytes,12,opt,name=user,proto3" json:"user,omitempty"` // filter: by user_id
	Mac           string  `protobuf:"bytes,13,opt,name=mac,proto3" json:"mac,omitempty"`   // filter: by MAC address
	Ip            string  `protobuf:"bytes,14,opt,name=ip,proto3" json:"ip,omitempty"`     // filter: by IP address
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchDeviceRequest) Reset() {
	*x = SearchDeviceRequest{}
	mi := &file_devices_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchDeviceRequest) ProtoMessage() {}

func (x *SearchDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_devices_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchDeviceRequest.ProtoReflect.Descriptor instead.
func (*SearchDeviceRequest) Descriptor() ([]byte, []int) {
	return file_devices_proto_rawDescGZIP(), []int{11}
}

func (x *SearchDeviceRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SearchDeviceRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchDeviceRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *SearchDeviceRequest) GetSort() []string {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *SearchDeviceRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *SearchDeviceRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *SearchDeviceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SearchDeviceRequest) GetAccess() string {
	if x != nil {
		return x.Access
	}
	return ""
}

func (x *SearchDeviceRequest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *SearchDeviceRequest) GetHotdesk() string {
	if x != nil {
		return x.Hotdesk
	}
	return ""
}

func (x *SearchDeviceRequest) GetUser() *UserId {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *SearchDeviceRequest) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *SearchDeviceRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type SearchDeviceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int32                  `protobuf:"varint,10,opt,name=page,proto3" json:"page,omitempty"` // select: offset {page}
	Size          int32                  `protobuf:"varint,11,opt,name=size,proto3" json:"size,omitempty"` // search: limit {size}
	Next          bool                   `protobuf:"varint,12,opt,name=next,proto3" json:"next,omitempty"` // search: has {next} page ?
	Items         []*Device              `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"` // devices
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchDeviceResponse) Reset() {
	*x = SearchDeviceResponse{}
	mi := &file_devices_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchDeviceResponse) ProtoMessage() {}

func (x *SearchDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_devices_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchDeviceResponse.ProtoReflect.Descriptor instead.
func (*SearchDeviceResponse) Descriptor() ([]byte, []int) {
	return file_devices_proto_rawDescGZIP(), []int{12}
}

func (x *SearchDeviceResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchDeviceResponse) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SearchDeviceResponse) GetNext() bool {
	if x != nil {
		return x.Next
	}
	return false
}

func (x *SearchDeviceResponse) GetItems() []*Device {
	if x != nil {
		return x.Items
	}
	return nil
}

// Device login audit
type DeviceAudit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          *UserId                `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`     // /devices/:id/audit related
	Device        *DeviceId              `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"` // /users/:id/audit related
	Hotdesk       string                 `protobuf:"bytes,3,opt,name=hotdesk,proto3" json:"hotdesk,omitempty"`
	LoggedIn      int64                  `protobuf:"varint,4,opt,name=logged_in,json=loggedIn,proto3" json:"logged_in,omitempty"`
	LoggedOut     int64                  `protobuf:"varint,5,opt,name=logged_out,json=loggedOut,proto3" json:"logged_out,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeviceAudit) Reset() {
	*x = DeviceAudit{}
	mi := &file_devices_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceAudit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceAudit) ProtoMessage() {}

func (x *DeviceAudit) ProtoReflect() protoreflect.Message {
	mi := &file_devices_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceAudit.ProtoReflect.Descriptor instead.
func (*DeviceAudit) Descriptor() ([]byte, []int) {
	return file_devices_proto_rawDescGZIP(), []int{13}
}

func (x *DeviceAudit) GetUser() *UserId {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *DeviceAudit) GetDevice() *DeviceId {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *DeviceAudit) GetHotdesk() string {
	if x != nil {
		return x.Hotdesk
	}
	return ""
}

func (x *DeviceAudit) GetLoggedIn() int64 {
	if x != nil {
		return x.LoggedIn
	}
	return 0
}

func (x *DeviceAudit) GetLoggedOut() int64 {
	if x != nil {
		return x.LoggedOut
	}
	return 0
}

type DeviceAuditRequest struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	User   *UserId                `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Device *DeviceId              `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
	// Filter: timing range (optional)
	TimeFrom int64 `protobuf:"varint,3,opt,name=time_from,json=timeFrom,proto3" json:"time_from,omitempty"` // unix milliseconds
	TimeTill int64 `protobuf:"varint,4,opt,name=time_till,json=timeTill,proto3" json:"time_till,omitempty"` // unix milliseconds
	// Search Options
	Fields        []string `protobuf:"bytes,5,rep,name=fields,proto3" json:"fields,omitempty"`
	Sort          []string `protobuf:"bytes,6,rep,name=sort,proto3" json:"sort,omitempty"`
	Size          int32    `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty"`
	Page          int32    `protobuf:"varint,8,opt,name=page,proto3" json:"page,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeviceAuditRequest) Reset() {
	*x = DeviceAuditRequest{}
	mi := &file_devices_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceAuditRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceAuditRequest) ProtoMessage() {}

func (x *DeviceAuditRequest) ProtoReflect() protoreflect.Message {
	mi := &file_devices_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceAuditRequest.ProtoReflect.Descriptor instead.
func (*DeviceAuditRequest) Descriptor() ([]byte, []int) {
	return file_devices_proto_rawDescGZIP(), []int{14}
}

func (x *DeviceAuditRequest) GetUser() *UserId {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *DeviceAuditRequest) GetDevice() *DeviceId {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *DeviceAuditRequest) GetTimeFrom() int64 {
	if x != nil {
		return x.TimeFrom
	}
	return 0
}

func (x *DeviceAuditRequest) GetTimeTill() int64 {
	if x != nil {
		return x.TimeTill
	}
	return 0
}

func (x *DeviceAuditRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *DeviceAuditRequest) GetSort() []string {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *DeviceAuditRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *DeviceAuditRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

type DeviceAuditResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int32                  `protobuf:"varint,10,opt,name=page,proto3" json:"page,omitempty"` // select: offset {page}
	Size          int32                  `protobuf:"varint,11,opt,name=size,proto3" json:"size,omitempty"` // search: limit {size}
	Next          bool                   `protobuf:"varint,12,opt,name=next,proto3" json:"next,omitempty"` // search: has {next} page ?
	Items         []*DeviceAudit         `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"` // audit_logs
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeviceAuditResponse) Reset() {
	*x = DeviceAuditResponse{}
	mi := &file_devices_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceAuditResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceAuditResponse) ProtoMessage() {}

func (x *DeviceAuditResponse) ProtoReflect() protoreflect.Message {
	mi := &file_devices_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceAuditResponse.ProtoReflect.Descriptor instead.
func (*DeviceAuditResponse) Descriptor() ([]byte, []int) {
	return file_devices_proto_rawDescGZIP(), []int{15}
}

func (x *DeviceAuditResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *DeviceAuditResponse) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *DeviceAuditResponse) GetNext() bool {
	if x != nil {
		return x.Next
	}
	return false
}

func (x *DeviceAuditResponse) GetItems() []*DeviceAudit {
	if x != nil {
		return x.Items
	}
	return nil
}

type ListRegistrationsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          *UserId                `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Device        *DeviceId              `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRegistrationsRequest) Reset() {
	*x = ListRegistrationsRequest{}
	mi := &file_devices_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRegistrationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRegistrationsRequest) ProtoMessage() {}

func (x *ListRegistrationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_devices_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRegistrationsRequest.ProtoReflect.Descriptor instead.
func (*ListRegistrationsRequest) Descriptor() ([]byte, []int) {
	return file_devices_proto_rawDescGZIP(), []int{16}
}

func (x *ListRegistrationsRequest) GetUser() *UserId {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *ListRegistrationsRequest) GetDevice() *DeviceId {
	if x != nil {
		return x.Device
	}
	return nil
}

type ListRegistrationsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int32                  `protobuf:"varint,10,opt,name=page,proto3" json:"page,omitempty"` // select: offset {page}
	Size          int32                  `protobuf:"varint,11,opt,name=size,proto3" json:"size,omitempty"` // search: limit {size}
	Next          bool                   `protobuf:"varint,12,opt,name=next,proto3" json:"next,omitempty"` // search: has {next} page ?
	Items         []*Registration        `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"` // registered
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRegistrationsResponse) Reset() {
	*x = ListRegistrationsResponse{}
	mi := &file_devices_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRegistrationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRegistrationsResponse) ProtoMessage() {}

func (x *ListRegistrationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_devices_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRegistrationsResponse.ProtoReflect.Descriptor instead.
func (*ListRegistrationsResponse) Descriptor() ([]byte, []int) {
	return file_devices_proto_rawDescGZIP(), []int{17}
}

func (x *ListRegistrationsResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListRegistrationsResponse) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ListRegistrationsResponse) GetNext() bool {
	if x != nil {
		return x.Next
	}
	return false
}

func (x *ListRegistrationsResponse) GetItems() []*Registration {
	if x != nil {
		return x.Items
	}
	return nil
}

// The hotdesk status of this device
type Hotdesk struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Disabled bool                   `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Set-of domain unique id(s)
	Alias []string `protobuf:"bytes,2,rep,name=alias,proto3" json:"alias,omitempty"` // [optional] implicit .[id|mac|ip|account]
	// The user(s) currently hotdesked into the device
	Users         []*HotdeskUser `protobuf:"bytes,3,rep,name=users,proto3" json:"users,omitempty"` // repeated ObjectId users = 3;
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Hotdesk) Reset() {
	*x = Hotdesk{}
	mi := &file_devices_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Hotdesk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hotdesk) ProtoMessage() {}

func (x *Hotdesk) ProtoReflect() protoreflect.Message {
	mi := &file_devices_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hotdesk.ProtoReflect.Descriptor instead.
func (*Hotdesk) Descriptor() ([]byte, []int) {
	return file_devices_proto_rawDescGZIP(), []int{18}
}

func (x *Hotdesk) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *Hotdesk) GetAlias() []string {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *Hotdesk) GetUsers() []*HotdeskUser {
	if x != nil {
		return x.Users
	}
	return nil
}

// Hotdesk-ed user session
type HotdeskUser struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          *UserId                `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`                             // currently hotdesked user.id
	Hotdesk       string                 `protobuf:"bytes,2,opt,name=hotdesk,proto3" json:"hotdesk,omitempty"`                       // [optional] hotdesk signed-in
	SignedIn      int64                  `protobuf:"varint,3,opt,name=signed_in,json=signedIn,proto3" json:"signed_in,omitempty"`    // [required] session opened at ...
	SignedOut     int64                  `protobuf:"varint,4,opt,name=signed_out,json=signedOut,proto3" json:"signed_out,omitempty"` // [optional] session closed at ...
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HotdeskUser) Reset() {
	*x = HotdeskUser{}
	mi := &file_devices_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HotdeskUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HotdeskUser) ProtoMessage() {}

func (x *HotdeskUser) ProtoReflect() protoreflect.Message {
	mi := &file_devices_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HotdeskUser.ProtoReflect.Descriptor instead.
func (*HotdeskUser) Descriptor() ([]byte, []int) {
	return file_devices_proto_rawDescGZIP(), []int{19}
}

func (x *HotdeskUser) GetUser() *UserId {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *HotdeskUser) GetHotdesk() string {
	if x != nil {
		return x.Hotdesk
	}
	return ""
}

func (x *HotdeskUser) GetSignedIn() int64 {
	if x != nil {
		return x.SignedIn
	}
	return 0
}

func (x *HotdeskUser) GetSignedOut() int64 {
	if x != nil {
		return x.SignedOut
	}
	return 0
}

// Provision data
type Provision struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`       // Provisioner Template-ID
	Brand         string                 `protobuf:"bytes,2,opt,name=brand,proto3" json:"brand,omitempty"` // IP-Phone brand name, e.g.: Yealink, Cisco, Linphone, etc.
	Model         string                 `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"` // IP-Phone brand-specific model, e.g.: T22, 7821, etc.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Provision) Reset() {
	*x = Provision{}
	mi := &file_devices_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Provision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Provision) ProtoMessage() {}

func (x *Provision) ProtoReflect() protoreflect.Message {
	mi := &file_devices_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Provision.ProtoReflect.Descriptor instead.
func (*Provision) Descriptor() ([]byte, []int) {
	return file_devices_proto_rawDescGZIP(), []int{20}
}

func (x *Provision) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Provision) GetBrand() string {
	if x != nil {
		return x.Brand
	}
	return ""
}

func (x *Provision) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

var File_devices_proto protoreflect.FileDescriptor

var file_devices_proto_rawDesc = string([]byte{
	0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x03, 0x61, 0x70, 0x69, 0x1a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x2e, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x93, 0x05, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x5f,
	0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64,
	0x49, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x6f, 0x74, 0x64, 0x65, 0x73, 0x6b, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x6f, 0x74, 0x64, 0x65, 0x73, 0x6b, 0x12, 0x1a, 0x0a, 0x08,
	0x68, 0x6f, 0x74, 0x64, 0x65, 0x73, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x68, 0x6f, 0x74, 0x64, 0x65, 0x73, 0x6b, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x67, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x72, 0x65, 0x67, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2a, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x2a, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2a, 0x0a, 0x0a, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x09, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x79, 0x1a, 0x3c, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc7, 0x02, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x61, 0x6c, 0x6c, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x74, 0x22,
	0x3b, 0x0a, 0x11, 0x52, 0x65, 0x61, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x39, 0x0a, 0x12,
	0x52, 0x65, 0x61, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x52, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23,
	0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x3b, 0x0a, 0x14, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x55, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22,
	0x3d, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x3a,
	0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x3b, 0x0a, 0x14, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0xac, 0x02, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x01, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x6f, 0x74,
	0x64, 0x65, 0x73, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x6f, 0x74, 0x64,
	0x65, 0x73, 0x6b, 0x12, 0x1f, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0x75, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x21, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xab, 0x01,
	0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x12, 0x1f, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x25,
	0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x52, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x6f, 0x74, 0x64, 0x65, 0x73, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x6f, 0x74, 0x64, 0x65, 0x73, 0x6b, 0x12,
	0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x22, 0xea, 0x01, 0x0a, 0x12,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x74, 0x69, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65,
	0x54, 0x69, 0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x79, 0x0a, 0x13, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x26, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0x62, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x25, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x52,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6e, 0x65, 0x78,
	0x74, 0x12, 0x27, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x63, 0x0a, 0x07, 0x48, 0x6f,
	0x74, 0x64, 0x65, 0x73, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x6f, 0x74,
	0x64, 0x65, 0x73, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22,
	0x84, 0x01, 0x0a, 0x0b, 0x48, 0x6f, 0x74, 0x64, 0x65, 0x73, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x1f, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x68, 0x6f, 0x74, 0x64, 0x65, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x68, 0x6f, 0x74, 0x64, 0x65, 0x73, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x22, 0x47, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x32,
	0xfd, 0x05, 0x0a, 0x07, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x0a, 0x52,
	0x65, 0x61, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x52, 0x65, 0x61, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x12, 0x89, 0x01, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x3a,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5a, 0x1e, 0x3a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x32, 0x14, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x7d, 0x1a, 0x14, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2f, 0x7b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x7d, 0x12, 0x6b, 0x0a,
	0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x18, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x5a, 0x0f, 0x3a, 0x03, 0x69, 0x64,
	0x73, 0x2a, 0x08, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2a, 0x0d, 0x2f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x5d, 0x0a, 0x0c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x18, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x3a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22,
	0x08, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x0c, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x10,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x12, 0x70, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x12, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22,
	0x12, 0x20, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x12, 0x7b, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f,
	0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x42,
	0x57, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x42, 0x0c, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x12, 0x77, 0x65, 0x62, 0x69,
	0x74, 0x65, 0x6c, 0x2e, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x3b, 0x61, 0x70, 0x69, 0xa2, 0x02,
	0x03, 0x41, 0x58, 0x58, 0xaa, 0x02, 0x03, 0x41, 0x70, 0x69, 0xca, 0x02, 0x03, 0x41, 0x70, 0x69,
	0xe2, 0x02, 0x0f, 0x41, 0x70, 0x69, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x03, 0x41, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_devices_proto_rawDescOnce sync.Once
	file_devices_proto_rawDescData []byte
)

func file_devices_proto_rawDescGZIP() []byte {
	file_devices_proto_rawDescOnce.Do(func() {
		file_devices_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_devices_proto_rawDesc), len(file_devices_proto_rawDesc)))
	})
	return file_devices_proto_rawDescData
}

var file_devices_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_devices_proto_goTypes = []any{
	(*DeviceId)(nil),                  // 0: api.DeviceId
	(*Device)(nil),                    // 1: api.Device
	(*Registration)(nil),              // 2: api.Registration
	(*ReadDeviceRequest)(nil),         // 3: api.ReadDeviceRequest
	(*ReadDeviceResponse)(nil),        // 4: api.ReadDeviceResponse
	(*UpdateDeviceRequest)(nil),       // 5: api.UpdateDeviceRequest
	(*UpdateDeviceResponse)(nil),      // 6: api.UpdateDeviceResponse
	(*DeleteDeviceRequest)(nil),       // 7: api.DeleteDeviceRequest
	(*DeleteDeviceResponse)(nil),      // 8: api.DeleteDeviceResponse
	(*CreateDeviceRequest)(nil),       // 9: api.CreateDeviceRequest
	(*CreateDeviceResponse)(nil),      // 10: api.CreateDeviceResponse
	(*SearchDeviceRequest)(nil),       // 11: api.SearchDeviceRequest
	(*SearchDeviceResponse)(nil),      // 12: api.SearchDeviceResponse
	(*DeviceAudit)(nil),               // 13: api.DeviceAudit
	(*DeviceAuditRequest)(nil),        // 14: api.DeviceAuditRequest
	(*DeviceAuditResponse)(nil),       // 15: api.DeviceAuditResponse
	(*ListRegistrationsRequest)(nil),  // 16: api.ListRegistrationsRequest
	(*ListRegistrationsResponse)(nil), // 17: api.ListRegistrationsResponse
	(*Hotdesk)(nil),                   // 18: api.Hotdesk
	(*HotdeskUser)(nil),               // 19: api.HotdeskUser
	(*Provision)(nil),                 // 20: api.Provision
	nil,                               // 21: api.Device.ProvisionEntry
	(*UserId)(nil),                    // 22: api.UserId
}
var file_devices_proto_depIdxs = []int32{
	22, // 0: api.Device.user:type_name -> api.UserId
	21, // 1: api.Device.provision:type_name -> api.Device.ProvisionEntry
	22, // 2: api.Device.created_by:type_name -> api.UserId
	22, // 3: api.Device.updated_by:type_name -> api.UserId
	22, // 4: api.Device.deleted_by:type_name -> api.UserId
	22, // 5: api.Registration.user:type_name -> api.UserId
	0,  // 6: api.Registration.device:type_name -> api.DeviceId
	1,  // 7: api.ReadDeviceResponse.device:type_name -> api.Device
	1,  // 8: api.UpdateDeviceRequest.device:type_name -> api.Device
	1,  // 9: api.UpdateDeviceResponse.device:type_name -> api.Device
	1,  // 10: api.DeleteDeviceResponse.deleted:type_name -> api.Device
	1,  // 11: api.CreateDeviceRequest.device:type_name -> api.Device
	1,  // 12: api.CreateDeviceResponse.device:type_name -> api.Device
	22, // 13: api.SearchDeviceRequest.user:type_name -> api.UserId
	1,  // 14: api.SearchDeviceResponse.items:type_name -> api.Device
	22, // 15: api.DeviceAudit.user:type_name -> api.UserId
	0,  // 16: api.DeviceAudit.device:type_name -> api.DeviceId
	22, // 17: api.DeviceAuditRequest.user:type_name -> api.UserId
	0,  // 18: api.DeviceAuditRequest.device:type_name -> api.DeviceId
	13, // 19: api.DeviceAuditResponse.items:type_name -> api.DeviceAudit
	22, // 20: api.ListRegistrationsRequest.user:type_name -> api.UserId
	0,  // 21: api.ListRegistrationsRequest.device:type_name -> api.DeviceId
	2,  // 22: api.ListRegistrationsResponse.items:type_name -> api.Registration
	19, // 23: api.Hotdesk.users:type_name -> api.HotdeskUser
	22, // 24: api.HotdeskUser.user:type_name -> api.UserId
	3,  // 25: api.Devices.ReadDevice:input_type -> api.ReadDeviceRequest
	5,  // 26: api.Devices.UpdateDevice:input_type -> api.UpdateDeviceRequest
	7,  // 27: api.Devices.DeleteDevice:input_type -> api.DeleteDeviceRequest
	9,  // 28: api.Devices.CreateDevice:input_type -> api.CreateDeviceRequest
	11, // 29: api.Devices.SearchDevice:input_type -> api.SearchDeviceRequest
	14, // 30: api.Devices.SearchDeviceAudit:input_type -> api.DeviceAuditRequest
	16, // 31: api.Devices.ListRegistrations:input_type -> api.ListRegistrationsRequest
	4,  // 32: api.Devices.ReadDevice:output_type -> api.ReadDeviceResponse
	6,  // 33: api.Devices.UpdateDevice:output_type -> api.UpdateDeviceResponse
	8,  // 34: api.Devices.DeleteDevice:output_type -> api.DeleteDeviceResponse
	10, // 35: api.Devices.CreateDevice:output_type -> api.CreateDeviceResponse
	12, // 36: api.Devices.SearchDevice:output_type -> api.SearchDeviceResponse
	15, // 37: api.Devices.SearchDeviceAudit:output_type -> api.DeviceAuditResponse
	17, // 38: api.Devices.ListRegistrations:output_type -> api.ListRegistrationsResponse
	32, // [32:39] is the sub-list for method output_type
	25, // [25:32] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_devices_proto_init() }
func file_devices_proto_init() {
	if File_devices_proto != nil {
		return
	}
	file_users_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_devices_proto_rawDesc), len(file_devices_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_devices_proto_goTypes,
		DependencyIndexes: file_devices_proto_depIdxs,
		MessageInfos:      file_devices_proto_msgTypes,
	}.Build()
	File_devices_proto = out.File
	file_devices_proto_goTypes = nil
	file_devices_proto_depIdxs = nil
}
