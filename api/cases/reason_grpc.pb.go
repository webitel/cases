// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: cases/reason.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Reasons_ListReasons_FullMethodName  = "/cases.Reasons/ListReasons"
	Reasons_CreateReason_FullMethodName = "/cases.Reasons/CreateReason"
	Reasons_UpdateReason_FullMethodName = "/cases.Reasons/UpdateReason"
	Reasons_DeleteReason_FullMethodName = "/cases.Reasons/DeleteReason"
	Reasons_LocateReason_FullMethodName = "/cases.Reasons/LocateReason"
)

// ReasonsClient is the client API for Reasons service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Reasons service definition with RPC methods for managing reasons
type ReasonsClient interface {
	// RPC method to list or search reasons
	ListReasons(ctx context.Context, in *ListReasonRequest, opts ...grpc.CallOption) (*ReasonList, error)
	// RPC method to create a new reason
	CreateReason(ctx context.Context, in *CreateReasonRequest, opts ...grpc.CallOption) (*Reason, error)
	// RPC method to update an existing reason
	UpdateReason(ctx context.Context, in *UpdateReasonRequest, opts ...grpc.CallOption) (*Reason, error)
	// RPC method to delete an existing reason
	DeleteReason(ctx context.Context, in *DeleteReasonRequest, opts ...grpc.CallOption) (*Reason, error)
	// RPC method to locate a specific reason by ID
	LocateReason(ctx context.Context, in *LocateReasonRequest, opts ...grpc.CallOption) (*LocateReasonResponse, error)
}

type reasonsClient struct {
	cc grpc.ClientConnInterface
}

func NewReasonsClient(cc grpc.ClientConnInterface) ReasonsClient {
	return &reasonsClient{cc}
}

func (c *reasonsClient) ListReasons(ctx context.Context, in *ListReasonRequest, opts ...grpc.CallOption) (*ReasonList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReasonList)
	err := c.cc.Invoke(ctx, Reasons_ListReasons_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reasonsClient) CreateReason(ctx context.Context, in *CreateReasonRequest, opts ...grpc.CallOption) (*Reason, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Reason)
	err := c.cc.Invoke(ctx, Reasons_CreateReason_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reasonsClient) UpdateReason(ctx context.Context, in *UpdateReasonRequest, opts ...grpc.CallOption) (*Reason, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Reason)
	err := c.cc.Invoke(ctx, Reasons_UpdateReason_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reasonsClient) DeleteReason(ctx context.Context, in *DeleteReasonRequest, opts ...grpc.CallOption) (*Reason, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Reason)
	err := c.cc.Invoke(ctx, Reasons_DeleteReason_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reasonsClient) LocateReason(ctx context.Context, in *LocateReasonRequest, opts ...grpc.CallOption) (*LocateReasonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LocateReasonResponse)
	err := c.cc.Invoke(ctx, Reasons_LocateReason_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReasonsServer is the server API for Reasons service.
// All implementations should embed UnimplementedReasonsServer
// for forward compatibility.
//
// Reasons service definition with RPC methods for managing reasons
type ReasonsServer interface {
	// RPC method to list or search reasons
	ListReasons(context.Context, *ListReasonRequest) (*ReasonList, error)
	// RPC method to create a new reason
	CreateReason(context.Context, *CreateReasonRequest) (*Reason, error)
	// RPC method to update an existing reason
	UpdateReason(context.Context, *UpdateReasonRequest) (*Reason, error)
	// RPC method to delete an existing reason
	DeleteReason(context.Context, *DeleteReasonRequest) (*Reason, error)
	// RPC method to locate a specific reason by ID
	LocateReason(context.Context, *LocateReasonRequest) (*LocateReasonResponse, error)
}

// UnimplementedReasonsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReasonsServer struct{}

func (UnimplementedReasonsServer) ListReasons(context.Context, *ListReasonRequest) (*ReasonList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReasons not implemented")
}
func (UnimplementedReasonsServer) CreateReason(context.Context, *CreateReasonRequest) (*Reason, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReason not implemented")
}
func (UnimplementedReasonsServer) UpdateReason(context.Context, *UpdateReasonRequest) (*Reason, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReason not implemented")
}
func (UnimplementedReasonsServer) DeleteReason(context.Context, *DeleteReasonRequest) (*Reason, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReason not implemented")
}
func (UnimplementedReasonsServer) LocateReason(context.Context, *LocateReasonRequest) (*LocateReasonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocateReason not implemented")
}
func (UnimplementedReasonsServer) testEmbeddedByValue() {}

// UnsafeReasonsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReasonsServer will
// result in compilation errors.
type UnsafeReasonsServer interface {
	mustEmbedUnimplementedReasonsServer()
}

func RegisterReasonsServer(s grpc.ServiceRegistrar, srv ReasonsServer) {
	// If the following call pancis, it indicates UnimplementedReasonsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Reasons_ServiceDesc, srv)
}

func _Reasons_ListReasons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReasonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReasonsServer).ListReasons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reasons_ListReasons_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReasonsServer).ListReasons(ctx, req.(*ListReasonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reasons_CreateReason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReasonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReasonsServer).CreateReason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reasons_CreateReason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReasonsServer).CreateReason(ctx, req.(*CreateReasonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reasons_UpdateReason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReasonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReasonsServer).UpdateReason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reasons_UpdateReason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReasonsServer).UpdateReason(ctx, req.(*UpdateReasonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reasons_DeleteReason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReasonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReasonsServer).DeleteReason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reasons_DeleteReason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReasonsServer).DeleteReason(ctx, req.(*DeleteReasonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reasons_LocateReason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocateReasonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReasonsServer).LocateReason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reasons_LocateReason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReasonsServer).LocateReason(ctx, req.(*LocateReasonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Reasons_ServiceDesc is the grpc.ServiceDesc for Reasons service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Reasons_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cases.Reasons",
	HandlerType: (*ReasonsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListReasons",
			Handler:    _Reasons_ListReasons_Handler,
		},
		{
			MethodName: "CreateReason",
			Handler:    _Reasons_CreateReason_Handler,
		},
		{
			MethodName: "UpdateReason",
			Handler:    _Reasons_UpdateReason_Handler,
		},
		{
			MethodName: "DeleteReason",
			Handler:    _Reasons_DeleteReason_Handler,
		},
		{
			MethodName: "LocateReason",
			Handler:    _Reasons_LocateReason_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cases/reason.proto",
}
