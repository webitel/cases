// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: cases/appeal.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Appeals_ListAppeals_FullMethodName  = "/cases.Appeals/ListAppeals"
	Appeals_CreateAppeal_FullMethodName = "/cases.Appeals/CreateAppeal"
	Appeals_UpdateAppeal_FullMethodName = "/cases.Appeals/UpdateAppeal"
	Appeals_DeleteAppeal_FullMethodName = "/cases.Appeals/DeleteAppeal"
	Appeals_LocateAppeal_FullMethodName = "/cases.Appeals/LocateAppeal"
)

// AppealsClient is the client API for Appeals service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppealsClient interface {
	ListAppeals(ctx context.Context, in *ListAppealRequest, opts ...grpc.CallOption) (*AppealList, error)
	CreateAppeal(ctx context.Context, in *CreateAppealRequest, opts ...grpc.CallOption) (*Appeal, error)
	UpdateAppeal(ctx context.Context, in *UpdateAppealRequest, opts ...grpc.CallOption) (*Appeal, error)
	DeleteAppeal(ctx context.Context, in *DeleteAppealRequest, opts ...grpc.CallOption) (*Appeal, error)
	LocateAppeal(ctx context.Context, in *LocateAppealRequest, opts ...grpc.CallOption) (*LocateAppealResponse, error)
}

type appealsClient struct {
	cc grpc.ClientConnInterface
}

func NewAppealsClient(cc grpc.ClientConnInterface) AppealsClient {
	return &appealsClient{cc}
}

func (c *appealsClient) ListAppeals(ctx context.Context, in *ListAppealRequest, opts ...grpc.CallOption) (*AppealList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppealList)
	err := c.cc.Invoke(ctx, Appeals_ListAppeals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appealsClient) CreateAppeal(ctx context.Context, in *CreateAppealRequest, opts ...grpc.CallOption) (*Appeal, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Appeal)
	err := c.cc.Invoke(ctx, Appeals_CreateAppeal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appealsClient) UpdateAppeal(ctx context.Context, in *UpdateAppealRequest, opts ...grpc.CallOption) (*Appeal, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Appeal)
	err := c.cc.Invoke(ctx, Appeals_UpdateAppeal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appealsClient) DeleteAppeal(ctx context.Context, in *DeleteAppealRequest, opts ...grpc.CallOption) (*Appeal, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Appeal)
	err := c.cc.Invoke(ctx, Appeals_DeleteAppeal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appealsClient) LocateAppeal(ctx context.Context, in *LocateAppealRequest, opts ...grpc.CallOption) (*LocateAppealResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LocateAppealResponse)
	err := c.cc.Invoke(ctx, Appeals_LocateAppeal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppealsServer is the server API for Appeals service.
// All implementations should embed UnimplementedAppealsServer
// for forward compatibility.
type AppealsServer interface {
	ListAppeals(context.Context, *ListAppealRequest) (*AppealList, error)
	CreateAppeal(context.Context, *CreateAppealRequest) (*Appeal, error)
	UpdateAppeal(context.Context, *UpdateAppealRequest) (*Appeal, error)
	DeleteAppeal(context.Context, *DeleteAppealRequest) (*Appeal, error)
	LocateAppeal(context.Context, *LocateAppealRequest) (*LocateAppealResponse, error)
}

// UnimplementedAppealsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAppealsServer struct{}

func (UnimplementedAppealsServer) ListAppeals(context.Context, *ListAppealRequest) (*AppealList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppeals not implemented")
}
func (UnimplementedAppealsServer) CreateAppeal(context.Context, *CreateAppealRequest) (*Appeal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppeal not implemented")
}
func (UnimplementedAppealsServer) UpdateAppeal(context.Context, *UpdateAppealRequest) (*Appeal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppeal not implemented")
}
func (UnimplementedAppealsServer) DeleteAppeal(context.Context, *DeleteAppealRequest) (*Appeal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppeal not implemented")
}
func (UnimplementedAppealsServer) LocateAppeal(context.Context, *LocateAppealRequest) (*LocateAppealResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocateAppeal not implemented")
}
func (UnimplementedAppealsServer) testEmbeddedByValue() {}

// UnsafeAppealsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppealsServer will
// result in compilation errors.
type UnsafeAppealsServer interface {
	mustEmbedUnimplementedAppealsServer()
}

func RegisterAppealsServer(s grpc.ServiceRegistrar, srv AppealsServer) {
	// If the following call pancis, it indicates UnimplementedAppealsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Appeals_ServiceDesc, srv)
}

func _Appeals_ListAppeals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppealsServer).ListAppeals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Appeals_ListAppeals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppealsServer).ListAppeals(ctx, req.(*ListAppealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Appeals_CreateAppeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppealsServer).CreateAppeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Appeals_CreateAppeal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppealsServer).CreateAppeal(ctx, req.(*CreateAppealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Appeals_UpdateAppeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppealsServer).UpdateAppeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Appeals_UpdateAppeal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppealsServer).UpdateAppeal(ctx, req.(*UpdateAppealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Appeals_DeleteAppeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppealsServer).DeleteAppeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Appeals_DeleteAppeal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppealsServer).DeleteAppeal(ctx, req.(*DeleteAppealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Appeals_LocateAppeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocateAppealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppealsServer).LocateAppeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Appeals_LocateAppeal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppealsServer).LocateAppeal(ctx, req.(*LocateAppealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Appeals_ServiceDesc is the grpc.ServiceDesc for Appeals service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Appeals_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cases.Appeals",
	HandlerType: (*AppealsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAppeals",
			Handler:    _Appeals_ListAppeals_Handler,
		},
		{
			MethodName: "CreateAppeal",
			Handler:    _Appeals_CreateAppeal_Handler,
		},
		{
			MethodName: "UpdateAppeal",
			Handler:    _Appeals_UpdateAppeal_Handler,
		},
		{
			MethodName: "DeleteAppeal",
			Handler:    _Appeals_DeleteAppeal_Handler,
		},
		{
			MethodName: "LocateAppeal",
			Handler:    _Appeals_LocateAppeal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cases/appeal.proto",
}
