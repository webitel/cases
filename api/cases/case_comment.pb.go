// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: case_comment.proto

package cases

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/webitel/webitel-go-kit/cmd/protoc-gen-go-webitel/gen/go/proto/webitel"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/genproto/googleapis/api/visibility"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents a comment associated with a case.
type CaseComment struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Main identifier for read, update, and delete operations.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// entity tag representing id + ver
	Etag string `protobuf:"bytes,2,opt,name=etag,proto3" json:"etag,omitempty"`
	// Version number of the comment, used for concurrency control.
	Ver int32 `protobuf:"varint,3,opt,name=ver,proto3" json:"ver,omitempty"`
	// User who created the comment.
	CreatedBy *Lookup `protobuf:"bytes,4,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// Timestamp (in milliseconds) of when the comment was created.
	CreatedAt int64 `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// User who last updated the comment.
	UpdatedBy *Lookup `protobuf:"bytes,6,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// Timestamp (in milliseconds) of the last update.
	UpdatedAt int64 `protobuf:"varint,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// The content of the comment.
	Text string `protobuf:"bytes,8,opt,name=text,proto3" json:"text,omitempty"`
	// Indicates if the comment was edited; true if created_at < updated_at.
	Edited bool `protobuf:"varint,9,opt,name=edited,proto3" json:"edited,omitempty"`
	// Indicates if the comment can be edited by current user.
	CanEdit bool `protobuf:"varint,10,opt,name=can_edit,json=canEdit,proto3" json:"can_edit,omitempty"`
	// Contact-author of the comment.
	Author *Lookup `protobuf:"bytes,11,opt,name=author,proto3" json:"author,omitempty"`
	// Optional relation to the associated case.
	CaseId int64 `protobuf:"varint,12,opt,name=case_id,json=caseId,proto3" json:"case_id,omitempty"`
	// System field
	RoleIds       []int64 `protobuf:"varint,13,rep,packed,name=role_ids,json=roleIds,proto3" json:"role_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CaseComment) Reset() {
	*x = CaseComment{}
	mi := &file_case_comment_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CaseComment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaseComment) ProtoMessage() {}

func (x *CaseComment) ProtoReflect() protoreflect.Message {
	mi := &file_case_comment_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaseComment.ProtoReflect.Descriptor instead.
func (*CaseComment) Descriptor() ([]byte, []int) {
	return file_case_comment_proto_rawDescGZIP(), []int{0}
}

func (x *CaseComment) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CaseComment) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *CaseComment) GetVer() int32 {
	if x != nil {
		return x.Ver
	}
	return 0
}

func (x *CaseComment) GetCreatedBy() *Lookup {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *CaseComment) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *CaseComment) GetUpdatedBy() *Lookup {
	if x != nil {
		return x.UpdatedBy
	}
	return nil
}

func (x *CaseComment) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *CaseComment) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *CaseComment) GetEdited() bool {
	if x != nil {
		return x.Edited
	}
	return false
}

func (x *CaseComment) GetCanEdit() bool {
	if x != nil {
		return x.CanEdit
	}
	return false
}

func (x *CaseComment) GetAuthor() *Lookup {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *CaseComment) GetCaseId() int64 {
	if x != nil {
		return x.CaseId
	}
	return 0
}

func (x *CaseComment) GetRoleIds() []int64 {
	if x != nil {
		return x.RoleIds
	}
	return nil
}

// Contains a paginated list of comments.
type CaseCommentList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Current page number.
	Page int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	// Flag to indicate if more pages are available.
	Next bool `protobuf:"varint,2,opt,name=next,proto3" json:"next,omitempty"`
	// List of comments on the current page.
	Items         []*CaseComment `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CaseCommentList) Reset() {
	*x = CaseCommentList{}
	mi := &file_case_comment_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CaseCommentList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaseCommentList) ProtoMessage() {}

func (x *CaseCommentList) ProtoReflect() protoreflect.Message {
	mi := &file_case_comment_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaseCommentList.ProtoReflect.Descriptor instead.
func (*CaseCommentList) Descriptor() ([]byte, []int) {
	return file_case_comment_proto_rawDescGZIP(), []int{1}
}

func (x *CaseCommentList) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *CaseCommentList) GetNext() bool {
	if x != nil {
		return x.Next
	}
	return false
}

func (x *CaseCommentList) GetItems() []*CaseComment {
	if x != nil {
		return x.Items
	}
	return nil
}

// Input structure for creating or updating a case comment.
type InputCaseComment struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Identifier for the comment.
	Etag string `protobuf:"bytes,1,opt,name=etag,proto3" json:"etag,omitempty"`
	// Content of the comment.
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	// Optional creator / updater ID. Use this to explicitly set the case creator / updater instead of deriving it from the auth token.
	UserID        *Lookup `protobuf:"bytes,20,opt,name=userID,proto3" json:"userID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InputCaseComment) Reset() {
	*x = InputCaseComment{}
	mi := &file_case_comment_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InputCaseComment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputCaseComment) ProtoMessage() {}

func (x *InputCaseComment) ProtoReflect() protoreflect.Message {
	mi := &file_case_comment_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputCaseComment.ProtoReflect.Descriptor instead.
func (*InputCaseComment) Descriptor() ([]byte, []int) {
	return file_case_comment_proto_rawDescGZIP(), []int{2}
}

func (x *InputCaseComment) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *InputCaseComment) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *InputCaseComment) GetUserID() *Lookup {
	if x != nil {
		return x.UserID
	}
	return nil
}

// Request to locate a comment based on its etag.
type LocateCommentRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Identifier of the comment to retrieve.
	Etag string `protobuf:"bytes,1,opt,name=etag,proto3" json:"etag,omitempty"`
	// Specific fields to return for the comment.
	Fields        []string `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LocateCommentRequest) Reset() {
	*x = LocateCommentRequest{}
	mi := &file_case_comment_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocateCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocateCommentRequest) ProtoMessage() {}

func (x *LocateCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_case_comment_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocateCommentRequest.ProtoReflect.Descriptor instead.
func (*LocateCommentRequest) Descriptor() ([]byte, []int) {
	return file_case_comment_proto_rawDescGZIP(), []int{3}
}

func (x *LocateCommentRequest) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *LocateCommentRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

// Request to update a comment with specified data.
type UpdateCommentRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// JSON fields specified in front-end request (patch).
	XJsonMask []string `protobuf:"bytes,1,rep,name=x_json_mask,json=xJsonMask,proto3" json:"x_json_mask,omitempty"`
	// Fields to include in the response.
	Fields []string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	// Optional updating timestamp. If not set, will be set default(current) time.
	UpdatedAt int64 `protobuf:"varint,21,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Data for the comment to update.
	Input         *InputCaseComment `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateCommentRequest) Reset() {
	*x = UpdateCommentRequest{}
	mi := &file_case_comment_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCommentRequest) ProtoMessage() {}

func (x *UpdateCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_case_comment_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCommentRequest.ProtoReflect.Descriptor instead.
func (*UpdateCommentRequest) Descriptor() ([]byte, []int) {
	return file_case_comment_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateCommentRequest) GetXJsonMask() []string {
	if x != nil {
		return x.XJsonMask
	}
	return nil
}

func (x *UpdateCommentRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *UpdateCommentRequest) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *UpdateCommentRequest) GetInput() *InputCaseComment {
	if x != nil {
		return x.Input
	}
	return nil
}

// Request to delete a comment based on its etag.
type DeleteCommentRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Identifier of the comment to delete.
	Etag string `protobuf:"bytes,1,opt,name=etag,proto3" json:"etag,omitempty"`
	// Fields to return after deletion.
	Fields        []string `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCommentRequest) Reset() {
	*x = DeleteCommentRequest{}
	mi := &file_case_comment_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCommentRequest) ProtoMessage() {}

func (x *DeleteCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_case_comment_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCommentRequest.ProtoReflect.Descriptor instead.
func (*DeleteCommentRequest) Descriptor() ([]byte, []int) {
	return file_case_comment_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteCommentRequest) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *DeleteCommentRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

// Request to list comments for a specific case.
type ListCommentsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Page number for pagination.
	Page int32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	// Number of comments per page.
	Size int32 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	// Query string for search.
	Q string `protobuf:"bytes,3,opt,name=q,proto3" json:"q,omitempty"`
	// Array of requested id.
	Ids []string `protobuf:"bytes,4,rep,name=ids,proto3" json:"ids,omitempty"`
	// Sorting order.
	Sort string `protobuf:"bytes,5,opt,name=sort,proto3" json:"sort,omitempty"`
	// Fields to return for each comment.
	Fields []string `protobuf:"bytes,6,rep,name=fields,proto3" json:"fields,omitempty"`
	// Etag or ID of the case for which comments are requested.
	CaseEtag      string `protobuf:"bytes,9,opt,name=case_etag,json=caseEtag,proto3" json:"case_etag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCommentsRequest) Reset() {
	*x = ListCommentsRequest{}
	mi := &file_case_comment_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCommentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCommentsRequest) ProtoMessage() {}

func (x *ListCommentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_case_comment_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCommentsRequest.ProtoReflect.Descriptor instead.
func (*ListCommentsRequest) Descriptor() ([]byte, []int) {
	return file_case_comment_proto_rawDescGZIP(), []int{6}
}

func (x *ListCommentsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListCommentsRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ListCommentsRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *ListCommentsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ListCommentsRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *ListCommentsRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *ListCommentsRequest) GetCaseEtag() string {
	if x != nil {
		return x.CaseEtag
	}
	return ""
}

// Request to publish comment into a case.
type PublishCommentRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// JSON fields specified in the front-end request.
	XJsonMask []string `protobuf:"bytes,1,rep,name=x_json_mask,json=xJsonMask,proto3" json:"x_json_mask,omitempty"`
	// Result fields to include in the response.
	Fields []string `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
	// Etag or ID of the case to which comments belong.
	CaseEtag string `protobuf:"bytes,3,opt,name=case_etag,json=caseEtag,proto3" json:"case_etag,omitempty"`
	// Optional creation timestamp. If not set, will be set default(current) time.
	CreatedAt int64 `protobuf:"varint,21,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Comment to publish.
	Input         *InputCaseComment `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishCommentRequest) Reset() {
	*x = PublishCommentRequest{}
	mi := &file_case_comment_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishCommentRequest) ProtoMessage() {}

func (x *PublishCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_case_comment_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishCommentRequest.ProtoReflect.Descriptor instead.
func (*PublishCommentRequest) Descriptor() ([]byte, []int) {
	return file_case_comment_proto_rawDescGZIP(), []int{7}
}

func (x *PublishCommentRequest) GetXJsonMask() []string {
	if x != nil {
		return x.XJsonMask
	}
	return nil
}

func (x *PublishCommentRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *PublishCommentRequest) GetCaseEtag() string {
	if x != nil {
		return x.CaseEtag
	}
	return ""
}

func (x *PublishCommentRequest) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *PublishCommentRequest) GetInput() *InputCaseComment {
	if x != nil {
		return x.Input
	}
	return nil
}

var File_case_comment_proto protoreflect.FileDescriptor

const file_case_comment_proto_rawDesc = "" +
	"\n" +
	"\x12case_comment.proto\x12\rwebitel.cases\x1a\rgeneral.proto\x1a\x1bgoogle/api/visibility.proto\x1a\x1cgoogle/api/annotations.proto\x1a.protoc-gen-openapiv2/options/annotations.proto\x1a\x1aproto/webitel/option.proto\"\x85\x03\n" +
	"\vCaseComment\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x12\n" +
	"\x04etag\x18\x02 \x01(\tR\x04etag\x12\x10\n" +
	"\x03ver\x18\x03 \x01(\x05R\x03ver\x12.\n" +
	"\n" +
	"created_by\x18\x04 \x01(\v2\x0f.general.LookupR\tcreatedBy\x12\x1d\n" +
	"\n" +
	"created_at\x18\x05 \x01(\x03R\tcreatedAt\x12.\n" +
	"\n" +
	"updated_by\x18\x06 \x01(\v2\x0f.general.LookupR\tupdatedBy\x12\x1d\n" +
	"\n" +
	"updated_at\x18\a \x01(\x03R\tupdatedAt\x12\x12\n" +
	"\x04text\x18\b \x01(\tR\x04text\x12\x16\n" +
	"\x06edited\x18\t \x01(\bR\x06edited\x12\x19\n" +
	"\bcan_edit\x18\n" +
	" \x01(\bR\acanEdit\x12'\n" +
	"\x06author\x18\v \x01(\v2\x0f.general.LookupR\x06author\x12\x17\n" +
	"\acase_id\x18\f \x01(\x03R\x06caseId\x12\x19\n" +
	"\brole_ids\x18\r \x03(\x03R\aroleIds\"k\n" +
	"\x0fCaseCommentList\x12\x12\n" +
	"\x04page\x18\x01 \x01(\x03R\x04page\x12\x12\n" +
	"\x04next\x18\x02 \x01(\bR\x04next\x120\n" +
	"\x05items\x18\x03 \x03(\v2\x1a.webitel.cases.CaseCommentR\x05items\"\x83\x01\n" +
	"\x10InputCaseComment\x12\x12\n" +
	"\x04etag\x18\x01 \x01(\tR\x04etag\x12\x12\n" +
	"\x04text\x18\x02 \x01(\tR\x04text\x12'\n" +
	"\x06userID\x18\x14 \x01(\v2\x0f.general.LookupR\x06userID:\x1e\x92A\x1b2\x19{\"text\":\"My new comment\"}\"B\n" +
	"\x14LocateCommentRequest\x12\x12\n" +
	"\x04etag\x18\x01 \x01(\tR\x04etag\x12\x16\n" +
	"\x06fields\x18\x02 \x03(\tR\x06fields\"\xbf\x01\n" +
	"\x14UpdateCommentRequest\x129\n" +
	"\vx_json_mask\x18\x01 \x03(\tB\x19\x92A\a@\x01\x8a\x01\x02^$\xfa\xd2\xe4\x93\x02\t\x12\aPREVIEWR\txJsonMask\x12\x16\n" +
	"\x06fields\x18\x03 \x03(\tR\x06fields\x12\x1d\n" +
	"\n" +
	"updated_at\x18\x15 \x01(\x03R\tupdatedAt\x125\n" +
	"\x05input\x18\x04 \x01(\v2\x1f.webitel.cases.InputCaseCommentR\x05input\"B\n" +
	"\x14DeleteCommentRequest\x12\x12\n" +
	"\x04etag\x18\x01 \x01(\tR\x04etag\x12\x16\n" +
	"\x06fields\x18\x02 \x03(\tR\x06fields\"\xa6\x01\n" +
	"\x13ListCommentsRequest\x12\x12\n" +
	"\x04page\x18\x01 \x01(\x05R\x04page\x12\x12\n" +
	"\x04size\x18\x02 \x01(\x05R\x04size\x12\f\n" +
	"\x01q\x18\x03 \x01(\tR\x01q\x12\x10\n" +
	"\x03ids\x18\x04 \x03(\tR\x03ids\x12\x12\n" +
	"\x04sort\x18\x05 \x01(\tR\x04sort\x12\x16\n" +
	"\x06fields\x18\x06 \x03(\tR\x06fields\x12\x1b\n" +
	"\tcase_etag\x18\t \x01(\tR\bcaseEtag\"\xdd\x01\n" +
	"\x15PublishCommentRequest\x129\n" +
	"\vx_json_mask\x18\x01 \x03(\tB\x19\x92A\a@\x01\x8a\x01\x02^$\xfa\xd2\xe4\x93\x02\t\x12\aPREVIEWR\txJsonMask\x12\x16\n" +
	"\x06fields\x18\x02 \x03(\tR\x06fields\x12\x1b\n" +
	"\tcase_etag\x18\x03 \x01(\tR\bcaseEtag\x12\x1d\n" +
	"\n" +
	"created_at\x18\x15 \x01(\x03R\tcreatedAt\x125\n" +
	"\x05input\x18\x04 \x01(\v2\x1f.webitel.cases.InputCaseCommentR\x05input2\xa7\a\n" +
	"\fCaseComments\x12\xa0\x01\n" +
	"\rLocateComment\x12#.webitel.cases.LocateCommentRequest\x1a\x1a.webitel.cases.CaseComment\"N\x92A)\x12'Retrieve a specific comment by its etag\x90\xb5\x18\x01\x82\xd3\xe4\x93\x02\x18\x12\x16/cases/comments/{etag}\x12\xd3\x01\n" +
	"\rUpdateComment\x12#.webitel.cases.UpdateCommentRequest\x1a\x1a.webitel.cases.CaseComment\"\x80\x01\x92A'\x12%Update a specific comment by its etag\x90\xb5\x18\x02\x82\xd3\xe4\x93\x02L:\x05inputZ%:\x05input2\x1c/cases/comments/{input.etag}\x1a\x1c/cases/comments/{input.etag}\x12\x9e\x01\n" +
	"\rDeleteComment\x12#.webitel.cases.DeleteCommentRequest\x1a\x1a.webitel.cases.CaseComment\"L\x92A'\x12%Delete a specific comment by its etag\x90\xb5\x18\x03\x82\xd3\xe4\x93\x02\x18*\x16/cases/comments/{etag}\x12\xbb\x01\n" +
	"\fListComments\x12\".webitel.cases.ListCommentsRequest\x1a\x1e.webitel.cases.CaseCommentList\"g\x92A=\x12;Retrieve a list of comments associated with a specific case\x90\xb5\x18\x01\x82\xd3\xe4\x93\x02\x1d\x12\x1b/cases/{case_etag}/comments\x12\xab\x01\n" +
	"\x0ePublishComment\x12$.webitel.cases.PublishCommentRequest\x1a\x1a.webitel.cases.CaseComment\"W\x92A&\x12$Publish comment into a specific case\x90\xb5\x18\x00\x82\xd3\xe4\x93\x02$:\x05input\"\x1b/cases/{case_etag}/comments\x1a\x11\x8a\xb5\x18\rcase_commentsB\xa4\x01\n" +
	"\x11com.webitel.casesB\x10CaseCommentProtoP\x01Z(github.com/webitel/cases/api/cases;cases\xa2\x02\x03WCX\xaa\x02\rWebitel.Cases\xca\x02\rWebitel\\Cases\xe2\x02\x19Webitel\\Cases\\GPBMetadata\xea\x02\x0eWebitel::Casesb\x06proto3"

var (
	file_case_comment_proto_rawDescOnce sync.Once
	file_case_comment_proto_rawDescData []byte
)

func file_case_comment_proto_rawDescGZIP() []byte {
	file_case_comment_proto_rawDescOnce.Do(func() {
		file_case_comment_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_case_comment_proto_rawDesc), len(file_case_comment_proto_rawDesc)))
	})
	return file_case_comment_proto_rawDescData
}

var file_case_comment_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_case_comment_proto_goTypes = []any{
	(*CaseComment)(nil),           // 0: webitel.cases.CaseComment
	(*CaseCommentList)(nil),       // 1: webitel.cases.CaseCommentList
	(*InputCaseComment)(nil),      // 2: webitel.cases.InputCaseComment
	(*LocateCommentRequest)(nil),  // 3: webitel.cases.LocateCommentRequest
	(*UpdateCommentRequest)(nil),  // 4: webitel.cases.UpdateCommentRequest
	(*DeleteCommentRequest)(nil),  // 5: webitel.cases.DeleteCommentRequest
	(*ListCommentsRequest)(nil),   // 6: webitel.cases.ListCommentsRequest
	(*PublishCommentRequest)(nil), // 7: webitel.cases.PublishCommentRequest
	(*Lookup)(nil),                // 8: general.Lookup
}
var file_case_comment_proto_depIdxs = []int32{
	8,  // 0: webitel.cases.CaseComment.created_by:type_name -> general.Lookup
	8,  // 1: webitel.cases.CaseComment.updated_by:type_name -> general.Lookup
	8,  // 2: webitel.cases.CaseComment.author:type_name -> general.Lookup
	0,  // 3: webitel.cases.CaseCommentList.items:type_name -> webitel.cases.CaseComment
	8,  // 4: webitel.cases.InputCaseComment.userID:type_name -> general.Lookup
	2,  // 5: webitel.cases.UpdateCommentRequest.input:type_name -> webitel.cases.InputCaseComment
	2,  // 6: webitel.cases.PublishCommentRequest.input:type_name -> webitel.cases.InputCaseComment
	3,  // 7: webitel.cases.CaseComments.LocateComment:input_type -> webitel.cases.LocateCommentRequest
	4,  // 8: webitel.cases.CaseComments.UpdateComment:input_type -> webitel.cases.UpdateCommentRequest
	5,  // 9: webitel.cases.CaseComments.DeleteComment:input_type -> webitel.cases.DeleteCommentRequest
	6,  // 10: webitel.cases.CaseComments.ListComments:input_type -> webitel.cases.ListCommentsRequest
	7,  // 11: webitel.cases.CaseComments.PublishComment:input_type -> webitel.cases.PublishCommentRequest
	0,  // 12: webitel.cases.CaseComments.LocateComment:output_type -> webitel.cases.CaseComment
	0,  // 13: webitel.cases.CaseComments.UpdateComment:output_type -> webitel.cases.CaseComment
	0,  // 14: webitel.cases.CaseComments.DeleteComment:output_type -> webitel.cases.CaseComment
	1,  // 15: webitel.cases.CaseComments.ListComments:output_type -> webitel.cases.CaseCommentList
	0,  // 16: webitel.cases.CaseComments.PublishComment:output_type -> webitel.cases.CaseComment
	12, // [12:17] is the sub-list for method output_type
	7,  // [7:12] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_case_comment_proto_init() }
func file_case_comment_proto_init() {
	if File_case_comment_proto != nil {
		return
	}
	file_general_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_case_comment_proto_rawDesc), len(file_case_comment_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_case_comment_proto_goTypes,
		DependencyIndexes: file_case_comment_proto_depIdxs,
		MessageInfos:      file_case_comment_proto_msgTypes,
	}.Build()
	File_case_comment_proto = out.File
	file_case_comment_proto_goTypes = nil
	file_case_comment_proto_depIdxs = nil
}
