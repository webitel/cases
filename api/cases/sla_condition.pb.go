// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: cases/sla_condition.proto

package cases

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/genproto/googleapis/api/visibility"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SLACondition message represents an SLACondition entity with metadata
type SLACondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the SLACondition
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the SLACondition - required
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Priorities associated with the SLACondition - fetched as Lookup entities [ Priority name + ID ]
	Priorities []*Lookup `protobuf:"bytes,3,rep,name=priorities,proto3" json:"priorities,omitempty"`
	// Reaction time in hours and minutes - required
	ReactionTimeHours   int32 `protobuf:"varint,4,opt,name=reaction_time_hours,json=reactionTimeHours,proto3" json:"reaction_time_hours,omitempty"`
	ReactionTimeMinutes int32 `protobuf:"varint,5,opt,name=reaction_time_minutes,json=reactionTimeMinutes,proto3" json:"reaction_time_minutes,omitempty"`
	// Resolution time in hours and minutes - required
	ResolutionTimeHours   int32 `protobuf:"varint,6,opt,name=resolution_time_hours,json=resolutionTimeHours,proto3" json:"resolution_time_hours,omitempty"`
	ResolutionTimeMinutes int32 `protobuf:"varint,7,opt,name=resolution_time_minutes,json=resolutionTimeMinutes,proto3" json:"resolution_time_minutes,omitempty"`
	// SLA ID associated with the SLACondition
	SlaId int64 `protobuf:"varint,8,opt,name=sla_id,json=slaId,proto3" json:"sla_id,omitempty"`
	// CreatedAt timestamp of the SLACondition
	CreatedAt int64 `protobuf:"varint,20,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// UpdatedAt timestamp of the SLACondition
	UpdatedAt int64 `protobuf:"varint,21,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// CreatedBy user of the SLACondition
	CreatedBy *Lookup `protobuf:"bytes,22,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// UpdatedBy user of the SLACondition
	UpdatedBy *Lookup `protobuf:"bytes,23,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
}

func (x *SLACondition) Reset() {
	*x = SLACondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cases_sla_condition_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLACondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLACondition) ProtoMessage() {}

func (x *SLACondition) ProtoReflect() protoreflect.Message {
	mi := &file_cases_sla_condition_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLACondition.ProtoReflect.Descriptor instead.
func (*SLACondition) Descriptor() ([]byte, []int) {
	return file_cases_sla_condition_proto_rawDescGZIP(), []int{0}
}

func (x *SLACondition) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SLACondition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SLACondition) GetPriorities() []*Lookup {
	if x != nil {
		return x.Priorities
	}
	return nil
}

func (x *SLACondition) GetReactionTimeHours() int32 {
	if x != nil {
		return x.ReactionTimeHours
	}
	return 0
}

func (x *SLACondition) GetReactionTimeMinutes() int32 {
	if x != nil {
		return x.ReactionTimeMinutes
	}
	return 0
}

func (x *SLACondition) GetResolutionTimeHours() int32 {
	if x != nil {
		return x.ResolutionTimeHours
	}
	return 0
}

func (x *SLACondition) GetResolutionTimeMinutes() int32 {
	if x != nil {
		return x.ResolutionTimeMinutes
	}
	return 0
}

func (x *SLACondition) GetSlaId() int64 {
	if x != nil {
		return x.SlaId
	}
	return 0
}

func (x *SLACondition) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *SLACondition) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *SLACondition) GetCreatedBy() *Lookup {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *SLACondition) GetUpdatedBy() *Lookup {
	if x != nil {
		return x.UpdatedBy
	}
	return nil
}

// InputSLACondition message for inputting SLACondition data
type InputSLACondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// List of priority IDs for creation
	Priorities            []int64 `protobuf:"varint,3,rep,packed,name=priorities,proto3" json:"priorities,omitempty"`
	ReactionTimeHours     int32   `protobuf:"varint,4,opt,name=reaction_time_hours,json=reactionTimeHours,proto3" json:"reaction_time_hours,omitempty"`
	ReactionTimeMinutes   int32   `protobuf:"varint,5,opt,name=reaction_time_minutes,json=reactionTimeMinutes,proto3" json:"reaction_time_minutes,omitempty"`
	ResolutionTimeHours   int32   `protobuf:"varint,6,opt,name=resolution_time_hours,json=resolutionTimeHours,proto3" json:"resolution_time_hours,omitempty"`
	ResolutionTimeMinutes int32   `protobuf:"varint,7,opt,name=resolution_time_minutes,json=resolutionTimeMinutes,proto3" json:"resolution_time_minutes,omitempty"`
	SlaId                 int64   `protobuf:"varint,8,opt,name=sla_id,json=slaId,proto3" json:"sla_id,omitempty"`
}

func (x *InputSLACondition) Reset() {
	*x = InputSLACondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cases_sla_condition_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputSLACondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputSLACondition) ProtoMessage() {}

func (x *InputSLACondition) ProtoReflect() protoreflect.Message {
	mi := &file_cases_sla_condition_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputSLACondition.ProtoReflect.Descriptor instead.
func (*InputSLACondition) Descriptor() ([]byte, []int) {
	return file_cases_sla_condition_proto_rawDescGZIP(), []int{1}
}

func (x *InputSLACondition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InputSLACondition) GetPriorities() []int64 {
	if x != nil {
		return x.Priorities
	}
	return nil
}

func (x *InputSLACondition) GetReactionTimeHours() int32 {
	if x != nil {
		return x.ReactionTimeHours
	}
	return 0
}

func (x *InputSLACondition) GetReactionTimeMinutes() int32 {
	if x != nil {
		return x.ReactionTimeMinutes
	}
	return 0
}

func (x *InputSLACondition) GetResolutionTimeHours() int32 {
	if x != nil {
		return x.ResolutionTimeHours
	}
	return 0
}

func (x *InputSLACondition) GetResolutionTimeMinutes() int32 {
	if x != nil {
		return x.ResolutionTimeMinutes
	}
	return 0
}

func (x *InputSLACondition) GetSlaId() int64 {
	if x != nil {
		return x.SlaId
	}
	return 0
}

// SLAConditionList message contains a list of SLACondition items with pagination
type SLAConditionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page  int32           `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Next  bool            `protobuf:"varint,2,opt,name=next,proto3" json:"next,omitempty"`
	Items []*SLACondition `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *SLAConditionList) Reset() {
	*x = SLAConditionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cases_sla_condition_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLAConditionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLAConditionList) ProtoMessage() {}

func (x *SLAConditionList) ProtoReflect() protoreflect.Message {
	mi := &file_cases_sla_condition_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLAConditionList.ProtoReflect.Descriptor instead.
func (*SLAConditionList) Descriptor() ([]byte, []int) {
	return file_cases_sla_condition_proto_rawDescGZIP(), []int{2}
}

func (x *SLAConditionList) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SLAConditionList) GetNext() bool {
	if x != nil {
		return x.Next
	}
	return false
}

func (x *SLAConditionList) GetItems() []*SLACondition {
	if x != nil {
		return x.Items
	}
	return nil
}

// CreateSLAConditionRequest message for creating a new SLACondition
type CreateSLAConditionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// List of priority IDs for creation [FROM Priority Dictionary ]
	Priorities            []int64 `protobuf:"varint,3,rep,packed,name=priorities,proto3" json:"priorities,omitempty"`
	ReactionTimeHours     int32   `protobuf:"varint,4,opt,name=reaction_time_hours,json=reactionTimeHours,proto3" json:"reaction_time_hours,omitempty"`
	ReactionTimeMinutes   int32   `protobuf:"varint,5,opt,name=reaction_time_minutes,json=reactionTimeMinutes,proto3" json:"reaction_time_minutes,omitempty"`
	ResolutionTimeHours   int32   `protobuf:"varint,6,opt,name=resolution_time_hours,json=resolutionTimeHours,proto3" json:"resolution_time_hours,omitempty"`
	ResolutionTimeMinutes int32   `protobuf:"varint,7,opt,name=resolution_time_minutes,json=resolutionTimeMinutes,proto3" json:"resolution_time_minutes,omitempty"`
	SlaId                 int64   `protobuf:"varint,8,opt,name=sla_id,json=slaId,proto3" json:"sla_id,omitempty"`
}

func (x *CreateSLAConditionRequest) Reset() {
	*x = CreateSLAConditionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cases_sla_condition_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSLAConditionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSLAConditionRequest) ProtoMessage() {}

func (x *CreateSLAConditionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cases_sla_condition_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSLAConditionRequest.ProtoReflect.Descriptor instead.
func (*CreateSLAConditionRequest) Descriptor() ([]byte, []int) {
	return file_cases_sla_condition_proto_rawDescGZIP(), []int{3}
}

func (x *CreateSLAConditionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateSLAConditionRequest) GetPriorities() []int64 {
	if x != nil {
		return x.Priorities
	}
	return nil
}

func (x *CreateSLAConditionRequest) GetReactionTimeHours() int32 {
	if x != nil {
		return x.ReactionTimeHours
	}
	return 0
}

func (x *CreateSLAConditionRequest) GetReactionTimeMinutes() int32 {
	if x != nil {
		return x.ReactionTimeMinutes
	}
	return 0
}

func (x *CreateSLAConditionRequest) GetResolutionTimeHours() int32 {
	if x != nil {
		return x.ResolutionTimeHours
	}
	return 0
}

func (x *CreateSLAConditionRequest) GetResolutionTimeMinutes() int32 {
	if x != nil {
		return x.ResolutionTimeMinutes
	}
	return 0
}

func (x *CreateSLAConditionRequest) GetSlaId() int64 {
	if x != nil {
		return x.SlaId
	}
	return 0
}

// UpdateSLAConditionRequest message for updating an existing SLACondition
type UpdateSLAConditionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SlaId int64              `protobuf:"varint,2,opt,name=sla_id,json=slaId,proto3" json:"sla_id,omitempty"`
	Input *InputSLACondition `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
	// ---- JSON PATCH fields mask ----
	// List of JPath fields specified in body(input).
	XJsonMask []string `protobuf:"bytes,4,rep,name=x_json_mask,json=xJsonMask,proto3" json:"x_json_mask,omitempty"`
}

func (x *UpdateSLAConditionRequest) Reset() {
	*x = UpdateSLAConditionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cases_sla_condition_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSLAConditionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSLAConditionRequest) ProtoMessage() {}

func (x *UpdateSLAConditionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cases_sla_condition_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSLAConditionRequest.ProtoReflect.Descriptor instead.
func (*UpdateSLAConditionRequest) Descriptor() ([]byte, []int) {
	return file_cases_sla_condition_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateSLAConditionRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateSLAConditionRequest) GetSlaId() int64 {
	if x != nil {
		return x.SlaId
	}
	return 0
}

func (x *UpdateSLAConditionRequest) GetInput() *InputSLACondition {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *UpdateSLAConditionRequest) GetXJsonMask() []string {
	if x != nil {
		return x.XJsonMask
	}
	return nil
}

// DeleteSLAConditionRequest message for deleting an existing SLACondition
type DeleteSLAConditionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlaId int64 `protobuf:"varint,1,opt,name=sla_id,json=slaId,proto3" json:"sla_id,omitempty"`
	Id    int64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteSLAConditionRequest) Reset() {
	*x = DeleteSLAConditionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cases_sla_condition_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSLAConditionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSLAConditionRequest) ProtoMessage() {}

func (x *DeleteSLAConditionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cases_sla_condition_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSLAConditionRequest.ProtoReflect.Descriptor instead.
func (*DeleteSLAConditionRequest) Descriptor() ([]byte, []int) {
	return file_cases_sla_condition_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteSLAConditionRequest) GetSlaId() int64 {
	if x != nil {
		return x.SlaId
	}
	return 0
}

func (x *DeleteSLAConditionRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// ListSLAConditionRequest message for listing or searching SLAConditions
type ListSLAConditionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Page number of result dataset records. offset = (page*size)
	Page int32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	// Size count of records on result page. limit = (size++)
	Size int32 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	// Fields to be retrieved as a result.
	Fields []string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	// Sort the result according to fields.
	Sort []string `protobuf:"bytes,4,rep,name=sort,proto3" json:"sort,omitempty"`
	// Filter by unique IDs.
	Id []int64 `protobuf:"varint,5,rep,packed,name=id,proto3" json:"id,omitempty"`
	// Search term: SLACondition name;
	// `?` - matches any one character
	// `*` - matches 0 or more characters
	Q string `protobuf:"bytes,6,opt,name=q,proto3" json:"q,omitempty"`
	// Filter by SLACondition name.
	Name string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	// Filter by SLACondition Id.
	SlaConditionId int64 `protobuf:"varint,8,opt,name=sla_condition_id,json=slaConditionId,proto3" json:"sla_condition_id,omitempty"`
	// Filter by SLA Id
	SlaId int64 `protobuf:"varint,9,opt,name=sla_id,json=slaId,proto3" json:"sla_id,omitempty"`
}

func (x *ListSLAConditionRequest) Reset() {
	*x = ListSLAConditionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cases_sla_condition_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSLAConditionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSLAConditionRequest) ProtoMessage() {}

func (x *ListSLAConditionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cases_sla_condition_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSLAConditionRequest.ProtoReflect.Descriptor instead.
func (*ListSLAConditionRequest) Descriptor() ([]byte, []int) {
	return file_cases_sla_condition_proto_rawDescGZIP(), []int{6}
}

func (x *ListSLAConditionRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListSLAConditionRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ListSLAConditionRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *ListSLAConditionRequest) GetSort() []string {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *ListSLAConditionRequest) GetId() []int64 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ListSLAConditionRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *ListSLAConditionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListSLAConditionRequest) GetSlaConditionId() int64 {
	if x != nil {
		return x.SlaConditionId
	}
	return 0
}

func (x *ListSLAConditionRequest) GetSlaId() int64 {
	if x != nil {
		return x.SlaId
	}
	return 0
}

// LocateSLAConditionRequest message for locating a specific SLACondition by ID
type LocateSLAConditionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlaId  int64    `protobuf:"varint,1,opt,name=sla_id,json=slaId,proto3" json:"sla_id,omitempty"`
	Id     int64    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Fields []string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *LocateSLAConditionRequest) Reset() {
	*x = LocateSLAConditionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cases_sla_condition_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocateSLAConditionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocateSLAConditionRequest) ProtoMessage() {}

func (x *LocateSLAConditionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cases_sla_condition_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocateSLAConditionRequest.ProtoReflect.Descriptor instead.
func (*LocateSLAConditionRequest) Descriptor() ([]byte, []int) {
	return file_cases_sla_condition_proto_rawDescGZIP(), []int{7}
}

func (x *LocateSLAConditionRequest) GetSlaId() int64 {
	if x != nil {
		return x.SlaId
	}
	return 0
}

func (x *LocateSLAConditionRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LocateSLAConditionRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

// LocateSLAConditionResponse message contains a single SLACondition entity
type LocateSLAConditionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlaCondition *SLACondition `protobuf:"bytes,1,opt,name=sla_condition,json=slaCondition,proto3" json:"sla_condition,omitempty"`
}

func (x *LocateSLAConditionResponse) Reset() {
	*x = LocateSLAConditionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cases_sla_condition_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocateSLAConditionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocateSLAConditionResponse) ProtoMessage() {}

func (x *LocateSLAConditionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cases_sla_condition_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocateSLAConditionResponse.ProtoReflect.Descriptor instead.
func (*LocateSLAConditionResponse) Descriptor() ([]byte, []int) {
	return file_cases_sla_condition_proto_rawDescGZIP(), []int{8}
}

func (x *LocateSLAConditionResponse) GetSlaCondition() *SLACondition {
	if x != nil {
		return x.SlaCondition
	}
	return nil
}

var File_cases_sla_condition_proto protoreflect.FileDescriptor

var file_cases_sla_condition_proto_rawDesc = []byte{
	0x0a, 0x19, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x73, 0x6c, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x77, 0x65, 0x62,
	0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x1a, 0x12, 0x63, 0x61, 0x73, 0x65,
	0x73, 0x2f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfa, 0x03, 0x0a, 0x0c, 0x53, 0x4c,
	0x41, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35,
	0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73,
	0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x68, 0x6f, 0x75,
	0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x36, 0x0a,
	0x17, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x6c, 0x61, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x6c, 0x61, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x4c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x12, 0x34, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63,
	0x61, 0x73, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0xae, 0x02, 0x0a, 0x11, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x53, 0x4c, 0x41, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x72,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x73,
	0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x13, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x15, 0x0a, 0x06, 0x73, 0x6c, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x73, 0x6c, 0x61, 0x49, 0x64, 0x22, 0x6d, 0x0a, 0x10, 0x53, 0x4c, 0x41, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6e,
	0x65, 0x78, 0x74, 0x12, 0x31, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73,
	0x65, 0x73, 0x2e, 0x53, 0x4c, 0x41, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xbb, 0x03, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x4c, 0x41, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x73,
	0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x15, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x6c, 0x61, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x6c, 0x61, 0x49, 0x64, 0x3a,
	0x82, 0x01, 0x92, 0x41, 0x7f, 0x0a, 0x7d, 0xd2, 0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01,
	0x0a, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0xd2, 0x01, 0x13, 0x72, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x68, 0x6f, 0x75, 0x72,
	0x73, 0xd2, 0x01, 0x15, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0xd2, 0x01, 0x15, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x68, 0x6f, 0x75, 0x72,
	0x73, 0xd2, 0x01, 0x17, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0xd2, 0x01, 0x06, 0x73, 0x6c,
	0x61, 0x5f, 0x69, 0x64, 0x22, 0xc1, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x4c, 0x41, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x6c, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x73, 0x6c, 0x61, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74,
	0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x4c,
	0x41, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x39, 0x0a, 0x0b, 0x78, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x07, 0x40, 0x01, 0x8a, 0x01, 0x02,
	0x5e, 0x24, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45,
	0x57, 0x52, 0x09, 0x78, 0x4a, 0x73, 0x6f, 0x6e, 0x4d, 0x61, 0x73, 0x6b, 0x3a, 0x0a, 0x92, 0x41,
	0x07, 0x0a, 0x05, 0xd2, 0x01, 0x02, 0x69, 0x64, 0x22, 0x5c, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x4c, 0x41, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x6c, 0x61, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x6c, 0x61, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x18, 0x92, 0x41,
	0x15, 0x0a, 0x13, 0xd2, 0x01, 0x10, 0x73, 0x6c, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0xe0, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x4c, 0x41, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x01, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6c, 0x61, 0x5f,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x73, 0x6c, 0x61, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x6c, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x73, 0x6c, 0x61, 0x49, 0x64, 0x22, 0x5a, 0x0a, 0x19, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x53, 0x4c, 0x41, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x6c, 0x61, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x6c, 0x61, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x5e, 0x0a, 0x1a, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x53,
	0x4c, 0x41, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x6c, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x65, 0x62,
	0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x53, 0x4c, 0x41, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x6c, 0x61, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0xc2, 0x07, 0x0a, 0x0d, 0x53, 0x4c, 0x41, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xca, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x4c, 0x41, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x2e,
	0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x4c, 0x41, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e,
	0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x53, 0x4c, 0x41, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x6c, 0x92, 0x41, 0x44, 0x12, 0x42, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20,
	0x53, 0x4c, 0x41, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x72,
	0x20, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x53, 0x4c, 0x41, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x73, 0x6c, 0x61, 0x73, 0x2f, 0x7b, 0x73, 0x6c,
	0x61, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x6c, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0xa2, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x4c, 0x41, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x77, 0x65,
	0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x4c, 0x41, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e,
	0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x53, 0x4c, 0x41, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x45, 0x92, 0x41, 0x1b, 0x12, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20,
	0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x53, 0x4c, 0x41, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x2f, 0x73, 0x6c,
	0x61, 0x73, 0x2f, 0x7b, 0x73, 0x6c, 0x61, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x6c, 0x61, 0x5f,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xe0, 0x01, 0x0a, 0x12, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x4c, 0x41, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x28, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x4c, 0x41, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x77, 0x65, 0x62,
	0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x53, 0x4c, 0x41, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x82, 0x01, 0x92, 0x41, 0x21, 0x12, 0x1f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x20, 0x53, 0x4c, 0x41, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x58, 0x3a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5a, 0x2b, 0x3a, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x32, 0x22, 0x2f, 0x73, 0x6c, 0x61, 0x73, 0x2f, 0x7b, 0x73, 0x6c, 0x61,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x6c, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x1a, 0x22, 0x2f, 0x73, 0x6c, 0x61, 0x73, 0x2f,
	0x7b, 0x73, 0x6c, 0x61, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x6c, 0x61, 0x5f, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xa2, 0x01, 0x0a,
	0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x4c, 0x41, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61,
	0x73, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x4c, 0x41, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x53, 0x4c,
	0x41, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x45, 0x92, 0x41, 0x18, 0x12,
	0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x53, 0x4c, 0x41, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x2a, 0x22, 0x2f,
	0x73, 0x6c, 0x61, 0x73, 0x2f, 0x7b, 0x73, 0x6c, 0x61, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x6c,
	0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x12, 0xb6, 0x01, 0x0a, 0x12, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x53, 0x4c, 0x41, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74,
	0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x53,
	0x4c, 0x41, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73,
	0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x53, 0x4c, 0x41, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b, 0x92,
	0x41, 0x1e, 0x12, 0x1c, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x53, 0x4c,
	0x41, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x62, 0x79, 0x20, 0x49, 0x44,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x73, 0x6c, 0x61, 0x73, 0x2f, 0x7b, 0x73,
	0x6c, 0x61, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x6c, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x42, 0x2a, 0x5a, 0x28, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c,
	0x2f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x61, 0x73, 0x65, 0x73,
	0x3b, 0x63, 0x61, 0x73, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cases_sla_condition_proto_rawDescOnce sync.Once
	file_cases_sla_condition_proto_rawDescData = file_cases_sla_condition_proto_rawDesc
)

func file_cases_sla_condition_proto_rawDescGZIP() []byte {
	file_cases_sla_condition_proto_rawDescOnce.Do(func() {
		file_cases_sla_condition_proto_rawDescData = protoimpl.X.CompressGZIP(file_cases_sla_condition_proto_rawDescData)
	})
	return file_cases_sla_condition_proto_rawDescData
}

var file_cases_sla_condition_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_cases_sla_condition_proto_goTypes = []any{
	(*SLACondition)(nil),               // 0: webitel.cases.SLACondition
	(*InputSLACondition)(nil),          // 1: webitel.cases.InputSLACondition
	(*SLAConditionList)(nil),           // 2: webitel.cases.SLAConditionList
	(*CreateSLAConditionRequest)(nil),  // 3: webitel.cases.CreateSLAConditionRequest
	(*UpdateSLAConditionRequest)(nil),  // 4: webitel.cases.UpdateSLAConditionRequest
	(*DeleteSLAConditionRequest)(nil),  // 5: webitel.cases.DeleteSLAConditionRequest
	(*ListSLAConditionRequest)(nil),    // 6: webitel.cases.ListSLAConditionRequest
	(*LocateSLAConditionRequest)(nil),  // 7: webitel.cases.LocateSLAConditionRequest
	(*LocateSLAConditionResponse)(nil), // 8: webitel.cases.LocateSLAConditionResponse
	(*Lookup)(nil),                     // 9: webitel.cases.Lookup
}
var file_cases_sla_condition_proto_depIdxs = []int32{
	9,  // 0: webitel.cases.SLACondition.priorities:type_name -> webitel.cases.Lookup
	9,  // 1: webitel.cases.SLACondition.created_by:type_name -> webitel.cases.Lookup
	9,  // 2: webitel.cases.SLACondition.updated_by:type_name -> webitel.cases.Lookup
	0,  // 3: webitel.cases.SLAConditionList.items:type_name -> webitel.cases.SLACondition
	1,  // 4: webitel.cases.UpdateSLAConditionRequest.input:type_name -> webitel.cases.InputSLACondition
	0,  // 5: webitel.cases.LocateSLAConditionResponse.sla_condition:type_name -> webitel.cases.SLACondition
	6,  // 6: webitel.cases.SLAConditions.ListSLAConditions:input_type -> webitel.cases.ListSLAConditionRequest
	3,  // 7: webitel.cases.SLAConditions.CreateSLACondition:input_type -> webitel.cases.CreateSLAConditionRequest
	4,  // 8: webitel.cases.SLAConditions.UpdateSLACondition:input_type -> webitel.cases.UpdateSLAConditionRequest
	5,  // 9: webitel.cases.SLAConditions.DeleteSLACondition:input_type -> webitel.cases.DeleteSLAConditionRequest
	7,  // 10: webitel.cases.SLAConditions.LocateSLACondition:input_type -> webitel.cases.LocateSLAConditionRequest
	2,  // 11: webitel.cases.SLAConditions.ListSLAConditions:output_type -> webitel.cases.SLAConditionList
	0,  // 12: webitel.cases.SLAConditions.CreateSLACondition:output_type -> webitel.cases.SLACondition
	0,  // 13: webitel.cases.SLAConditions.UpdateSLACondition:output_type -> webitel.cases.SLACondition
	0,  // 14: webitel.cases.SLAConditions.DeleteSLACondition:output_type -> webitel.cases.SLACondition
	8,  // 15: webitel.cases.SLAConditions.LocateSLACondition:output_type -> webitel.cases.LocateSLAConditionResponse
	11, // [11:16] is the sub-list for method output_type
	6,  // [6:11] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_cases_sla_condition_proto_init() }
func file_cases_sla_condition_proto_init() {
	if File_cases_sla_condition_proto != nil {
		return
	}
	file_cases_lookup_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cases_sla_condition_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*SLACondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cases_sla_condition_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*InputSLACondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cases_sla_condition_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*SLAConditionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cases_sla_condition_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CreateSLAConditionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cases_sla_condition_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateSLAConditionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cases_sla_condition_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteSLAConditionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cases_sla_condition_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ListSLAConditionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cases_sla_condition_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*LocateSLAConditionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cases_sla_condition_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*LocateSLAConditionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cases_sla_condition_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cases_sla_condition_proto_goTypes,
		DependencyIndexes: file_cases_sla_condition_proto_depIdxs,
		MessageInfos:      file_cases_sla_condition_proto_msgTypes,
	}.Build()
	File_cases_sla_condition_proto = out.File
	file_cases_sla_condition_proto_rawDesc = nil
	file_cases_sla_condition_proto_goTypes = nil
	file_cases_sla_condition_proto_depIdxs = nil
}
