// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: case.proto

package cases

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/webitel/webitel-go-kit/cmd/protoc-gen-go-webitel/gen/go/proto/webitel"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/genproto/googleapis/api/visibility"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RelationType int32

const (
	RelationType_BlockedBy    RelationType = 0
	RelationType_Blocks       RelationType = 1 // inversed
	RelationType_Duplicates   RelationType = 2
	RelationType_DuplicatedBy RelationType = 3 // inversed
	RelationType_Causes       RelationType = 4
	RelationType_CausedBy     RelationType = 5 // inversed
	RelationType_IsChildOf    RelationType = 6
	RelationType_IsParentOf   RelationType = 7 // inversed
	RelationType_RelatesTo    RelationType = 8 // bidirectional
)

// Enum value maps for RelationType.
var (
	RelationType_name = map[int32]string{
		0: "BlockedBy",
		1: "Blocks",
		2: "Duplicates",
		3: "DuplicatedBy",
		4: "Causes",
		5: "CausedBy",
		6: "IsChildOf",
		7: "IsParentOf",
		8: "RelatesTo",
	}
	RelationType_value = map[string]int32{
		"BlockedBy":    0,
		"Blocks":       1,
		"Duplicates":   2,
		"DuplicatedBy": 3,
		"Causes":       4,
		"CausedBy":     5,
		"IsChildOf":    6,
		"IsParentOf":   7,
		"RelatesTo":    8,
	}
)

func (x RelationType) Enum() *RelationType {
	p := new(RelationType)
	*p = x
	return p
}

func (x RelationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RelationType) Descriptor() protoreflect.EnumDescriptor {
	return file_case_proto_enumTypes[0].Descriptor()
}

func (RelationType) Type() protoreflect.EnumType {
	return &file_case_proto_enumTypes[0]
}

func (x RelationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RelationType.Descriptor instead.
func (RelationType) EnumDescriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{0}
}

type SearchCasesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page   int32    `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size   int32    `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Q      string   `protobuf:"bytes,3,opt,name=q,proto3" json:"q,omitempty"` // covered by filters?
	Qin    []string `protobuf:"bytes,4,rep,name=qin,proto3" json:"qin,omitempty"`
	Sort   string   `protobuf:"bytes,5,opt,name=sort,proto3" json:"sort,omitempty"`
	Fields []string `protobuf:"bytes,6,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *SearchCasesRequest) Reset() {
	*x = SearchCasesRequest{}
	mi := &file_case_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchCasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCasesRequest) ProtoMessage() {}

func (x *SearchCasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCasesRequest.ProtoReflect.Descriptor instead.
func (*SearchCasesRequest) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{0}
}

func (x *SearchCasesRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchCasesRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SearchCasesRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *SearchCasesRequest) GetQin() []string {
	if x != nil {
		return x.Qin
	}
	return nil
}

func (x *SearchCasesRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *SearchCasesRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

type LocateCaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Etag   int64    `protobuf:"varint,1,opt,name=etag,proto3" json:"etag,omitempty"`
	Fields []string `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *LocateCaseRequest) Reset() {
	*x = LocateCaseRequest{}
	mi := &file_case_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocateCaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocateCaseRequest) ProtoMessage() {}

func (x *LocateCaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocateCaseRequest.ProtoReflect.Descriptor instead.
func (*LocateCaseRequest) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{1}
}

func (x *LocateCaseRequest) GetEtag() int64 {
	if x != nil {
		return x.Etag
	}
	return 0
}

func (x *LocateCaseRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

type InputCreateCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Etag        string                `protobuf:"bytes,1,opt,name=etag,proto3" json:"etag,omitempty"`
	Name        string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                    // create: required;
	Subject     string                `protobuf:"bytes,3,opt,name=subject,proto3" json:"subject,omitempty"`                              // create: required;
	Description string                `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`                      // create: not required;
	ContactInfo string                `protobuf:"bytes,5,opt,name=contact_info,json=contactInfo,proto3" json:"contact_info,omitempty"`   // create: not required;
	Assignee    int64                 `protobuf:"varint,6,opt,name=assignee,proto3" json:"assignee,omitempty"`                           // create: not required, default from service or set by UI;
	Reporter    int64                 `protobuf:"varint,7,opt,name=reporter,proto3" json:"reporter,omitempty"`                           // create: required (if empty recognize as anonymous contact);
	Impacted    int64                 `protobuf:"varint,8,opt,name=impacted,proto3" json:"impacted,omitempty"`                           // create: required, default is reporter or ui (if empty recognize as anonymous);
	Group       int64                 `protobuf:"varint,9,opt,name=group,proto3" json:"group,omitempty"`                                 // create: not required, default from service or set by UI;
	Status      int64                 `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"`                              // create: not required, default initial value from status lookup or ui;
	CloseReason int64                 `protobuf:"varint,11,opt,name=close_reason,json=closeReason,proto3" json:"close_reason,omitempty"` // create: not required;
	Priority    int64                 `protobuf:"varint,12,opt,name=priority,proto3" json:"priority,omitempty"`                          // create: not required, default first value from priority lookup
	Source      int64                 `protobuf:"varint,13,opt,name=source,proto3" json:"source,omitempty"`                              // source of the case
	Service     int64                 `protobuf:"varint,14,opt,name=service,proto3" json:"service,omitempty"`                            // on this field base many other readonly fields on return
	Close       *CreateCaseCloseInput `protobuf:"bytes,15,opt,name=close,proto3" json:"close,omitempty"`                                 // create: not required; update: required only when case status goes to the final state
	Rate        *RateInfo             `protobuf:"bytes,16,opt,name=rate,proto3" json:"rate,omitempty"`                                   // only for API, not UI
	Comments    []*InputCaseComment   `protobuf:"bytes,17,rep,name=comments,proto3" json:"comments,omitempty"`
	// repeated InputCaseFile files = 17;
	Links   []*InputCaseLink              `protobuf:"bytes,18,rep,name=links,proto3" json:"links,omitempty"`
	Related []*CreateCaseRelatedCaseInput `protobuf:"bytes,19,rep,name=related,proto3" json:"related,omitempty"`
}

func (x *InputCreateCase) Reset() {
	*x = InputCreateCase{}
	mi := &file_case_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InputCreateCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputCreateCase) ProtoMessage() {}

func (x *InputCreateCase) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputCreateCase.ProtoReflect.Descriptor instead.
func (*InputCreateCase) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{2}
}

func (x *InputCreateCase) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *InputCreateCase) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InputCreateCase) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *InputCreateCase) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *InputCreateCase) GetContactInfo() string {
	if x != nil {
		return x.ContactInfo
	}
	return ""
}

func (x *InputCreateCase) GetAssignee() int64 {
	if x != nil {
		return x.Assignee
	}
	return 0
}

func (x *InputCreateCase) GetReporter() int64 {
	if x != nil {
		return x.Reporter
	}
	return 0
}

func (x *InputCreateCase) GetImpacted() int64 {
	if x != nil {
		return x.Impacted
	}
	return 0
}

func (x *InputCreateCase) GetGroup() int64 {
	if x != nil {
		return x.Group
	}
	return 0
}

func (x *InputCreateCase) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *InputCreateCase) GetCloseReason() int64 {
	if x != nil {
		return x.CloseReason
	}
	return 0
}

func (x *InputCreateCase) GetPriority() int64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *InputCreateCase) GetSource() int64 {
	if x != nil {
		return x.Source
	}
	return 0
}

func (x *InputCreateCase) GetService() int64 {
	if x != nil {
		return x.Service
	}
	return 0
}

func (x *InputCreateCase) GetClose() *CreateCaseCloseInput {
	if x != nil {
		return x.Close
	}
	return nil
}

func (x *InputCreateCase) GetRate() *RateInfo {
	if x != nil {
		return x.Rate
	}
	return nil
}

func (x *InputCreateCase) GetComments() []*InputCaseComment {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *InputCreateCase) GetLinks() []*InputCaseLink {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *InputCreateCase) GetRelated() []*CreateCaseRelatedCaseInput {
	if x != nil {
		return x.Related
	}
	return nil
}

type CreateCaseCloseInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloseResult string `protobuf:"bytes,1,opt,name=close_result,json=closeResult,proto3" json:"close_result,omitempty"`  // rich text with comment on resulting case
	CloseReason int64  `protobuf:"varint,2,opt,name=close_reason,json=closeReason,proto3" json:"close_reason,omitempty"` // actual close reason value from the close_reason lookup
}

func (x *CreateCaseCloseInput) Reset() {
	*x = CreateCaseCloseInput{}
	mi := &file_case_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCaseCloseInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCaseCloseInput) ProtoMessage() {}

func (x *CreateCaseCloseInput) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCaseCloseInput.ProtoReflect.Descriptor instead.
func (*CreateCaseCloseInput) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{3}
}

func (x *CreateCaseCloseInput) GetCloseResult() string {
	if x != nil {
		return x.CloseResult
	}
	return ""
}

func (x *CreateCaseCloseInput) GetCloseReason() int64 {
	if x != nil {
		return x.CloseReason
	}
	return 0
}

type CreateCaseRelatedCaseInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Etag         string       `protobuf:"bytes,1,opt,name=etag,proto3" json:"etag,omitempty"`
	RelationType RelationType `protobuf:"varint,3,opt,name=relation_type,json=relationType,proto3,enum=webitel.cases.RelationType" json:"relation_type,omitempty"`
	RelatedTo    int64        `protobuf:"varint,4,opt,name=related_to,json=relatedTo,proto3" json:"related_to,omitempty"`
}

func (x *CreateCaseRelatedCaseInput) Reset() {
	*x = CreateCaseRelatedCaseInput{}
	mi := &file_case_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCaseRelatedCaseInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCaseRelatedCaseInput) ProtoMessage() {}

func (x *CreateCaseRelatedCaseInput) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCaseRelatedCaseInput.ProtoReflect.Descriptor instead.
func (*CreateCaseRelatedCaseInput) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{4}
}

func (x *CreateCaseRelatedCaseInput) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *CreateCaseRelatedCaseInput) GetRelationType() RelationType {
	if x != nil {
		return x.RelationType
	}
	return RelationType_BlockedBy
}

func (x *CreateCaseRelatedCaseInput) GetRelatedTo() int64 {
	if x != nil {
		return x.RelatedTo
	}
	return 0
}

type CreateCaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input *InputCreateCase `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *CreateCaseRequest) Reset() {
	*x = CreateCaseRequest{}
	mi := &file_case_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCaseRequest) ProtoMessage() {}

func (x *CreateCaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCaseRequest.ProtoReflect.Descriptor instead.
func (*CreateCaseRequest) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{5}
}

func (x *CreateCaseRequest) GetInput() *InputCreateCase {
	if x != nil {
		return x.Input
	}
	return nil
}

type UpdateCaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XJsonMask []string   `protobuf:"bytes,1,rep,name=x_json_mask,json=xJsonMask,proto3" json:"x_json_mask,omitempty"`
	Fields    []string   `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"` // fields to return in resulting object
	Input     *InputCase `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`   // changes
}

func (x *UpdateCaseRequest) Reset() {
	*x = UpdateCaseRequest{}
	mi := &file_case_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCaseRequest) ProtoMessage() {}

func (x *UpdateCaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCaseRequest.ProtoReflect.Descriptor instead.
func (*UpdateCaseRequest) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateCaseRequest) GetXJsonMask() []string {
	if x != nil {
		return x.XJsonMask
	}
	return nil
}

func (x *UpdateCaseRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *UpdateCaseRequest) GetInput() *InputCase {
	if x != nil {
		return x.Input
	}
	return nil
}

type DeleteCaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"` // fields to return in deleted object
	Etag   string   `protobuf:"bytes,2,opt,name=etag,proto3" json:"etag,omitempty"`     // identifier of the object
}

func (x *DeleteCaseRequest) Reset() {
	*x = DeleteCaseRequest{}
	mi := &file_case_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCaseRequest) ProtoMessage() {}

func (x *DeleteCaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCaseRequest.ProtoReflect.Descriptor instead.
func (*DeleteCaseRequest) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteCaseRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *DeleteCaseRequest) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

type CaseList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page  int64   `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Next  bool    `protobuf:"varint,2,opt,name=next,proto3" json:"next,omitempty"`
	Items []*Case `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *CaseList) Reset() {
	*x = CaseList{}
	mi := &file_case_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CaseList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaseList) ProtoMessage() {}

func (x *CaseList) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaseList.ProtoReflect.Descriptor instead.
func (*CaseList) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{8}
}

func (x *CaseList) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *CaseList) GetNext() bool {
	if x != nil {
		return x.Next
	}
	return false
}

func (x *CaseList) GetItems() []*Case {
	if x != nil {
		return x.Items
	}
	return nil
}

type Case struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// default, readonly system fields
	Id                int64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Ver               int32            `protobuf:"varint,2,opt,name=ver,proto3" json:"ver,omitempty"`
	Etag              string           `protobuf:"bytes,3,opt,name=etag,proto3" json:"etag,omitempty"` // main field required for read, update and delete
	CreatedBy         *Lookup          `protobuf:"bytes,4,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	CreatedAt         int64            `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // unixmilli
	UpdatedBy         *Lookup          `protobuf:"bytes,6,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	UpdatedAt         int64            `protobuf:"varint,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` // unixmilli
	Name              string           `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`                             // name of the case, formed by the prefix defined in Catalog and int, in docs uses as id
	Subject           string           `protobuf:"bytes,9,opt,name=subject,proto3" json:"subject,omitempty"`
	Description       string           `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`                                         // free-form text to describe case
	ContactInfo       string           `protobuf:"bytes,11,opt,name=contact_info,json=contactInfo,proto3" json:"contact_info,omitempty"`                      // free-form text to describe contact information
	PlannedReactionAt int64            `protobuf:"varint,12,opt,name=planned_reaction_at,json=plannedReactionAt,proto3" json:"planned_reaction_at,omitempty"` // planned reaction time calculated by sla and conditions, taking into account the calendar (unixmilli)
	PlannedResolveAt  int64            `protobuf:"varint,13,opt,name=planned_resolve_at,json=plannedResolveAt,proto3" json:"planned_resolve_at,omitempty"`    // planned resolve time calculated on-flight by sla and conditions, taking into account the calendar (unixmilli)
	Status            *Lookup          `protobuf:"bytes,14,opt,name=status,proto3" json:"status,omitempty"`                                                   // initialized from service/subservice of the catalog, should not be changed when service changed
	CloseReasonGroup  *Lookup          `protobuf:"bytes,15,opt,name=close_reason_group,json=closeReasonGroup,proto3" json:"close_reason_group,omitempty"`     // defines what close reason lookup we should use for this case, should not be changed when service changed
	Author            *Lookup          `protobuf:"bytes,16,opt,name=author,proto3" json:"author,omitempty"`                                                   // contact that created the case
	Assignee          *Lookup          `protobuf:"bytes,17,opt,name=assignee,proto3" json:"assignee,omitempty"`                                               // contact that assigned to resolve this case (optional)
	Reporter          *Lookup          `protobuf:"bytes,18,opt,name=reporter,proto3" json:"reporter,omitempty"`                                               // contact that reported that issue, if null - anonymous contact
	Impacted          *Lookup          `protobuf:"bytes,19,opt,name=impacted,proto3" json:"impacted,omitempty"`                                               // contact that can be impacted by this case, by default the reporter of the case, can be null if reporter is anonymous contact
	Group             *Lookup          `protobuf:"bytes,20,opt,name=group,proto3" json:"group,omitempty"`                                                     // contact group from the service (optional)
	Priority          *Lookup          `protobuf:"bytes,21,opt,name=priority,proto3" json:"priority,omitempty"`                                               // priority
	Source            *Lookup          `protobuf:"bytes,22,opt,name=source,proto3" json:"source,omitempty"`                                                   // source of the case
	StatusCondition   *Lookup          `protobuf:"bytes,23,opt,name=status_condition,json=statusCondition,proto3" json:"status_condition,omitempty"`          // case state value from the status_lookup
	Close             *CloseInfo       `protobuf:"bytes,24,opt,name=close,proto3" json:"close,omitempty"`                                                     // close information, required when case is in final state
	Rate              *RateInfo        `protobuf:"bytes,25,opt,name=rate,proto3" json:"rate,omitempty"`                                                       // rating information, not required (filled by internal services)
	Timing            *TimingInfo      `protobuf:"bytes,26,opt,name=timing,proto3" json:"timing,omitempty"`                                                   // planned timings calculated on-flight by the SLA and it's conditions
	SlaCondition      []*SLACondition  `protobuf:"bytes,27,rep,name=sla_condition,json=slaCondition,proto3" json:"sla_condition,omitempty"`
	Service           *Lookup          `protobuf:"bytes,28,opt,name=service,proto3" json:"service,omitempty"`
	Comments          *CaseCommentList `protobuf:"bytes,29,opt,name=comments,proto3" json:"comments,omitempty"` // all case's comments
	Related           *RelatedCaseList `protobuf:"bytes,30,opt,name=related,proto3" json:"related,omitempty"`   // related cases
	Links             *CaseLinkList    `protobuf:"bytes,31,opt,name=links,proto3" json:"links,omitempty"`       // attached links
	Sla               *Lookup          `protobuf:"bytes,33,opt,name=sla,proto3" json:"sla,omitempty"`           // sla from the service
}

func (x *Case) Reset() {
	*x = Case{}
	mi := &file_case_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Case) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Case) ProtoMessage() {}

func (x *Case) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Case.ProtoReflect.Descriptor instead.
func (*Case) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{9}
}

func (x *Case) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Case) GetVer() int32 {
	if x != nil {
		return x.Ver
	}
	return 0
}

func (x *Case) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *Case) GetCreatedBy() *Lookup {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *Case) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Case) GetUpdatedBy() *Lookup {
	if x != nil {
		return x.UpdatedBy
	}
	return nil
}

func (x *Case) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Case) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Case) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *Case) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Case) GetContactInfo() string {
	if x != nil {
		return x.ContactInfo
	}
	return ""
}

func (x *Case) GetPlannedReactionAt() int64 {
	if x != nil {
		return x.PlannedReactionAt
	}
	return 0
}

func (x *Case) GetPlannedResolveAt() int64 {
	if x != nil {
		return x.PlannedResolveAt
	}
	return 0
}

func (x *Case) GetStatus() *Lookup {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Case) GetCloseReasonGroup() *Lookup {
	if x != nil {
		return x.CloseReasonGroup
	}
	return nil
}

func (x *Case) GetAuthor() *Lookup {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *Case) GetAssignee() *Lookup {
	if x != nil {
		return x.Assignee
	}
	return nil
}

func (x *Case) GetReporter() *Lookup {
	if x != nil {
		return x.Reporter
	}
	return nil
}

func (x *Case) GetImpacted() *Lookup {
	if x != nil {
		return x.Impacted
	}
	return nil
}

func (x *Case) GetGroup() *Lookup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *Case) GetPriority() *Lookup {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *Case) GetSource() *Lookup {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Case) GetStatusCondition() *Lookup {
	if x != nil {
		return x.StatusCondition
	}
	return nil
}

func (x *Case) GetClose() *CloseInfo {
	if x != nil {
		return x.Close
	}
	return nil
}

func (x *Case) GetRate() *RateInfo {
	if x != nil {
		return x.Rate
	}
	return nil
}

func (x *Case) GetTiming() *TimingInfo {
	if x != nil {
		return x.Timing
	}
	return nil
}

func (x *Case) GetSlaCondition() []*SLACondition {
	if x != nil {
		return x.SlaCondition
	}
	return nil
}

func (x *Case) GetService() *Lookup {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *Case) GetComments() *CaseCommentList {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *Case) GetRelated() *RelatedCaseList {
	if x != nil {
		return x.Related
	}
	return nil
}

func (x *Case) GetLinks() *CaseLinkList {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *Case) GetSla() *Lookup {
	if x != nil {
		return x.Sla
	}
	return nil
}

type CloseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloseResult string  `protobuf:"bytes,1,opt,name=close_result,json=closeResult,proto3" json:"close_result,omitempty"` // rich text with comment on resulting case
	CloseReason *Lookup `protobuf:"bytes,2,opt,name=close_reason,json=closeReason,proto3" json:"close_reason,omitempty"` // actual close reason value from the close_reason lookup
}

func (x *CloseInfo) Reset() {
	*x = CloseInfo{}
	mi := &file_case_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseInfo) ProtoMessage() {}

func (x *CloseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseInfo.ProtoReflect.Descriptor instead.
func (*CloseInfo) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{10}
}

func (x *CloseInfo) GetCloseResult() string {
	if x != nil {
		return x.CloseResult
	}
	return ""
}

func (x *CloseInfo) GetCloseReason() *Lookup {
	if x != nil {
		return x.CloseReason
	}
	return nil
}

type RateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rating        int64  `protobuf:"varint,1,opt,name=rating,proto3" json:"rating,omitempty"`                                   // rating, formed from api calls
	RatingComment string `protobuf:"bytes,2,opt,name=rating_comment,json=ratingComment,proto3" json:"rating_comment,omitempty"` // (optional)
}

func (x *RateInfo) Reset() {
	*x = RateInfo{}
	mi := &file_case_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateInfo) ProtoMessage() {}

func (x *RateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateInfo.ProtoReflect.Descriptor instead.
func (*RateInfo) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{11}
}

func (x *RateInfo) GetRating() int64 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *RateInfo) GetRatingComment() string {
	if x != nil {
		return x.RatingComment
	}
	return ""
}

type TimingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResolvedAt           int64 `protobuf:"varint,1,opt,name=resolved_at,json=resolvedAt,proto3" json:"resolved_at,omitempty"`                                 // actual time when this case was resolved
	ReactedAt            int64 `protobuf:"varint,2,opt,name=reacted_at,json=reactedAt,proto3" json:"reacted_at,omitempty"`                                    // actual time when this case changed it's status from initial
	DifferenceInReaction int64 `protobuf:"varint,3,opt,name=difference_in_reaction,json=differenceInReaction,proto3" json:"difference_in_reaction,omitempty"` // difference between actual and planned reaction time, taking into account the calendar
	DifferenceInResolve  int64 `protobuf:"varint,4,opt,name=difference_in_resolve,json=differenceInResolve,proto3" json:"difference_in_resolve,omitempty"`    // difference between actual and planned resolve time, taking into account the calendar
}

func (x *TimingInfo) Reset() {
	*x = TimingInfo{}
	mi := &file_case_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimingInfo) ProtoMessage() {}

func (x *TimingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimingInfo.ProtoReflect.Descriptor instead.
func (*TimingInfo) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{12}
}

func (x *TimingInfo) GetResolvedAt() int64 {
	if x != nil {
		return x.ResolvedAt
	}
	return 0
}

func (x *TimingInfo) GetReactedAt() int64 {
	if x != nil {
		return x.ReactedAt
	}
	return 0
}

func (x *TimingInfo) GetDifferenceInReaction() int64 {
	if x != nil {
		return x.DifferenceInReaction
	}
	return 0
}

func (x *TimingInfo) GetDifferenceInResolve() int64 {
	if x != nil {
		return x.DifferenceInResolve
	}
	return 0
}

type InputCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Etag        string              `protobuf:"bytes,1,opt,name=etag,proto3" json:"etag,omitempty"`
	Name        string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                   // create: required;
	Subject     string              `protobuf:"bytes,3,opt,name=subject,proto3" json:"subject,omitempty"`                             // create: required;
	Description string              `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`                     // create: not required;
	ContactInfo string              `protobuf:"bytes,5,opt,name=contact_info,json=contactInfo,proto3" json:"contact_info,omitempty"`  // create: not required;
	Assignee    *Lookup             `protobuf:"bytes,6,opt,name=assignee,proto3" json:"assignee,omitempty"`                           // create: not required, default from service or set by UI;
	Reporter    *Lookup             `protobuf:"bytes,7,opt,name=reporter,proto3" json:"reporter,omitempty"`                           // create: required (if empty recognize as anonymous contact);
	Impacted    *Lookup             `protobuf:"bytes,8,opt,name=impacted,proto3" json:"impacted,omitempty"`                           // create: required, default is reporter or ui (if empty recognize as anonymous);
	Group       *Lookup             `protobuf:"bytes,9,opt,name=group,proto3" json:"group,omitempty"`                                 // create: not required, default from service or set by UI;
	Status      *Lookup             `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`                              // create: not required, default initial value from status lookup or ui;
	CloseReason *Lookup             `protobuf:"bytes,11,opt,name=close_reason,json=closeReason,proto3" json:"close_reason,omitempty"` // create: not required;
	Priority    *Lookup             `protobuf:"bytes,12,opt,name=priority,proto3" json:"priority,omitempty"`                          // create: not required, default first value from priority lookup
	Source      *Lookup             `protobuf:"bytes,13,opt,name=source,proto3" json:"source,omitempty"`                              // source of the case
	Service     *Lookup             `protobuf:"bytes,14,opt,name=service,proto3" json:"service,omitempty"`                            // on this field base many other readonly fields on return
	Close       *CloseInfo          `protobuf:"bytes,15,opt,name=close,proto3" json:"close,omitempty"`                                // create: not required; update: required only when case status goes to the final state
	Rate        *RateInfo           `protobuf:"bytes,16,opt,name=rate,proto3" json:"rate,omitempty"`                                  // only for API, not UI
	Comments    []*InputCaseComment `protobuf:"bytes,17,rep,name=comments,proto3" json:"comments,omitempty"`
	// repeated InputCaseFile files = 17;
	Links   []*InputCaseLink    `protobuf:"bytes,18,rep,name=links,proto3" json:"links,omitempty"`
	Related []*InputRelatedCase `protobuf:"bytes,19,rep,name=related,proto3" json:"related,omitempty"`
}

func (x *InputCase) Reset() {
	*x = InputCase{}
	mi := &file_case_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InputCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputCase) ProtoMessage() {}

func (x *InputCase) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputCase.ProtoReflect.Descriptor instead.
func (*InputCase) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{13}
}

func (x *InputCase) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *InputCase) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InputCase) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *InputCase) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *InputCase) GetContactInfo() string {
	if x != nil {
		return x.ContactInfo
	}
	return ""
}

func (x *InputCase) GetAssignee() *Lookup {
	if x != nil {
		return x.Assignee
	}
	return nil
}

func (x *InputCase) GetReporter() *Lookup {
	if x != nil {
		return x.Reporter
	}
	return nil
}

func (x *InputCase) GetImpacted() *Lookup {
	if x != nil {
		return x.Impacted
	}
	return nil
}

func (x *InputCase) GetGroup() *Lookup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *InputCase) GetStatus() *Lookup {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *InputCase) GetCloseReason() *Lookup {
	if x != nil {
		return x.CloseReason
	}
	return nil
}

func (x *InputCase) GetPriority() *Lookup {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *InputCase) GetSource() *Lookup {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *InputCase) GetService() *Lookup {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *InputCase) GetClose() *CloseInfo {
	if x != nil {
		return x.Close
	}
	return nil
}

func (x *InputCase) GetRate() *RateInfo {
	if x != nil {
		return x.Rate
	}
	return nil
}

func (x *InputCase) GetComments() []*InputCaseComment {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *InputCase) GetLinks() []*InputCaseLink {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *InputCase) GetRelated() []*InputRelatedCase {
	if x != nil {
		return x.Related
	}
	return nil
}

type RelatedCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Ver       int32   `protobuf:"varint,2,opt,name=ver,proto3" json:"ver,omitempty"`
	Etag      string  `protobuf:"bytes,3,opt,name=etag,proto3" json:"etag,omitempty"` // main field required for read, update and delete
	CreatedBy *Lookup `protobuf:"bytes,4,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	CreatedAt int64   `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // unixmilli
	UpdatedBy *Lookup `protobuf:"bytes,6,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	UpdatedAt int64   `protobuf:"varint,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` // unixmilli
	Child     *Case   `protobuf:"bytes,8,opt,name=child,proto3" json:"child,omitempty"`
	// Case parent = 9; // (optional, always a case that requested)
	RelationType RelationType `protobuf:"varint,10,opt,name=relation_type,json=relationType,proto3,enum=webitel.cases.RelationType" json:"relation_type,omitempty"`
}

func (x *RelatedCase) Reset() {
	*x = RelatedCase{}
	mi := &file_case_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelatedCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelatedCase) ProtoMessage() {}

func (x *RelatedCase) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelatedCase.ProtoReflect.Descriptor instead.
func (*RelatedCase) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{14}
}

func (x *RelatedCase) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RelatedCase) GetVer() int32 {
	if x != nil {
		return x.Ver
	}
	return 0
}

func (x *RelatedCase) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *RelatedCase) GetCreatedBy() *Lookup {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *RelatedCase) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *RelatedCase) GetUpdatedBy() *Lookup {
	if x != nil {
		return x.UpdatedBy
	}
	return nil
}

func (x *RelatedCase) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *RelatedCase) GetChild() *Case {
	if x != nil {
		return x.Child
	}
	return nil
}

func (x *RelatedCase) GetRelationType() RelationType {
	if x != nil {
		return x.RelationType
	}
	return RelationType_BlockedBy
}

type RelatedCaseList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page  int64          `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Next  bool           `protobuf:"varint,2,opt,name=next,proto3" json:"next,omitempty"`
	Items []*RelatedCase `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *RelatedCaseList) Reset() {
	*x = RelatedCaseList{}
	mi := &file_case_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelatedCaseList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelatedCaseList) ProtoMessage() {}

func (x *RelatedCaseList) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelatedCaseList.ProtoReflect.Descriptor instead.
func (*RelatedCaseList) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{15}
}

func (x *RelatedCaseList) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *RelatedCaseList) GetNext() bool {
	if x != nil {
		return x.Next
	}
	return false
}

func (x *RelatedCaseList) GetItems() []*RelatedCase {
	if x != nil {
		return x.Items
	}
	return nil
}

type InputRelatedCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Etag         string       `protobuf:"bytes,1,opt,name=etag,proto3" json:"etag,omitempty"`
	RelationType RelationType `protobuf:"varint,3,opt,name=relation_type,json=relationType,proto3,enum=webitel.cases.RelationType" json:"relation_type,omitempty"`
	RelatedTo    *Case        `protobuf:"bytes,4,opt,name=related_to,json=relatedTo,proto3" json:"related_to,omitempty"` // child
}

func (x *InputRelatedCase) Reset() {
	*x = InputRelatedCase{}
	mi := &file_case_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InputRelatedCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputRelatedCase) ProtoMessage() {}

func (x *InputRelatedCase) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputRelatedCase.ProtoReflect.Descriptor instead.
func (*InputRelatedCase) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{16}
}

func (x *InputRelatedCase) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *InputRelatedCase) GetRelationType() RelationType {
	if x != nil {
		return x.RelationType
	}
	return RelationType_BlockedBy
}

func (x *InputRelatedCase) GetRelatedTo() *Case {
	if x != nil {
		return x.RelatedTo
	}
	return nil
}

type LocateRelatedCaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Etag   string   `protobuf:"bytes,1,opt,name=etag,proto3" json:"etag,omitempty"` // (id allowed)
	Fields []string `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *LocateRelatedCaseRequest) Reset() {
	*x = LocateRelatedCaseRequest{}
	mi := &file_case_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocateRelatedCaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocateRelatedCaseRequest) ProtoMessage() {}

func (x *LocateRelatedCaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocateRelatedCaseRequest.ProtoReflect.Descriptor instead.
func (*LocateRelatedCaseRequest) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{17}
}

func (x *LocateRelatedCaseRequest) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *LocateRelatedCaseRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

type UpdateRelatedCaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields    []string          `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"` // on return
	XJsonMask []string          `protobuf:"bytes,3,rep,name=x_json_mask,json=xJsonMask,proto3" json:"x_json_mask,omitempty"`
	Input     *InputRelatedCase `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *UpdateRelatedCaseRequest) Reset() {
	*x = UpdateRelatedCaseRequest{}
	mi := &file_case_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRelatedCaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRelatedCaseRequest) ProtoMessage() {}

func (x *UpdateRelatedCaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRelatedCaseRequest.ProtoReflect.Descriptor instead.
func (*UpdateRelatedCaseRequest) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateRelatedCaseRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *UpdateRelatedCaseRequest) GetXJsonMask() []string {
	if x != nil {
		return x.XJsonMask
	}
	return nil
}

func (x *UpdateRelatedCaseRequest) GetInput() *InputRelatedCase {
	if x != nil {
		return x.Input
	}
	return nil
}

type DeleteRelatedCaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Etag   string   `protobuf:"bytes,1,opt,name=etag,proto3" json:"etag,omitempty"`     // (etag only)
	Fields []string `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"` // fields on return
}

func (x *DeleteRelatedCaseRequest) Reset() {
	*x = DeleteRelatedCaseRequest{}
	mi := &file_case_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRelatedCaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRelatedCaseRequest) ProtoMessage() {}

func (x *DeleteRelatedCaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRelatedCaseRequest.ProtoReflect.Descriptor instead.
func (*DeleteRelatedCaseRequest) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{19}
}

func (x *DeleteRelatedCaseRequest) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *DeleteRelatedCaseRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

type ListRelatedCasesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int64    `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size     int64    `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Q        string   `protobuf:"bytes,3,opt,name=q,proto3" json:"q,omitempty"`
	Qin      []string `protobuf:"bytes,4,rep,name=qin,proto3" json:"qin,omitempty"`
	Sort     string   `protobuf:"bytes,5,opt,name=sort,proto3" json:"sort,omitempty"`
	Fields   []string `protobuf:"bytes,6,rep,name=fields,proto3" json:"fields,omitempty"`
	CaseEtag string   `protobuf:"bytes,9,opt,name=case_etag,json=caseEtag,proto3" json:"case_etag,omitempty"`
}

func (x *ListRelatedCasesRequest) Reset() {
	*x = ListRelatedCasesRequest{}
	mi := &file_case_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRelatedCasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRelatedCasesRequest) ProtoMessage() {}

func (x *ListRelatedCasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRelatedCasesRequest.ProtoReflect.Descriptor instead.
func (*ListRelatedCasesRequest) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{20}
}

func (x *ListRelatedCasesRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListRelatedCasesRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ListRelatedCasesRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *ListRelatedCasesRequest) GetQin() []string {
	if x != nil {
		return x.Qin
	}
	return nil
}

func (x *ListRelatedCasesRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *ListRelatedCasesRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *ListRelatedCasesRequest) GetCaseEtag() string {
	if x != nil {
		return x.CaseEtag
	}
	return ""
}

type CreateRelatedCaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XJsonMask []string          `protobuf:"bytes,1,rep,name=x_json_mask,json=xJsonMask,proto3" json:"x_json_mask,omitempty"`
	Fields    []string          `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`                     // result fields needed on the front-end for each comment
	CaseEtag  string            `protobuf:"bytes,3,opt,name=case_etag,json=caseEtag,proto3" json:"case_etag,omitempty"` // new/existing comments belong to (id accepted)
	Input     *InputRelatedCase `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *CreateRelatedCaseRequest) Reset() {
	*x = CreateRelatedCaseRequest{}
	mi := &file_case_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRelatedCaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRelatedCaseRequest) ProtoMessage() {}

func (x *CreateRelatedCaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRelatedCaseRequest.ProtoReflect.Descriptor instead.
func (*CreateRelatedCaseRequest) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{21}
}

func (x *CreateRelatedCaseRequest) GetXJsonMask() []string {
	if x != nil {
		return x.XJsonMask
	}
	return nil
}

func (x *CreateRelatedCaseRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *CreateRelatedCaseRequest) GetCaseEtag() string {
	if x != nil {
		return x.CaseEtag
	}
	return ""
}

func (x *CreateRelatedCaseRequest) GetInput() *InputRelatedCase {
	if x != nil {
		return x.Input
	}
	return nil
}

var File_case_proto protoreflect.FileDescriptor

var file_case_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x77, 0x65,
	0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x1a, 0x0d, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x63, 0x61, 0x73, 0x65, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x63,
	0x61, 0x73, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f,
	0x63, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x13, 0x73, 0x6c, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x88, 0x01, 0x0a, 0x12, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x43, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x71, 0x69, 0x6e, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x03, 0x71, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x22, 0x3f, 0x0a, 0x11, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x43, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xa9, 0x05, 0x0a, 0x0f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73,
	0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x73, 0x65, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x2b,
	0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x77,
	0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x43, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b,
	0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65,
	0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x43, 0x0a, 0x07,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43,
	0x61, 0x73, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x22, 0x5c, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x73, 0x65, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22,
	0x91, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74,
	0x61, 0x67, 0x12, 0x40, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x77, 0x65, 0x62, 0x69,
	0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x6f, 0x22, 0x49, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65,
	0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x61, 0x73, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x96,
	0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0b, 0x78, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x07, 0x40, 0x01,
	0x8a, 0x01, 0x02, 0x5e, 0x24, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x45,
	0x56, 0x49, 0x45, 0x57, 0x52, 0x09, 0x78, 0x4a, 0x73, 0x6f, 0x6e, 0x4d, 0x61, 0x73, 0x6b, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c,
	0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x3f, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x22, 0x5d, 0x0a, 0x08, 0x43, 0x61, 0x73, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x29, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x65,
	0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x73, 0x65,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xc5, 0x0a, 0x0a, 0x04, 0x43, 0x61, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x76,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x6c, 0x61, 0x6e, 0x6e,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x6e, 0x6e,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x41, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e,
	0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d,
	0x0a, 0x12, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x10, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x27, 0x0a,
	0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x06,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e,
	0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x12, 0x2b, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x2b, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x10, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e,
	0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63,
	0x61, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x72,
	0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61,
	0x73, 0x65, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06,
	0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x6c, 0x61, 0x5f, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x53, 0x4c,
	0x41, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x6c, 0x61, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e,
	0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x38, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73,
	0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x05, 0x6c, 0x69, 0x6e,
	0x6b, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74,
	0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6e,
	0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x21, 0x0a, 0x03,
	0x73, 0x6c, 0x61, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x03, 0x73, 0x6c, 0x61, 0x22,
	0x62, 0x0a, 0x09, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x32, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e,
	0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x22, 0x49, 0x0a, 0x08, 0x52, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xb6,
	0x01, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x61, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x61, 0x63, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x34, 0x0a,
	0x16, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x72,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x64,
	0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x52, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x13, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x22, 0xa7, 0x06, 0x0a, 0x09, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x08,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52,
	0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x08, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x29, 0x0a,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65,
	0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c,
	0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65,
	0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52,
	0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x39, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65,
	0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x22, 0xce, 0x02, 0x0a, 0x0b, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63,
	0x61, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x52, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x12, 0x40, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65,
	0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x6b, 0x0a, 0x0f, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x73,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x30, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x77,
	0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x73, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0x9c, 0x01, 0x0a, 0x10, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x43, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x40, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x43,
	0x61, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x22, 0x46,
	0x0a, 0x18, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74,
	0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x0b, 0x78,
	0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x19, 0x92, 0x41, 0x07, 0x40, 0x01, 0x8a, 0x01, 0x02, 0x5e, 0x24, 0xfa, 0xd2, 0xe4, 0x93,
	0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x52, 0x09, 0x78, 0x4a, 0x73,
	0x6f, 0x6e, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x35, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e,
	0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x43, 0x61, 0x73, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x46, 0x0a,
	0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xaa, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x71, 0x69, 0x6e, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x71, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x65, 0x74,
	0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x73, 0x65, 0x45, 0x74,
	0x61, 0x67, 0x22, 0xc1, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x39, 0x0a, 0x0b, 0x78, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x07, 0x40, 0x01, 0x8a, 0x01, 0x02, 0x5e, 0x24,
	0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x52,
	0x09, 0x78, 0x4a, 0x73, 0x6f, 0x6e, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x65, 0x74, 0x61, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x73, 0x65, 0x45, 0x74, 0x61, 0x67, 0x12,
	0x35, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x73, 0x65, 0x52,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2a, 0x93, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x42, 0x79, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73,
	0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x61, 0x75, 0x73, 0x65, 0x73, 0x10, 0x04,
	0x12, 0x0c, 0x0a, 0x08, 0x43, 0x61, 0x75, 0x73, 0x65, 0x64, 0x42, 0x79, 0x10, 0x05, 0x12, 0x0d,
	0x0a, 0x09, 0x49, 0x73, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x4f, 0x66, 0x10, 0x06, 0x12, 0x0e, 0x0a,
	0x0a, 0x49, 0x73, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x10, 0x07, 0x12, 0x0d, 0x0a,
	0x09, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x10, 0x08, 0x32, 0x9d, 0x04, 0x0a,
	0x05, 0x43, 0x61, 0x73, 0x65, 0x73, 0x12, 0x5d, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x43, 0x61, 0x73, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e,
	0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x61, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74,
	0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x12, 0x90, 0xb5, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x2f,
	0x63, 0x61, 0x73, 0x65, 0x73, 0x12, 0x5e, 0x0a, 0x0a, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x43,
	0x61, 0x73, 0x65, 0x12, 0x20, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61,
	0x73, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e,
	0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x22, 0x19, 0x90, 0xb5, 0x18, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b,
	0x65, 0x74, 0x61, 0x67, 0x7d, 0x12, 0x5e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x61, 0x73, 0x65, 0x12, 0x20, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61,
	0x73, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e,
	0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x22, 0x19, 0x90, 0xb5, 0x18, 0x00,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x3a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x06, 0x2f,
	0x63, 0x61, 0x73, 0x65, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x61, 0x73, 0x65, 0x12, 0x20, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63,
	0x61, 0x73, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c,
	0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x22, 0x44, 0x90, 0xb5, 0x18,
	0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x3a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5a, 0x1c,
	0x3a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x32, 0x13, 0x2f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2f,
	0x7b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x65, 0x74, 0x61, 0x67, 0x7d, 0x1a, 0x13, 0x2f, 0x63,
	0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x65, 0x74, 0x61, 0x67,
	0x7d, 0x12, 0x5e, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x73, 0x65, 0x12,
	0x20, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x13, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65,
	0x73, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x22, 0x19, 0x90, 0xb5, 0x18, 0x03, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0f, 0x2a, 0x0d, 0x2f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x65, 0x74, 0x61, 0x67,
	0x7d, 0x1a, 0x09, 0x8a, 0xb5, 0x18, 0x05, 0x63, 0x61, 0x73, 0x65, 0x73, 0x32, 0xcc, 0x05, 0x0a,
	0x0c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x73, 0x65, 0x73, 0x12, 0x7b, 0x0a,
	0x11, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61,
	0x73, 0x65, 0x12, 0x27, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73,
	0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x77, 0x65,
	0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x43, 0x61, 0x73, 0x65, 0x22, 0x21, 0x90, 0xb5, 0x18, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x2f, 0x7b, 0x65, 0x74, 0x61, 0x67, 0x7d, 0x12, 0x80, 0x01, 0x0a, 0x11, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x73, 0x65,
	0x12, 0x27, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x77, 0x65, 0x62, 0x69,
	0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x43, 0x61, 0x73, 0x65, 0x22, 0x26, 0x90, 0xb5, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1c, 0x22, 0x1a, 0x2f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x2f, 0x7b, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x65, 0x74, 0x61, 0x67, 0x7d, 0x12, 0xae, 0x01,
	0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43,
	0x61, 0x73, 0x65, 0x12, 0x27, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61,
	0x73, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x77,
	0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x73, 0x65, 0x22, 0x54, 0x90, 0xb5, 0x18, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x4a, 0x3a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5a, 0x24, 0x3a, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x32, 0x1b, 0x2f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x2f, 0x7b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x65, 0x74, 0x61, 0x67,
	0x7d, 0x1a, 0x1b, 0x2f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x2f, 0x7b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x65, 0x74, 0x61, 0x67, 0x7d, 0x12, 0x7b,
	0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43,
	0x61, 0x73, 0x65, 0x12, 0x27, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61,
	0x73, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x77,
	0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x73, 0x65, 0x22, 0x21, 0x90, 0xb5, 0x18, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x17, 0x2a, 0x15, 0x2f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x2f, 0x7b, 0x65, 0x74, 0x61, 0x67, 0x7d, 0x12, 0x82, 0x01, 0x0a, 0x10,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x73, 0x65, 0x73,
	0x12, 0x26, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74,
	0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x43, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x26, 0x90, 0xb5, 0x18, 0x03, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x61,
	0x73, 0x65, 0x5f, 0x65, 0x74, 0x61, 0x67, 0x7d, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x1a, 0x09, 0x8a, 0xb5, 0x18, 0x05, 0x63, 0x61, 0x73, 0x65, 0x73, 0x42, 0x9d, 0x01, 0x0a, 0x11,
	0x63, 0x6f, 0x6d, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65,
	0x73, 0x42, 0x09, 0x43, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x28,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x65, 0x62, 0x69, 0x74,
	0x65, 0x6c, 0x2f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x61, 0x73,
	0x65, 0x73, 0x3b, 0x63, 0x61, 0x73, 0x65, 0x73, 0xa2, 0x02, 0x03, 0x57, 0x43, 0x58, 0xaa, 0x02,
	0x0d, 0x57, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x73, 0xca, 0x02,
	0x0d, 0x57, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x5c, 0x43, 0x61, 0x73, 0x65, 0x73, 0xe2, 0x02,
	0x19, 0x57, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x5c, 0x43, 0x61, 0x73, 0x65, 0x73, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0e, 0x57, 0x65, 0x62,
	0x69, 0x74, 0x65, 0x6c, 0x3a, 0x3a, 0x43, 0x61, 0x73, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_case_proto_rawDescOnce sync.Once
	file_case_proto_rawDescData = file_case_proto_rawDesc
)

func file_case_proto_rawDescGZIP() []byte {
	file_case_proto_rawDescOnce.Do(func() {
		file_case_proto_rawDescData = protoimpl.X.CompressGZIP(file_case_proto_rawDescData)
	})
	return file_case_proto_rawDescData
}

var file_case_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_case_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_case_proto_goTypes = []any{
	(RelationType)(0),                  // 0: webitel.cases.RelationType
	(*SearchCasesRequest)(nil),         // 1: webitel.cases.SearchCasesRequest
	(*LocateCaseRequest)(nil),          // 2: webitel.cases.LocateCaseRequest
	(*InputCreateCase)(nil),            // 3: webitel.cases.InputCreateCase
	(*CreateCaseCloseInput)(nil),       // 4: webitel.cases.CreateCaseCloseInput
	(*CreateCaseRelatedCaseInput)(nil), // 5: webitel.cases.CreateCaseRelatedCaseInput
	(*CreateCaseRequest)(nil),          // 6: webitel.cases.CreateCaseRequest
	(*UpdateCaseRequest)(nil),          // 7: webitel.cases.UpdateCaseRequest
	(*DeleteCaseRequest)(nil),          // 8: webitel.cases.DeleteCaseRequest
	(*CaseList)(nil),                   // 9: webitel.cases.CaseList
	(*Case)(nil),                       // 10: webitel.cases.Case
	(*CloseInfo)(nil),                  // 11: webitel.cases.CloseInfo
	(*RateInfo)(nil),                   // 12: webitel.cases.RateInfo
	(*TimingInfo)(nil),                 // 13: webitel.cases.TimingInfo
	(*InputCase)(nil),                  // 14: webitel.cases.InputCase
	(*RelatedCase)(nil),                // 15: webitel.cases.RelatedCase
	(*RelatedCaseList)(nil),            // 16: webitel.cases.RelatedCaseList
	(*InputRelatedCase)(nil),           // 17: webitel.cases.InputRelatedCase
	(*LocateRelatedCaseRequest)(nil),   // 18: webitel.cases.LocateRelatedCaseRequest
	(*UpdateRelatedCaseRequest)(nil),   // 19: webitel.cases.UpdateRelatedCaseRequest
	(*DeleteRelatedCaseRequest)(nil),   // 20: webitel.cases.DeleteRelatedCaseRequest
	(*ListRelatedCasesRequest)(nil),    // 21: webitel.cases.ListRelatedCasesRequest
	(*CreateRelatedCaseRequest)(nil),   // 22: webitel.cases.CreateRelatedCaseRequest
	(*InputCaseComment)(nil),           // 23: webitel.cases.InputCaseComment
	(*InputCaseLink)(nil),              // 24: webitel.cases.InputCaseLink
	(*Lookup)(nil),                     // 25: general.Lookup
	(*SLACondition)(nil),               // 26: webitel.cases.SLACondition
	(*CaseCommentList)(nil),            // 27: webitel.cases.CaseCommentList
	(*CaseLinkList)(nil),               // 28: webitel.cases.CaseLinkList
}
var file_case_proto_depIdxs = []int32{
	4,  // 0: webitel.cases.InputCreateCase.close:type_name -> webitel.cases.CreateCaseCloseInput
	12, // 1: webitel.cases.InputCreateCase.rate:type_name -> webitel.cases.RateInfo
	23, // 2: webitel.cases.InputCreateCase.comments:type_name -> webitel.cases.InputCaseComment
	24, // 3: webitel.cases.InputCreateCase.links:type_name -> webitel.cases.InputCaseLink
	5,  // 4: webitel.cases.InputCreateCase.related:type_name -> webitel.cases.CreateCaseRelatedCaseInput
	0,  // 5: webitel.cases.CreateCaseRelatedCaseInput.relation_type:type_name -> webitel.cases.RelationType
	3,  // 6: webitel.cases.CreateCaseRequest.input:type_name -> webitel.cases.InputCreateCase
	14, // 7: webitel.cases.UpdateCaseRequest.input:type_name -> webitel.cases.InputCase
	10, // 8: webitel.cases.CaseList.items:type_name -> webitel.cases.Case
	25, // 9: webitel.cases.Case.created_by:type_name -> general.Lookup
	25, // 10: webitel.cases.Case.updated_by:type_name -> general.Lookup
	25, // 11: webitel.cases.Case.status:type_name -> general.Lookup
	25, // 12: webitel.cases.Case.close_reason_group:type_name -> general.Lookup
	25, // 13: webitel.cases.Case.author:type_name -> general.Lookup
	25, // 14: webitel.cases.Case.assignee:type_name -> general.Lookup
	25, // 15: webitel.cases.Case.reporter:type_name -> general.Lookup
	25, // 16: webitel.cases.Case.impacted:type_name -> general.Lookup
	25, // 17: webitel.cases.Case.group:type_name -> general.Lookup
	25, // 18: webitel.cases.Case.priority:type_name -> general.Lookup
	25, // 19: webitel.cases.Case.source:type_name -> general.Lookup
	25, // 20: webitel.cases.Case.status_condition:type_name -> general.Lookup
	11, // 21: webitel.cases.Case.close:type_name -> webitel.cases.CloseInfo
	12, // 22: webitel.cases.Case.rate:type_name -> webitel.cases.RateInfo
	13, // 23: webitel.cases.Case.timing:type_name -> webitel.cases.TimingInfo
	26, // 24: webitel.cases.Case.sla_condition:type_name -> webitel.cases.SLACondition
	25, // 25: webitel.cases.Case.service:type_name -> general.Lookup
	27, // 26: webitel.cases.Case.comments:type_name -> webitel.cases.CaseCommentList
	16, // 27: webitel.cases.Case.related:type_name -> webitel.cases.RelatedCaseList
	28, // 28: webitel.cases.Case.links:type_name -> webitel.cases.CaseLinkList
	25, // 29: webitel.cases.Case.sla:type_name -> general.Lookup
	25, // 30: webitel.cases.CloseInfo.close_reason:type_name -> general.Lookup
	25, // 31: webitel.cases.InputCase.assignee:type_name -> general.Lookup
	25, // 32: webitel.cases.InputCase.reporter:type_name -> general.Lookup
	25, // 33: webitel.cases.InputCase.impacted:type_name -> general.Lookup
	25, // 34: webitel.cases.InputCase.group:type_name -> general.Lookup
	25, // 35: webitel.cases.InputCase.status:type_name -> general.Lookup
	25, // 36: webitel.cases.InputCase.close_reason:type_name -> general.Lookup
	25, // 37: webitel.cases.InputCase.priority:type_name -> general.Lookup
	25, // 38: webitel.cases.InputCase.source:type_name -> general.Lookup
	25, // 39: webitel.cases.InputCase.service:type_name -> general.Lookup
	11, // 40: webitel.cases.InputCase.close:type_name -> webitel.cases.CloseInfo
	12, // 41: webitel.cases.InputCase.rate:type_name -> webitel.cases.RateInfo
	23, // 42: webitel.cases.InputCase.comments:type_name -> webitel.cases.InputCaseComment
	24, // 43: webitel.cases.InputCase.links:type_name -> webitel.cases.InputCaseLink
	17, // 44: webitel.cases.InputCase.related:type_name -> webitel.cases.InputRelatedCase
	25, // 45: webitel.cases.RelatedCase.created_by:type_name -> general.Lookup
	25, // 46: webitel.cases.RelatedCase.updated_by:type_name -> general.Lookup
	10, // 47: webitel.cases.RelatedCase.child:type_name -> webitel.cases.Case
	0,  // 48: webitel.cases.RelatedCase.relation_type:type_name -> webitel.cases.RelationType
	15, // 49: webitel.cases.RelatedCaseList.items:type_name -> webitel.cases.RelatedCase
	0,  // 50: webitel.cases.InputRelatedCase.relation_type:type_name -> webitel.cases.RelationType
	10, // 51: webitel.cases.InputRelatedCase.related_to:type_name -> webitel.cases.Case
	17, // 52: webitel.cases.UpdateRelatedCaseRequest.input:type_name -> webitel.cases.InputRelatedCase
	17, // 53: webitel.cases.CreateRelatedCaseRequest.input:type_name -> webitel.cases.InputRelatedCase
	1,  // 54: webitel.cases.Cases.SearchCases:input_type -> webitel.cases.SearchCasesRequest
	2,  // 55: webitel.cases.Cases.LocateCase:input_type -> webitel.cases.LocateCaseRequest
	6,  // 56: webitel.cases.Cases.CreateCase:input_type -> webitel.cases.CreateCaseRequest
	7,  // 57: webitel.cases.Cases.UpdateCase:input_type -> webitel.cases.UpdateCaseRequest
	8,  // 58: webitel.cases.Cases.DeleteCase:input_type -> webitel.cases.DeleteCaseRequest
	18, // 59: webitel.cases.RelatedCases.LocateRelatedCase:input_type -> webitel.cases.LocateRelatedCaseRequest
	22, // 60: webitel.cases.RelatedCases.CreateRelatedCase:input_type -> webitel.cases.CreateRelatedCaseRequest
	19, // 61: webitel.cases.RelatedCases.UpdateRelatedCase:input_type -> webitel.cases.UpdateRelatedCaseRequest
	20, // 62: webitel.cases.RelatedCases.DeleteRelatedCase:input_type -> webitel.cases.DeleteRelatedCaseRequest
	21, // 63: webitel.cases.RelatedCases.ListRelatedCases:input_type -> webitel.cases.ListRelatedCasesRequest
	9,  // 64: webitel.cases.Cases.SearchCases:output_type -> webitel.cases.CaseList
	10, // 65: webitel.cases.Cases.LocateCase:output_type -> webitel.cases.Case
	10, // 66: webitel.cases.Cases.CreateCase:output_type -> webitel.cases.Case
	10, // 67: webitel.cases.Cases.UpdateCase:output_type -> webitel.cases.Case
	10, // 68: webitel.cases.Cases.DeleteCase:output_type -> webitel.cases.Case
	15, // 69: webitel.cases.RelatedCases.LocateRelatedCase:output_type -> webitel.cases.RelatedCase
	15, // 70: webitel.cases.RelatedCases.CreateRelatedCase:output_type -> webitel.cases.RelatedCase
	15, // 71: webitel.cases.RelatedCases.UpdateRelatedCase:output_type -> webitel.cases.RelatedCase
	15, // 72: webitel.cases.RelatedCases.DeleteRelatedCase:output_type -> webitel.cases.RelatedCase
	16, // 73: webitel.cases.RelatedCases.ListRelatedCases:output_type -> webitel.cases.RelatedCaseList
	64, // [64:74] is the sub-list for method output_type
	54, // [54:64] is the sub-list for method input_type
	54, // [54:54] is the sub-list for extension type_name
	54, // [54:54] is the sub-list for extension extendee
	0,  // [0:54] is the sub-list for field type_name
}

func init() { file_case_proto_init() }
func file_case_proto_init() {
	if File_case_proto != nil {
		return
	}
	file_general_proto_init()
	file_service_proto_init()
	file_case_comment_proto_init()
	file_case_file_proto_init()
	file_case_link_proto_init()
	file_sla_condition_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_case_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_case_proto_goTypes,
		DependencyIndexes: file_case_proto_depIdxs,
		EnumInfos:         file_case_proto_enumTypes,
		MessageInfos:      file_case_proto_msgTypes,
	}.Build()
	File_case_proto = out.File
	file_case_proto_rawDesc = nil
	file_case_proto_goTypes = nil
	file_case_proto_depIdxs = nil
}
