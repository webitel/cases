// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        (unknown)
// source: case.proto

package cases

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/webitel/webitel-go-kit/cmd/protoc-gen-go-webitel/gen/go/proto/webitel"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/genproto/googleapis/api/visibility"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for searching cases with optional filters, pagination, and sorting.
type SearchCasesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`                                                                                // Page number for pagination.
	Size          int32                  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`                                                                                // Number of results per page.
	Q             string                 `protobuf:"bytes,3,opt,name=q,proto3" json:"q,omitempty"`                                                                                       // Query string for searching cases.
	Ids           []string               `protobuf:"bytes,4,rep,name=ids,proto3" json:"ids,omitempty"`                                                                                   // List of specific case IDs to retrieve.
	Sort          string                 `protobuf:"bytes,5,opt,name=sort,proto3" json:"sort,omitempty"`                                                                                 // Sorting criteria (e.g., field:asc).
	Fields        []string               `protobuf:"bytes,6,rep,name=fields,proto3" json:"fields,omitempty"`                                                                             // List of fields to include in the response.
	Filters       map[string]string      `protobuf:"bytes,7,rep,name=filters,proto3" json:"filters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Key-value pairs for additional filtering.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchCasesRequest) Reset() {
	*x = SearchCasesRequest{}
	mi := &file_case_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchCasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCasesRequest) ProtoMessage() {}

func (x *SearchCasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCasesRequest.ProtoReflect.Descriptor instead.
func (*SearchCasesRequest) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{0}
}

func (x *SearchCasesRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchCasesRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SearchCasesRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *SearchCasesRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *SearchCasesRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *SearchCasesRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *SearchCasesRequest) GetFilters() map[string]string {
	if x != nil {
		return x.Filters
	}
	return nil
}

// Request message for locating a specific case by its etag identifier.
type LocateCaseRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Fields        []string               `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LocateCaseRequest) Reset() {
	*x = LocateCaseRequest{}
	mi := &file_case_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocateCaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocateCaseRequest) ProtoMessage() {}

func (x *LocateCaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocateCaseRequest.ProtoReflect.Descriptor instead.
func (*LocateCaseRequest) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{1}
}

func (x *LocateCaseRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LocateCaseRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

// Input structure for creating a new case.
type InputCreateCase struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Subject       string                        `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`                            // Required subject of the case.
	Description   string                        `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`                    // Optional description of the case.
	ContactInfo   string                        `protobuf:"bytes,3,opt,name=contact_info,json=contactInfo,proto3" json:"contact_info,omitempty"` // Optional contact information.
	Assignee      *Lookup                       `protobuf:"bytes,4,opt,name=assignee,proto3" json:"assignee,omitempty"`                          // Optional assignee ID.
	Reporter      *Lookup                       `protobuf:"bytes,5,opt,name=reporter,proto3" json:"reporter,omitempty"`                          // Required reporter ID (if empty, anonymous contact).
	Impacted      *Lookup                       `protobuf:"bytes,6,opt,name=impacted,proto3" json:"impacted,omitempty"`                          // Required impacted user ID (default: reporter).
	Group         *Lookup                       `protobuf:"bytes,7,opt,name=group,proto3" json:"group,omitempty"`                                // Optional group ID.
	Status        *Lookup                       `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`                              // Initial case status (default from lookup or UI).
	CloseReason   *Lookup                       `protobuf:"bytes,9,opt,name=close_reason,json=closeReason,proto3" json:"close_reason,omitempty"` // Optional close reason.
	Priority      *Lookup                       `protobuf:"bytes,10,opt,name=priority,proto3" json:"priority,omitempty"`                         // Optional priority level.
	Source        *Lookup                       `protobuf:"bytes,11,opt,name=source,proto3" json:"source,omitempty"`                             // Source of the case.
	Service       *Lookup                       `protobuf:"bytes,12,opt,name=service,proto3" json:"service,omitempty"`                           // Service ID (affects many other readonly fields).
	Close         *CreateCaseCloseInput         `protobuf:"bytes,13,opt,name=close,proto3" json:"close,omitempty"`                               // Optional close information.
	Rate          *RateInfo                     `protobuf:"bytes,14,opt,name=rate,proto3" json:"rate,omitempty"`                                 // API-only rating information.
	Links         []*InputCaseLink              `protobuf:"bytes,15,rep,name=links,proto3" json:"links,omitempty"`                               // List of links attached to the case.
	Related       []*CreateCaseRelatedCaseInput `protobuf:"bytes,16,rep,name=related,proto3" json:"related,omitempty"`                           // List of related cases.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InputCreateCase) Reset() {
	*x = InputCreateCase{}
	mi := &file_case_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InputCreateCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputCreateCase) ProtoMessage() {}

func (x *InputCreateCase) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputCreateCase.ProtoReflect.Descriptor instead.
func (*InputCreateCase) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{2}
}

func (x *InputCreateCase) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *InputCreateCase) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *InputCreateCase) GetContactInfo() string {
	if x != nil {
		return x.ContactInfo
	}
	return ""
}

func (x *InputCreateCase) GetAssignee() *Lookup {
	if x != nil {
		return x.Assignee
	}
	return nil
}

func (x *InputCreateCase) GetReporter() *Lookup {
	if x != nil {
		return x.Reporter
	}
	return nil
}

func (x *InputCreateCase) GetImpacted() *Lookup {
	if x != nil {
		return x.Impacted
	}
	return nil
}

func (x *InputCreateCase) GetGroup() *Lookup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *InputCreateCase) GetStatus() *Lookup {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *InputCreateCase) GetCloseReason() *Lookup {
	if x != nil {
		return x.CloseReason
	}
	return nil
}

func (x *InputCreateCase) GetPriority() *Lookup {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *InputCreateCase) GetSource() *Lookup {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *InputCreateCase) GetService() *Lookup {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *InputCreateCase) GetClose() *CreateCaseCloseInput {
	if x != nil {
		return x.Close
	}
	return nil
}

func (x *InputCreateCase) GetRate() *RateInfo {
	if x != nil {
		return x.Rate
	}
	return nil
}

func (x *InputCreateCase) GetLinks() []*InputCaseLink {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *InputCreateCase) GetRelated() []*CreateCaseRelatedCaseInput {
	if x != nil {
		return x.Related
	}
	return nil
}

// Structure for close information when a case is closed.
type CreateCaseCloseInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CloseResult   string                 `protobuf:"bytes,1,opt,name=close_result,json=closeResult,proto3" json:"close_result,omitempty"` // Comment or reason for closing the case.
	CloseReason   *Lookup                `protobuf:"bytes,2,opt,name=close_reason,json=closeReason,proto3" json:"close_reason,omitempty"` // Close reason ID from lookup.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCaseCloseInput) Reset() {
	*x = CreateCaseCloseInput{}
	mi := &file_case_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCaseCloseInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCaseCloseInput) ProtoMessage() {}

func (x *CreateCaseCloseInput) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCaseCloseInput.ProtoReflect.Descriptor instead.
func (*CreateCaseCloseInput) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{3}
}

func (x *CreateCaseCloseInput) GetCloseResult() string {
	if x != nil {
		return x.CloseResult
	}
	return ""
}

func (x *CreateCaseCloseInput) GetCloseReason() *Lookup {
	if x != nil {
		return x.CloseReason
	}
	return nil
}

type CreateCaseRelatedCaseInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RelationType  RelationType           `protobuf:"varint,3,opt,name=relation_type,json=relationType,proto3,enum=webitel.cases.RelationType" json:"relation_type,omitempty"`
	RelatedTo     string                 `protobuf:"bytes,4,opt,name=related_to,json=relatedTo,proto3" json:"related_to,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCaseRelatedCaseInput) Reset() {
	*x = CreateCaseRelatedCaseInput{}
	mi := &file_case_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCaseRelatedCaseInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCaseRelatedCaseInput) ProtoMessage() {}

func (x *CreateCaseRelatedCaseInput) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCaseRelatedCaseInput.ProtoReflect.Descriptor instead.
func (*CreateCaseRelatedCaseInput) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{4}
}

func (x *CreateCaseRelatedCaseInput) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateCaseRelatedCaseInput) GetRelationType() RelationType {
	if x != nil {
		return x.RelationType
	}
	return RelationType_RELATION_TYPE_UNSPECIFIED
}

func (x *CreateCaseRelatedCaseInput) GetRelatedTo() string {
	if x != nil {
		return x.RelatedTo
	}
	return ""
}

// Request message for creating a case.
type CreateCaseRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Input         *InputCreateCase       `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`   // Input data for creating the case.
	Fields        []string               `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"` // List of fields to include in the response.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCaseRequest) Reset() {
	*x = CreateCaseRequest{}
	mi := &file_case_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCaseRequest) ProtoMessage() {}

func (x *CreateCaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCaseRequest.ProtoReflect.Descriptor instead.
func (*CreateCaseRequest) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{5}
}

func (x *CreateCaseRequest) GetInput() *InputCreateCase {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *CreateCaseRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

// Request message for updating an existing case.
type UpdateCaseRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	XJsonMask     []string               `protobuf:"bytes,1,rep,name=x_json_mask,json=xJsonMask,proto3" json:"x_json_mask,omitempty"` // List of JSON fields to update.
	Fields        []string               `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`                          // List of fields to include in the response.
	Input         *InputCase             `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`                            // Input data with updated fields.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateCaseRequest) Reset() {
	*x = UpdateCaseRequest{}
	mi := &file_case_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCaseRequest) ProtoMessage() {}

func (x *UpdateCaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCaseRequest.ProtoReflect.Descriptor instead.
func (*UpdateCaseRequest) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateCaseRequest) GetXJsonMask() []string {
	if x != nil {
		return x.XJsonMask
	}
	return nil
}

func (x *UpdateCaseRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *UpdateCaseRequest) GetInput() *InputCase {
	if x != nil {
		return x.Input
	}
	return nil
}

// Request message for deleting a case.
type DeleteCaseRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Fields        []string               `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"` // fields to return in deleted object
	Id            string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`         // identifier of the object
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCaseRequest) Reset() {
	*x = DeleteCaseRequest{}
	mi := &file_case_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCaseRequest) ProtoMessage() {}

func (x *DeleteCaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCaseRequest.ProtoReflect.Descriptor instead.
func (*DeleteCaseRequest) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteCaseRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *DeleteCaseRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Response message containing a list of cases.
type CaseList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int64                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`  // Current page number.
	Next          bool                   `protobuf:"varint,2,opt,name=next,proto3" json:"next,omitempty"`  // Flag indicating if there are more pages.
	Items         []*Case                `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"` // List of cases.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CaseList) Reset() {
	*x = CaseList{}
	mi := &file_case_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CaseList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaseList) ProtoMessage() {}

func (x *CaseList) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaseList.ProtoReflect.Descriptor instead.
func (*CaseList) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{8}
}

func (x *CaseList) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *CaseList) GetNext() bool {
	if x != nil {
		return x.Next
	}
	return false
}

func (x *CaseList) GetItems() []*Case {
	if x != nil {
		return x.Items
	}
	return nil
}

// Message representing a case.
type Case struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// default, readonly system fields
	Id                string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Ver               int32             `protobuf:"varint,2,opt,name=ver,proto3" json:"ver,omitempty"`
	CreatedBy         *Lookup           `protobuf:"bytes,4,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	CreatedAt         int64             `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // unixmilli
	UpdatedBy         *Lookup           `protobuf:"bytes,6,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	UpdatedAt         int64             `protobuf:"varint,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                            // unixmilli
	Name              string            `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`                                                        // Name of the case (may serve as an ID in docs).
	Subject           string            `protobuf:"bytes,9,opt,name=subject,proto3" json:"subject,omitempty"`                                                  // Subject of the case.
	Description       string            `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`                                         // Detailed description of the case.
	ContactInfo       string            `protobuf:"bytes,11,opt,name=contact_info,json=contactInfo,proto3" json:"contact_info,omitempty"`                      // Contact information for the case.
	PlannedReactionAt int64             `protobuf:"varint,12,opt,name=planned_reaction_at,json=plannedReactionAt,proto3" json:"planned_reaction_at,omitempty"` // Planned reaction time (in milliseconds).
	PlannedResolveAt  int64             `protobuf:"varint,13,opt,name=planned_resolve_at,json=plannedResolveAt,proto3" json:"planned_resolve_at,omitempty"`    // Planned resolution time (in milliseconds).
	Status            *Lookup           `protobuf:"bytes,14,opt,name=status,proto3" json:"status,omitempty"`                                                   // Current status of the case.
	CloseReasonGroup  *Lookup           `protobuf:"bytes,15,opt,name=close_reason_group,json=closeReasonGroup,proto3" json:"close_reason_group,omitempty"`     // Close reason group, immutable once set.
	Author            *Lookup           `protobuf:"bytes,16,opt,name=author,proto3" json:"author,omitempty"`                                                   // Author or reporter of the case.
	Assignee          *Lookup           `protobuf:"bytes,17,opt,name=assignee,proto3" json:"assignee,omitempty"`                                               // Assignee responsible for resolving the case.
	Reporter          *Lookup           `protobuf:"bytes,18,opt,name=reporter,proto3" json:"reporter,omitempty"`                                               // Reporter of the issue (null if anonymous).
	Impacted          *Lookup           `protobuf:"bytes,19,opt,name=impacted,proto3" json:"impacted,omitempty"`                                               // Impacted contact (defaults to reporter if null).
	Group             *Lookup           `protobuf:"bytes,20,opt,name=group,proto3" json:"group,omitempty"`                                                     // Group associated with the case.
	Priority          *Priority         `protobuf:"bytes,21,opt,name=priority,proto3" json:"priority,omitempty"`                                               // Priority level of the case.
	Source            *SourceTypeLookup `protobuf:"bytes,22,opt,name=source,proto3" json:"source,omitempty"`                                                   // Source of the case.
	StatusCondition   *Lookup           `protobuf:"bytes,23,opt,name=status_condition,json=statusCondition,proto3" json:"status_condition,omitempty"`          // Status condition from status lookup.
	Close             *CloseInfo        `protobuf:"bytes,24,opt,name=close,proto3" json:"close,omitempty"`                                                     // Close information (if applicable).
	Rate              *RateInfo         `protobuf:"bytes,25,opt,name=rate,proto3" json:"rate,omitempty"`                                                       // Rating information.
	Timing            *TimingInfo       `protobuf:"bytes,26,opt,name=timing,proto3" json:"timing,omitempty"`                                                   // SLA timing details.
	SlaCondition      *Lookup           `protobuf:"bytes,27,opt,name=sla_condition,json=slaCondition,proto3" json:"sla_condition,omitempty"`                   // List of SLA conditions.
	Service           *Lookup           `protobuf:"bytes,28,opt,name=service,proto3" json:"service,omitempty"`                                                 // Service associated with the case.
	Comments          *CaseCommentList  `protobuf:"bytes,29,opt,name=comments,proto3" json:"comments,omitempty"`                                               // List of comments on the case.
	Related           *RelatedCaseList  `protobuf:"bytes,30,opt,name=related,proto3" json:"related,omitempty"`                                                 // List of related cases.
	Links             *CaseLinkList     `protobuf:"bytes,31,opt,name=links,proto3" json:"links,omitempty"`                                                     // List of attached links.
	Files             *CaseFileList     `protobuf:"bytes,32,opt,name=files,proto3" json:"files,omitempty"`                                                     // List of attached files.
	Sla               *Lookup           `protobuf:"bytes,33,opt,name=sla,proto3" json:"sla,omitempty"`                                                         // SLA associated with the case.
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Case) Reset() {
	*x = Case{}
	mi := &file_case_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Case) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Case) ProtoMessage() {}

func (x *Case) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Case.ProtoReflect.Descriptor instead.
func (*Case) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{9}
}

func (x *Case) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Case) GetVer() int32 {
	if x != nil {
		return x.Ver
	}
	return 0
}

func (x *Case) GetCreatedBy() *Lookup {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *Case) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Case) GetUpdatedBy() *Lookup {
	if x != nil {
		return x.UpdatedBy
	}
	return nil
}

func (x *Case) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Case) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Case) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *Case) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Case) GetContactInfo() string {
	if x != nil {
		return x.ContactInfo
	}
	return ""
}

func (x *Case) GetPlannedReactionAt() int64 {
	if x != nil {
		return x.PlannedReactionAt
	}
	return 0
}

func (x *Case) GetPlannedResolveAt() int64 {
	if x != nil {
		return x.PlannedResolveAt
	}
	return 0
}

func (x *Case) GetStatus() *Lookup {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Case) GetCloseReasonGroup() *Lookup {
	if x != nil {
		return x.CloseReasonGroup
	}
	return nil
}

func (x *Case) GetAuthor() *Lookup {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *Case) GetAssignee() *Lookup {
	if x != nil {
		return x.Assignee
	}
	return nil
}

func (x *Case) GetReporter() *Lookup {
	if x != nil {
		return x.Reporter
	}
	return nil
}

func (x *Case) GetImpacted() *Lookup {
	if x != nil {
		return x.Impacted
	}
	return nil
}

func (x *Case) GetGroup() *Lookup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *Case) GetPriority() *Priority {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *Case) GetSource() *SourceTypeLookup {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Case) GetStatusCondition() *Lookup {
	if x != nil {
		return x.StatusCondition
	}
	return nil
}

func (x *Case) GetClose() *CloseInfo {
	if x != nil {
		return x.Close
	}
	return nil
}

func (x *Case) GetRate() *RateInfo {
	if x != nil {
		return x.Rate
	}
	return nil
}

func (x *Case) GetTiming() *TimingInfo {
	if x != nil {
		return x.Timing
	}
	return nil
}

func (x *Case) GetSlaCondition() *Lookup {
	if x != nil {
		return x.SlaCondition
	}
	return nil
}

func (x *Case) GetService() *Lookup {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *Case) GetComments() *CaseCommentList {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *Case) GetRelated() *RelatedCaseList {
	if x != nil {
		return x.Related
	}
	return nil
}

func (x *Case) GetLinks() *CaseLinkList {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *Case) GetFiles() *CaseFileList {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *Case) GetSla() *Lookup {
	if x != nil {
		return x.Sla
	}
	return nil
}

// Message representing close information for a case.
type CloseInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CloseResult   string                 `protobuf:"bytes,1,opt,name=close_result,json=closeResult,proto3" json:"close_result,omitempty"` // Result or reason for closing the case.
	CloseReason   *Lookup                `protobuf:"bytes,2,opt,name=close_reason,json=closeReason,proto3" json:"close_reason,omitempty"` // Lookup for the close reason.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloseInfo) Reset() {
	*x = CloseInfo{}
	mi := &file_case_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseInfo) ProtoMessage() {}

func (x *CloseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseInfo.ProtoReflect.Descriptor instead.
func (*CloseInfo) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{10}
}

func (x *CloseInfo) GetCloseResult() string {
	if x != nil {
		return x.CloseResult
	}
	return ""
}

func (x *CloseInfo) GetCloseReason() *Lookup {
	if x != nil {
		return x.CloseReason
	}
	return nil
}

type SourceTypeLookup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type          SourceType             `protobuf:"varint,2,opt,name=type,proto3,enum=webitel.cases.SourceType" json:"type,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SourceTypeLookup) Reset() {
	*x = SourceTypeLookup{}
	mi := &file_case_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SourceTypeLookup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceTypeLookup) ProtoMessage() {}

func (x *SourceTypeLookup) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceTypeLookup.ProtoReflect.Descriptor instead.
func (*SourceTypeLookup) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{11}
}

func (x *SourceTypeLookup) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SourceTypeLookup) GetType() SourceType {
	if x != nil {
		return x.Type
	}
	return SourceType_TYPE_UNSPECIFIED
}

func (x *SourceTypeLookup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Message representing rating information.
type RateInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rating        int64                  `protobuf:"varint,1,opt,name=rating,proto3" json:"rating,omitempty"`                                   // Rating value.
	RatingComment string                 `protobuf:"bytes,2,opt,name=rating_comment,json=ratingComment,proto3" json:"rating_comment,omitempty"` // Optional comment for the rating.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RateInfo) Reset() {
	*x = RateInfo{}
	mi := &file_case_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateInfo) ProtoMessage() {}

func (x *RateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateInfo.ProtoReflect.Descriptor instead.
func (*RateInfo) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{12}
}

func (x *RateInfo) GetRating() int64 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *RateInfo) GetRatingComment() string {
	if x != nil {
		return x.RatingComment
	}
	return ""
}

// Message representing SLA timing information.
type TimingInfo struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	ResolvedAt           int64                  `protobuf:"varint,1,opt,name=resolved_at,json=resolvedAt,proto3" json:"resolved_at,omitempty"`                                 // Actual resolution timestamp (in milliseconds).
	ReactedAt            int64                  `protobuf:"varint,2,opt,name=reacted_at,json=reactedAt,proto3" json:"reacted_at,omitempty"`                                    // Actual reaction timestamp (in milliseconds).
	DifferenceInReaction int64                  `protobuf:"varint,3,opt,name=difference_in_reaction,json=differenceInReaction,proto3" json:"difference_in_reaction,omitempty"` // Difference between actual and planned reaction time.
	DifferenceInResolve  int64                  `protobuf:"varint,4,opt,name=difference_in_resolve,json=differenceInResolve,proto3" json:"difference_in_resolve,omitempty"`    // Difference between actual and planned resolution time.
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *TimingInfo) Reset() {
	*x = TimingInfo{}
	mi := &file_case_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimingInfo) ProtoMessage() {}

func (x *TimingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimingInfo.ProtoReflect.Descriptor instead.
func (*TimingInfo) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{13}
}

func (x *TimingInfo) GetResolvedAt() int64 {
	if x != nil {
		return x.ResolvedAt
	}
	return 0
}

func (x *TimingInfo) GetReactedAt() int64 {
	if x != nil {
		return x.ReactedAt
	}
	return 0
}

func (x *TimingInfo) GetDifferenceInReaction() int64 {
	if x != nil {
		return x.DifferenceInReaction
	}
	return 0
}

func (x *TimingInfo) GetDifferenceInResolve() int64 {
	if x != nil {
		return x.DifferenceInResolve
	}
	return 0
}

type InputCase struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Subject       string                 `protobuf:"bytes,3,opt,name=subject,proto3" json:"subject,omitempty"`                             // create: required;
	Description   string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`                     // create: not required;
	ContactInfo   string                 `protobuf:"bytes,5,opt,name=contact_info,json=contactInfo,proto3" json:"contact_info,omitempty"`  // create: not required;
	Assignee      *Lookup                `protobuf:"bytes,6,opt,name=assignee,proto3" json:"assignee,omitempty"`                           // create: not required, default from service or set by UI;
	Reporter      *Lookup                `protobuf:"bytes,7,opt,name=reporter,proto3" json:"reporter,omitempty"`                           // create: required (if empty recognize as anonymous contact);
	Impacted      *Lookup                `protobuf:"bytes,8,opt,name=impacted,proto3" json:"impacted,omitempty"`                           // create: required, default is reporter or ui (if empty recognize as anonymous);
	Group         *Lookup                `protobuf:"bytes,9,opt,name=group,proto3" json:"group,omitempty"`                                 // create: not required, default from service or set by UI;
	Status        *Lookup                `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`                              // create: not required, default initial value from status lookup or ui;
	CloseReason   *Lookup                `protobuf:"bytes,11,opt,name=close_reason,json=closeReason,proto3" json:"close_reason,omitempty"` // create: not required;
	Priority      *Lookup                `protobuf:"bytes,12,opt,name=priority,proto3" json:"priority,omitempty"`                          // create: not required, default first value from priority lookup
	Source        *Lookup                `protobuf:"bytes,13,opt,name=source,proto3" json:"source,omitempty"`                              // source of the case
	Service       *Lookup                `protobuf:"bytes,14,opt,name=service,proto3" json:"service,omitempty"`                            // on this field base many other readonly fields on return
	Close         *CloseInfo             `protobuf:"bytes,15,opt,name=close,proto3" json:"close,omitempty"`                                // create: not required; update: required only when case status goes to the final state
	Rate          *RateInfo              `protobuf:"bytes,16,opt,name=rate,proto3" json:"rate,omitempty"`                                  // only for API, not UI
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InputCase) Reset() {
	*x = InputCase{}
	mi := &file_case_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InputCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputCase) ProtoMessage() {}

func (x *InputCase) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputCase.ProtoReflect.Descriptor instead.
func (*InputCase) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{14}
}

func (x *InputCase) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InputCase) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *InputCase) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *InputCase) GetContactInfo() string {
	if x != nil {
		return x.ContactInfo
	}
	return ""
}

func (x *InputCase) GetAssignee() *Lookup {
	if x != nil {
		return x.Assignee
	}
	return nil
}

func (x *InputCase) GetReporter() *Lookup {
	if x != nil {
		return x.Reporter
	}
	return nil
}

func (x *InputCase) GetImpacted() *Lookup {
	if x != nil {
		return x.Impacted
	}
	return nil
}

func (x *InputCase) GetGroup() *Lookup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *InputCase) GetStatus() *Lookup {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *InputCase) GetCloseReason() *Lookup {
	if x != nil {
		return x.CloseReason
	}
	return nil
}

func (x *InputCase) GetPriority() *Lookup {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *InputCase) GetSource() *Lookup {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *InputCase) GetService() *Lookup {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *InputCase) GetClose() *CloseInfo {
	if x != nil {
		return x.Close
	}
	return nil
}

func (x *InputCase) GetRate() *RateInfo {
	if x != nil {
		return x.Rate
	}
	return nil
}

var File_case_proto protoreflect.FileDescriptor

var file_case_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x77, 0x65,
	0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x1a, 0x0d, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x63, 0x61, 0x73, 0x65, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0f, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0f, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x13, 0x73, 0x6c, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8e, 0x02, 0x0a, 0x12,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x48, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65,
	0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x61,
	0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x1a, 0x3a, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3b, 0x0a, 0x11,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xdd, 0x05, 0x0a, 0x0f, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x08,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52,
	0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x08, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x29, 0x0a,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65,
	0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61,
	0x73, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65,
	0x73, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x32, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x6c,
	0x69, 0x6e, 0x6b, 0x73, 0x12, 0x43, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e,
	0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x52, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x22, 0x6d, 0x0a, 0x14, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x61, 0x73, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x32, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x0b, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x8d, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61,
	0x73, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x22, 0x61, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x77,
	0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x73, 0x65, 0x52, 0x05, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x7b, 0x0a, 0x11, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0b, 0x78, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x78, 0x4a, 0x73, 0x6f, 0x6e, 0x4d, 0x61, 0x73, 0x6b,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65,
	0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x3b, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5d, 0x0a, 0x08, 0x43, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74,
	0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x22, 0xf0, 0x0a, 0x0a, 0x04, 0x43, 0x61, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x76, 0x65, 0x72, 0x12,
	0x2e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2e,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x2e, 0x0a, 0x13, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70,
	0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74,
	0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x70, 0x6c,
	0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x41, 0x74, 0x12, 0x27,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x12, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x52, 0x10, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x27, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12,
	0x2b, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x52, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x12, 0x2b, 0x0a, 0x08,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52,
	0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x08, 0x69, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x08, 0x69, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e,
	0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x33, 0x0a,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73,
	0x65, 0x73, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x10, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e,
	0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c,
	0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e,
	0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x72, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63,
	0x61, 0x73, 0x65, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x0d, 0x73, 0x6c, 0x61, 0x5f, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52,
	0x0c, 0x73, 0x6c, 0x61, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x77, 0x65, 0x62,
	0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e,
	0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x73,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x31,
	0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x61,
	0x73, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b,
	0x73, 0x12, 0x31, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73,
	0x2e, 0x43, 0x61, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x73, 0x6c, 0x61, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x52, 0x03, 0x73, 0x6c, 0x61, 0x22, 0x62, 0x0a, 0x09, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x32, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x0b,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x65, 0x0a, 0x10, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x49, 0x0a, 0x08, 0x52, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xb6, 0x01,
	0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x61, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x72, 0x65, 0x61, 0x63, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x34, 0x0a, 0x16,
	0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x72, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x64, 0x69,
	0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x13, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x22, 0xe3, 0x04, 0x0a, 0x09, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e,
	0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65,
	0x12, 0x2b, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a,
	0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x52, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x0c, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2b,
	0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e,
	0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x2e, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12,
	0x2b, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x32, 0x95, 0x04, 0x0a,
	0x05, 0x43, 0x61, 0x73, 0x65, 0x73, 0x12, 0x5d, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x43, 0x61, 0x73, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e,
	0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x61, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74,
	0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x12, 0x90, 0xb5, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x2f,
	0x63, 0x61, 0x73, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x0a, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x43,
	0x61, 0x73, 0x65, 0x12, 0x20, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61,
	0x73, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e,
	0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x22, 0x17, 0x90, 0xb5, 0x18, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x12, 0x5e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x73,
	0x65, 0x12, 0x20, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65,
	0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61,
	0x73, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x22, 0x19, 0x90, 0xb5, 0x18, 0x00, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0f, 0x3a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x06, 0x2f, 0x63, 0x61,
	0x73, 0x65, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61,
	0x73, 0x65, 0x12, 0x20, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73,
	0x65, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63,
	0x61, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x22, 0x40, 0x90, 0xb5, 0x18, 0x02, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x36, 0x3a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5a, 0x1a, 0x3a, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x32, 0x11, 0x2f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x2e, 0x69, 0x64, 0x7d, 0x1a, 0x11, 0x2f, 0x63, 0x61, 0x73, 0x65, 0x73,
	0x2f, 0x7b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x69, 0x64, 0x7d, 0x12, 0x5c, 0x0a, 0x0a, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x73, 0x65, 0x12, 0x20, 0x2e, 0x77, 0x65, 0x62, 0x69,
	0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x77, 0x65,
	0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x73, 0x65,
	0x22, 0x17, 0x90, 0xb5, 0x18, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x2a, 0x0b, 0x2f, 0x63,
	0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x1a, 0x09, 0x8a, 0xb5, 0x18, 0x05, 0x63,
	0x61, 0x73, 0x65, 0x73, 0x42, 0x9d, 0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x77, 0x65, 0x62,
	0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x42, 0x09, 0x43, 0x61, 0x73, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2f, 0x63, 0x61, 0x73, 0x65,
	0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x3b, 0x63, 0x61, 0x73, 0x65,
	0x73, 0xa2, 0x02, 0x03, 0x57, 0x43, 0x58, 0xaa, 0x02, 0x0d, 0x57, 0x65, 0x62, 0x69, 0x74, 0x65,
	0x6c, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x73, 0xca, 0x02, 0x0d, 0x57, 0x65, 0x62, 0x69, 0x74, 0x65,
	0x6c, 0x5c, 0x43, 0x61, 0x73, 0x65, 0x73, 0xe2, 0x02, 0x19, 0x57, 0x65, 0x62, 0x69, 0x74, 0x65,
	0x6c, 0x5c, 0x43, 0x61, 0x73, 0x65, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x0e, 0x57, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x3a, 0x3a, 0x43,
	0x61, 0x73, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_case_proto_rawDescOnce sync.Once
	file_case_proto_rawDescData = file_case_proto_rawDesc
)

func file_case_proto_rawDescGZIP() []byte {
	file_case_proto_rawDescOnce.Do(func() {
		file_case_proto_rawDescData = protoimpl.X.CompressGZIP(file_case_proto_rawDescData)
	})
	return file_case_proto_rawDescData
}

var file_case_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_case_proto_goTypes = []any{
	(*SearchCasesRequest)(nil),         // 0: webitel.cases.SearchCasesRequest
	(*LocateCaseRequest)(nil),          // 1: webitel.cases.LocateCaseRequest
	(*InputCreateCase)(nil),            // 2: webitel.cases.InputCreateCase
	(*CreateCaseCloseInput)(nil),       // 3: webitel.cases.CreateCaseCloseInput
	(*CreateCaseRelatedCaseInput)(nil), // 4: webitel.cases.CreateCaseRelatedCaseInput
	(*CreateCaseRequest)(nil),          // 5: webitel.cases.CreateCaseRequest
	(*UpdateCaseRequest)(nil),          // 6: webitel.cases.UpdateCaseRequest
	(*DeleteCaseRequest)(nil),          // 7: webitel.cases.DeleteCaseRequest
	(*CaseList)(nil),                   // 8: webitel.cases.CaseList
	(*Case)(nil),                       // 9: webitel.cases.Case
	(*CloseInfo)(nil),                  // 10: webitel.cases.CloseInfo
	(*SourceTypeLookup)(nil),           // 11: webitel.cases.SourceTypeLookup
	(*RateInfo)(nil),                   // 12: webitel.cases.RateInfo
	(*TimingInfo)(nil),                 // 13: webitel.cases.TimingInfo
	(*InputCase)(nil),                  // 14: webitel.cases.InputCase
	nil,                                // 15: webitel.cases.SearchCasesRequest.FiltersEntry
	(*Lookup)(nil),                     // 16: general.Lookup
	(*InputCaseLink)(nil),              // 17: webitel.cases.InputCaseLink
	(RelationType)(0),                  // 18: webitel.cases.RelationType
	(*Priority)(nil),                   // 19: webitel.cases.Priority
	(*CaseCommentList)(nil),            // 20: webitel.cases.CaseCommentList
	(*RelatedCaseList)(nil),            // 21: webitel.cases.RelatedCaseList
	(*CaseLinkList)(nil),               // 22: webitel.cases.CaseLinkList
	(*CaseFileList)(nil),               // 23: webitel.cases.CaseFileList
	(SourceType)(0),                    // 24: webitel.cases.SourceType
}
var file_case_proto_depIdxs = []int32{
	15, // 0: webitel.cases.SearchCasesRequest.filters:type_name -> webitel.cases.SearchCasesRequest.FiltersEntry
	16, // 1: webitel.cases.InputCreateCase.assignee:type_name -> general.Lookup
	16, // 2: webitel.cases.InputCreateCase.reporter:type_name -> general.Lookup
	16, // 3: webitel.cases.InputCreateCase.impacted:type_name -> general.Lookup
	16, // 4: webitel.cases.InputCreateCase.group:type_name -> general.Lookup
	16, // 5: webitel.cases.InputCreateCase.status:type_name -> general.Lookup
	16, // 6: webitel.cases.InputCreateCase.close_reason:type_name -> general.Lookup
	16, // 7: webitel.cases.InputCreateCase.priority:type_name -> general.Lookup
	16, // 8: webitel.cases.InputCreateCase.source:type_name -> general.Lookup
	16, // 9: webitel.cases.InputCreateCase.service:type_name -> general.Lookup
	3,  // 10: webitel.cases.InputCreateCase.close:type_name -> webitel.cases.CreateCaseCloseInput
	12, // 11: webitel.cases.InputCreateCase.rate:type_name -> webitel.cases.RateInfo
	17, // 12: webitel.cases.InputCreateCase.links:type_name -> webitel.cases.InputCaseLink
	4,  // 13: webitel.cases.InputCreateCase.related:type_name -> webitel.cases.CreateCaseRelatedCaseInput
	16, // 14: webitel.cases.CreateCaseCloseInput.close_reason:type_name -> general.Lookup
	18, // 15: webitel.cases.CreateCaseRelatedCaseInput.relation_type:type_name -> webitel.cases.RelationType
	2,  // 16: webitel.cases.CreateCaseRequest.input:type_name -> webitel.cases.InputCreateCase
	14, // 17: webitel.cases.UpdateCaseRequest.input:type_name -> webitel.cases.InputCase
	9,  // 18: webitel.cases.CaseList.items:type_name -> webitel.cases.Case
	16, // 19: webitel.cases.Case.created_by:type_name -> general.Lookup
	16, // 20: webitel.cases.Case.updated_by:type_name -> general.Lookup
	16, // 21: webitel.cases.Case.status:type_name -> general.Lookup
	16, // 22: webitel.cases.Case.close_reason_group:type_name -> general.Lookup
	16, // 23: webitel.cases.Case.author:type_name -> general.Lookup
	16, // 24: webitel.cases.Case.assignee:type_name -> general.Lookup
	16, // 25: webitel.cases.Case.reporter:type_name -> general.Lookup
	16, // 26: webitel.cases.Case.impacted:type_name -> general.Lookup
	16, // 27: webitel.cases.Case.group:type_name -> general.Lookup
	19, // 28: webitel.cases.Case.priority:type_name -> webitel.cases.Priority
	11, // 29: webitel.cases.Case.source:type_name -> webitel.cases.SourceTypeLookup
	16, // 30: webitel.cases.Case.status_condition:type_name -> general.Lookup
	10, // 31: webitel.cases.Case.close:type_name -> webitel.cases.CloseInfo
	12, // 32: webitel.cases.Case.rate:type_name -> webitel.cases.RateInfo
	13, // 33: webitel.cases.Case.timing:type_name -> webitel.cases.TimingInfo
	16, // 34: webitel.cases.Case.sla_condition:type_name -> general.Lookup
	16, // 35: webitel.cases.Case.service:type_name -> general.Lookup
	20, // 36: webitel.cases.Case.comments:type_name -> webitel.cases.CaseCommentList
	21, // 37: webitel.cases.Case.related:type_name -> webitel.cases.RelatedCaseList
	22, // 38: webitel.cases.Case.links:type_name -> webitel.cases.CaseLinkList
	23, // 39: webitel.cases.Case.files:type_name -> webitel.cases.CaseFileList
	16, // 40: webitel.cases.Case.sla:type_name -> general.Lookup
	16, // 41: webitel.cases.CloseInfo.close_reason:type_name -> general.Lookup
	24, // 42: webitel.cases.SourceTypeLookup.type:type_name -> webitel.cases.SourceType
	16, // 43: webitel.cases.InputCase.assignee:type_name -> general.Lookup
	16, // 44: webitel.cases.InputCase.reporter:type_name -> general.Lookup
	16, // 45: webitel.cases.InputCase.impacted:type_name -> general.Lookup
	16, // 46: webitel.cases.InputCase.group:type_name -> general.Lookup
	16, // 47: webitel.cases.InputCase.status:type_name -> general.Lookup
	16, // 48: webitel.cases.InputCase.close_reason:type_name -> general.Lookup
	16, // 49: webitel.cases.InputCase.priority:type_name -> general.Lookup
	16, // 50: webitel.cases.InputCase.source:type_name -> general.Lookup
	16, // 51: webitel.cases.InputCase.service:type_name -> general.Lookup
	10, // 52: webitel.cases.InputCase.close:type_name -> webitel.cases.CloseInfo
	12, // 53: webitel.cases.InputCase.rate:type_name -> webitel.cases.RateInfo
	0,  // 54: webitel.cases.Cases.SearchCases:input_type -> webitel.cases.SearchCasesRequest
	1,  // 55: webitel.cases.Cases.LocateCase:input_type -> webitel.cases.LocateCaseRequest
	5,  // 56: webitel.cases.Cases.CreateCase:input_type -> webitel.cases.CreateCaseRequest
	6,  // 57: webitel.cases.Cases.UpdateCase:input_type -> webitel.cases.UpdateCaseRequest
	7,  // 58: webitel.cases.Cases.DeleteCase:input_type -> webitel.cases.DeleteCaseRequest
	8,  // 59: webitel.cases.Cases.SearchCases:output_type -> webitel.cases.CaseList
	9,  // 60: webitel.cases.Cases.LocateCase:output_type -> webitel.cases.Case
	9,  // 61: webitel.cases.Cases.CreateCase:output_type -> webitel.cases.Case
	9,  // 62: webitel.cases.Cases.UpdateCase:output_type -> webitel.cases.Case
	9,  // 63: webitel.cases.Cases.DeleteCase:output_type -> webitel.cases.Case
	59, // [59:64] is the sub-list for method output_type
	54, // [54:59] is the sub-list for method input_type
	54, // [54:54] is the sub-list for extension type_name
	54, // [54:54] is the sub-list for extension extendee
	0,  // [0:54] is the sub-list for field type_name
}

func init() { file_case_proto_init() }
func file_case_proto_init() {
	if File_case_proto != nil {
		return
	}
	file_general_proto_init()
	file_service_proto_init()
	file_case_comment_proto_init()
	file_related_case_proto_init()
	file_case_file_proto_init()
	file_case_link_proto_init()
	file_priority_proto_init()
	file_source_proto_init()
	file_sla_condition_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_case_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_case_proto_goTypes,
		DependencyIndexes: file_case_proto_depIdxs,
		MessageInfos:      file_case_proto_msgTypes,
	}.Build()
	File_case_proto = out.File
	file_case_proto_rawDesc = nil
	file_case_proto_goTypes = nil
	file_case_proto_depIdxs = nil
}
