// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: case_communication.proto

package cases

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CaseCommunications_LinkCommunication_FullMethodName   = "/webitel.cases.CaseCommunications/LinkCommunication"
	CaseCommunications_UnlinkCommunication_FullMethodName = "/webitel.cases.CaseCommunications/UnlinkCommunication"
)

// CaseCommunicationsClient is the client API for CaseCommunications service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// CaseCommunication service used to get/link/unlink existing communications to the case
type CaseCommunicationsClient interface {
	LinkCommunication(ctx context.Context, in *LinkCommunicationRequest, opts ...grpc.CallOption) (*LinkCommunicationResponse, error)
	UnlinkCommunication(ctx context.Context, in *UnlinkCommunicationRequest, opts ...grpc.CallOption) (*UnlinkCommunicationResponse, error)
}

type caseCommunicationsClient struct {
	cc grpc.ClientConnInterface
}

func NewCaseCommunicationsClient(cc grpc.ClientConnInterface) CaseCommunicationsClient {
	return &caseCommunicationsClient{cc}
}

func (c *caseCommunicationsClient) LinkCommunication(ctx context.Context, in *LinkCommunicationRequest, opts ...grpc.CallOption) (*LinkCommunicationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LinkCommunicationResponse)
	err := c.cc.Invoke(ctx, CaseCommunications_LinkCommunication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *caseCommunicationsClient) UnlinkCommunication(ctx context.Context, in *UnlinkCommunicationRequest, opts ...grpc.CallOption) (*UnlinkCommunicationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnlinkCommunicationResponse)
	err := c.cc.Invoke(ctx, CaseCommunications_UnlinkCommunication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CaseCommunicationsServer is the server API for CaseCommunications service.
// All implementations must embed UnimplementedCaseCommunicationsServer
// for forward compatibility.
//
// CaseCommunication service used to get/link/unlink existing communications to the case
type CaseCommunicationsServer interface {
	LinkCommunication(context.Context, *LinkCommunicationRequest) (*LinkCommunicationResponse, error)
	UnlinkCommunication(context.Context, *UnlinkCommunicationRequest) (*UnlinkCommunicationResponse, error)
	mustEmbedUnimplementedCaseCommunicationsServer()
}

// UnimplementedCaseCommunicationsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCaseCommunicationsServer struct{}

func (UnimplementedCaseCommunicationsServer) LinkCommunication(context.Context, *LinkCommunicationRequest) (*LinkCommunicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkCommunication not implemented")
}
func (UnimplementedCaseCommunicationsServer) UnlinkCommunication(context.Context, *UnlinkCommunicationRequest) (*UnlinkCommunicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlinkCommunication not implemented")
}
func (UnimplementedCaseCommunicationsServer) mustEmbedUnimplementedCaseCommunicationsServer() {}
func (UnimplementedCaseCommunicationsServer) testEmbeddedByValue()                            {}

// UnsafeCaseCommunicationsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CaseCommunicationsServer will
// result in compilation errors.
type UnsafeCaseCommunicationsServer interface {
	mustEmbedUnimplementedCaseCommunicationsServer()
}

func RegisterCaseCommunicationsServer(s grpc.ServiceRegistrar, srv CaseCommunicationsServer) {
	// If the following call pancis, it indicates UnimplementedCaseCommunicationsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CaseCommunications_ServiceDesc, srv)
}

func _CaseCommunications_LinkCommunication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkCommunicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaseCommunicationsServer).LinkCommunication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaseCommunications_LinkCommunication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaseCommunicationsServer).LinkCommunication(ctx, req.(*LinkCommunicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaseCommunications_UnlinkCommunication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlinkCommunicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaseCommunicationsServer).UnlinkCommunication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaseCommunications_UnlinkCommunication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaseCommunicationsServer).UnlinkCommunication(ctx, req.(*UnlinkCommunicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CaseCommunications_ServiceDesc is the grpc.ServiceDesc for CaseCommunications service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CaseCommunications_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webitel.cases.CaseCommunications",
	HandlerType: (*CaseCommunicationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LinkCommunication",
			Handler:    _CaseCommunications_LinkCommunication_Handler,
		},
		{
			MethodName: "UnlinkCommunication",
			Handler:    _CaseCommunications_UnlinkCommunication_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "case_communication.proto",
}
