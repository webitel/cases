syntax = "proto3";
package webitel.cases;

option go_package = "github.com/webitel/cases/api/cases;cases";

import "cases/lookup.proto";
import "google/api/visibility.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/api/annotations.proto";

// Service message represents a service entity within a catalog
message Service {
  int64 id = 1;                  // Unique identifier for the service
  string name = 2;                // Name of the service
  int64 catalog_id = 3;           // ID of the parent catalog
  string description = 4;         // Description of the service (optional)
  string code = 5;                // Code for external integrations (optional)
  bool state = 6;                 // State of the service (true for active, false for inactive)
  Lookup sla = 7;                 // SLA associated with the service
  Lookup group = 8;               // Group responsible for the service
  Lookup assignee = 9;            // Assignee responsible for the service
  bool has_services = 10;       // Indicates if the service has subservices
  int64 created_at = 11;          // Timestamp when the service was created
  int64 updated_at = 12;          // Timestamp when the service was last updated
  Lookup created_by = 13;         // User who created the service
  Lookup updated_by = 14;         // User who last updated the service
  int64 root_id = 15;           // ID of the root catalog
}

// ServiceList message contains a list of services with pagination
message ServiceList {
  int32 page = 1;                 // Page number for pagination
  bool next = 2;                  // Indicates if there are more pages
  repeated Service items = 3;     // List of service items
}

// InputService message contains the fields for creating or updating a service
message InputService {
  string name = 1;                // Name of the service (required)
  int64 catalog_id = 2;           // The parent catalog (required)
  string description = 3;         // Description of the service (optional)
  string code = 4;                // Code for external integrations (optional)
  bool state = 5;                 // State of the service (true for active, false for inactive)
  int64 sla_id = 6;               // SLA ID associated with the service
  int64 group_id = 7;             // Group ID responsible for the service
  int64 assignee_id = 8;          // Assignee ID responsible for the service
  int64 root_id = 9;           // ID of the root catalog
}

// CreateServiceRequest message for creating a new service
message CreateServiceRequest {
  string name = 1;                // Name of the service (required)
  int64 root_id = 2;           // **Parent catalog ID** (required)
  string description = 3;         // Description of the service (optional)
  string code = 4;                // Code for external integrations (optional)
  bool state = 5;                 // State of the service (true for active, false for inactive)
  int64 sla_id = 6;               // SLA ID associated with the service
  int64 group_id = 7;             // Group ID responsible for the service
  int64 assignee_id = 8;          // Assignee ID responsible for the service
}

// UpdateServiceRequest message for updating an existing service
message UpdateServiceRequest {
  int64 id = 1;                   // ID of the service to be updated
  InputService input = 2;         // Input data for updating the service

  // ---- JSON PATCH fields mask ----
  repeated string x_json_mask = 3
  [(google.api.field_visibility) = {
    restriction: "PREVIEW"
  },
  (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    read_only: true
    pattern: "^$"
  }];
}

// DeleteServiceRequest message for deleting a service
message DeleteServiceRequest {
  repeated int64 id = 1;          // ID of the service to be deleted
}

// ListServiceRequest message for listing services within a catalog
message ListServiceRequest {
  int32 page = 1;                 // Page number for pagination
  int32 size = 2;                 // Number of records per page
  repeated string sort = 3;       // Sorting options by fields
  repeated int64 id = 4;          // List of IDs to filter the services
  string q = 5;                   // Search query string for filtering by name
  int64 root_id = 6;           // **Filter services by catalog ID** (required)
  bool state = 7;                 // Filter by state (true for active, false for inactive)
}

// LocateServiceRequest message for locating a specific service by ID
message LocateServiceRequest {
  int64 id = 1;                   // ID of the service to be located
}

// LocateServiceResponse message contains a single service entity
message LocateServiceResponse {
  Service service = 1;            // The located service
}

// Service definition for managing services within catalogs
service Services {
  // RPC method to list or search services within a catalog
  rpc ListServices(ListServiceRequest) returns (ServiceList) {
    option (google.api.http) = {
      get: "/cases/services"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Retrieve a list of services or search services within a catalog"
    };
  }

  // RPC method to create a new service within a catalog
  rpc CreateService(CreateServiceRequest) returns (Service) {
    option (google.api.http) = {
      post: "/cases/services",
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create a new service within a catalog"
    };
  }

  // RPC method to update an existing service
  rpc UpdateService(UpdateServiceRequest) returns (Service) {
    option (google.api.http) = {
      put: "/cases/services/{id}",
      body: "input"
      additional_bindings {
        patch: "/cases/services/{id}",
        body: "input"
      }
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update an existing service"
    };
  }

  // RPC method to delete a service
  rpc DeleteService(DeleteServiceRequest) returns (ServiceList) {
    option (google.api.http) = {
      delete: "/cases/services/{id}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete a service"
    };
  }

  // RPC method to locate a specific service by ID
  rpc LocateService(LocateServiceRequest) returns (LocateServiceResponse) {
    option (google.api.http) = {
      get: "/cases/services/{id}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Locate a service by ID"
    };
  }
}
